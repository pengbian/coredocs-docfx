items:
- uid: System.Linq.ParallelEnumerable
  id: ParallelEnumerable
  parent: System.Linq
  children:
  - System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  - System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.Empty``1
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  - System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  - System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  - System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  - System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
  type: Class
  source:
    remote: &o0
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 54
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Provides a set of methods for querying objects that implement

    ParallelQuery{TSource}.  This is the parallel equivalent of

    <see cref="!:System.Linq.Enumerable" />.
  syntax:
    content: public class ParallelEnumerable
    content.vb: Public Class ParallelEnumerable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  id: AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsParallel<TSource>(IEnumerable<TSource>)
  name.vb: AsParallel(Of TSource)(IEnumerable(Of TSource))
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 89
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Enables parallelization of a query.
  syntax:
    content: public static ParallelQuery<TSource> AsParallel<TSource>(IEnumerable<TSource> source)
    content.vb: Public Shared Function AsParallel(Of TSource)(source As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: >-
        An <see cref="T:System.Collections.Generic.IEnumerable`1" />

        to convert to a <see cref="T:System.Linq.ParallelQuery`1" />.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        The source as a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) to bind to

        ParallelEnumerable extension methods.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  id: AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsParallel<TSource>(Partitioner<TSource>)
  name.vb: AsParallel(Of TSource)(Partitioner(Of TSource))
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Concurrent.Partitioner<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 114
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Enables parallelization of a query, as sourced by a partitioner

    responsible for splitting the input sequence into partitions.
  remarks: >-
    The source partitioner's GetOrderedPartitions method is used when ordering is enabled,

    whereas the partitioner's GetPartitions is used if ordering is not enabled (the default).

    The source partitioner's GetDynamicPartitions and GetDynamicOrderedPartitions are not used.
  syntax:
    content: public static ParallelQuery<TSource> AsParallel<TSource>(Partitioner<TSource> source)
    content.vb: Public Shared Function AsParallel(Of TSource)(source As Partitioner(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: A partitioner over the input sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: The <paramref name="source" /> as a ParallelQuery to bind to ParallelEnumerable extension methods.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  id: AsOrdered``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsOrdered<TSource>(ParallelQuery<TSource>)
  name.vb: AsOrdered(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.AsOrdered<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.AsOrdered(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 144
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Enables treatment of a data source as if it was ordered, overriding the default of unordered.

    AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range,

    and ParallelEnumerable.Repeat.
  remarks: >-
    A natural tension exists between performance and preserving order in parallel processing. By default,

    a parallelized query behaves as if the ordering of the results is arbitrary

    unless AsOrdered is applied or there is an explicit OrderBy operator in the query.
  syntax:
    content: public static ParallelQuery<TSource> AsOrdered<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function AsOrdered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The input sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: The source sequence which will maintain ordering in the query.
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown if  is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  id: AsOrdered(System.Linq.ParallelQuery)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsOrdered(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 188
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Enables treatment of a data source as if it was ordered, overriding the default of unordered.

    AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range,

    and ParallelEnumerable.Repeat.
  remarks: >-
    A natural tension exists between performance and preserving order in parallel processing. By default,

    a parallelized query behaves as if the ordering of the results is arbitrary unless AsOrdered

    is applied or there is an explicit OrderBy operator in the query.
  syntax:
    content: public static ParallelQuery AsOrdered(ParallelQuery source)
    content.vb: Public Shared Function AsOrdered(source As ParallelQuery) As ParallelQuery
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: The input sequence.
    return:
      type: System.Linq.ParallelQuery
      description: The source sequence which will maintain ordering in the query.
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown if the  is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  id: AsUnordered``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsUnordered<TSource>(ParallelQuery<TSource>)
  name.vb: AsUnordered(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.AsUnordered<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.AsUnordered(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 217
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Allows an intermediate query to be treated as if no ordering is implied among the elements.
  remarks: >-
    AsUnordered may provide

    performance benefits when ordering is not required in a portion of a query.
  syntax:
    content: public static ParallelQuery<TSource> AsUnordered<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function AsUnordered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The input sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: The source sequence with arbitrary order.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  id: AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 239
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Enables parallelization of a query.
  syntax:
    content: public static ParallelQuery AsParallel(IEnumerable source)
    content.vb: Public Shared Function AsParallel(source As IEnumerable) As ParallelQuery
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: >-
        An [System.Collections.Generic.IEnumerable`1]() to convert

        to a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml).
    return:
      type: System.Linq.ParallelQuery
      description: >-
        The source as a ParallelQuery to bind to

        ParallelEnumerable extension methods.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  id: AsSequential``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsSequential<TSource>(ParallelQuery<TSource>)
  name.vb: AsSequential(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.AsSequential<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.AsSequential(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 266
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Converts a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) into an

    [System.Collections.Generic.IEnumerable`1]() to force sequential

    evaluation of the query.
  syntax:
    content: public static IEnumerable<TSource> AsSequential<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function AsSequential(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A <see cref="T:System.Linq.ParallelQuery`1" /> to convert to an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: >-
        The source as an <see cref="T:System.Collections.Generic.IEnumerable`1" />

        to bind to sequential extension methods.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)
  name.vb: WithDegreeOfParallelism(Of TSource)(ParallelQuery(Of TSource), Int32)
  fullName: System.Linq.ParallelEnumerable.WithDegreeOfParallelism<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  fullName.vb: System.Linq.ParallelEnumerable.WithDegreeOfParallelism(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 325
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently

    executing tasks that will be used to process the query.
  syntax:
    content: public static ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(ParallelQuery<TSource> source, int degreeOfParallelism)
    content.vb: Public Shared Function WithDegreeOfParallelism(Of TSource)(source As ParallelQuery(Of TSource), degreeOfParallelism As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A ParallelQuery on which to set the limit on the degrees of parallelism.
    - id: degreeOfParallelism
      type: System.Int32
      description: The degree of parallelism for the query.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: WithDegreeOfParallelism is used multiple times in the query.
  - type: System.ArgumentOutOfRangeException
    description: is less than 1 or greater than 512.
- uid: System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  id: WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)
  name.vb: WithCancellation(Of TSource)(ParallelQuery(Of TSource), CancellationToken)
  fullName: System.Linq.ParallelEnumerable.WithCancellation<TSource>(System.Linq.ParallelQuery<TSource>, System.Threading.CancellationToken)
  fullName.vb: System.Linq.ParallelEnumerable.WithCancellation(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 357
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Sets the [System.Threading.CancellationToken]() to associate with the query.
  syntax:
    content: public static ParallelQuery<TSource> WithCancellation<TSource>(ParallelQuery<TSource> source, CancellationToken cancellationToken)
    content.vb: Public Shared Function WithCancellation(Of TSource)(source As ParallelQuery(Of TSource), cancellationToken As CancellationToken) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A ParallelQuery on which to set the option.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        ParallelQuery representing the same query as source, but with the <seealso cref="T:System.Threading.CancellationToken" />

        registered.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: WithCancellation is used multiple times in the query.
  - type: System.ObjectDisposedException
    description: The  associated with the  has been disposed.
- uid: System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  id: WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)
  name.vb: WithExecutionMode(Of TSource)(ParallelQuery(Of TSource), ParallelExecutionMode)
  fullName: System.Linq.ParallelEnumerable.WithExecutionMode<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelExecutionMode)
  fullName.vb: System.Linq.ParallelEnumerable.WithExecutionMode(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelExecutionMode)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 401
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Sets the execution mode of the query.
  syntax:
    content: public static ParallelQuery<TSource> WithExecutionMode<TSource>(ParallelQuery<TSource> source, ParallelExecutionMode executionMode)
    content.vb: Public Shared Function WithExecutionMode(Of TSource)(source As ParallelQuery(Of TSource), executionMode As ParallelExecutionMode) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A ParallelQuery on which to set the option.
    - id: executionMode
      type: System.Linq.ParallelExecutionMode
      description: The mode in which to execute the query.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        ParallelQuery representing the same query as source, but with the

        [System.Linq.ParallelExecutionMode](System.Linq.ParallelExecutionMode.yml) registered.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentException
    description: is not a valid  value.
  - type: System.InvalidOperationException
    description: WithExecutionMode is used multiple times in the query.
- uid: System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  id: WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)
  name.vb: WithMergeOptions(Of TSource)(ParallelQuery(Of TSource), ParallelMergeOptions)
  fullName: System.Linq.ParallelEnumerable.WithMergeOptions<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelMergeOptions)
  fullName.vb: System.Linq.ParallelEnumerable.WithMergeOptions(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelMergeOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 433
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Sets the merge options for this query, which specify how the query will buffer output.
  syntax:
    content: public static ParallelQuery<TSource> WithMergeOptions<TSource>(ParallelQuery<TSource> source, ParallelMergeOptions mergeOptions)
    content.vb: Public Shared Function WithMergeOptions(Of TSource)(source As ParallelQuery(Of TSource), mergeOptions As ParallelMergeOptions) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A ParallelQuery on which to set the option.
    - id: mergeOptions
      type: System.Linq.ParallelMergeOptions
      description: The merge options to set for this query.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        ParallelQuery representing the same query as source, but with the

        [System.Linq.ParallelMergeOptions](System.Linq.ParallelMergeOptions.yml) registered.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentException
    description: is not a valid  value.
  - type: System.InvalidOperationException
    description: WithMergeOptions is used multiple times in the query.
- uid: System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Range(Int32, Int32)
  fullName: System.Linq.ParallelEnumerable.Range(System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 467
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Generates a parallel sequence of integral numbers within a specified range.
  syntax:
    content: public static ParallelQuery<int> Range(int start, int count)
    content.vb: Public Shared Function Range(start As Integer, count As Integer) As ParallelQuery(Of Integer)
    parameters:
    - id: start
      type: System.Int32
      description: The value of the first integer in the sequence.
    - id: count
      type: System.Int32
      description: The number of sequential integers to generate.
    return:
      type: System.Linq.ParallelQuery{System.Int32}
      description: >-
        An <b>IEnumerable&lt;Int32&gt;</b> in C# or <B>IEnumerable(Of Int32)</B> in

        Visual Basic that contains a range of sequential integral numbers.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than 0

      -or-

      +  - 1 is larger than .
- uid: System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  id: Repeat``1(``0,System.Int32)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Repeat<TResult>(TResult, Int32)
  name.vb: Repeat(Of TResult)(TResult, Int32)
  fullName: System.Linq.ParallelEnumerable.Repeat<TResult>(TResult, System.Int32)
  fullName.vb: System.Linq.ParallelEnumerable.Repeat(Of TResult)(TResult, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 487
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Generates a parallel sequence that contains one repeated value.
  syntax:
    content: public static ParallelQuery<TResult> Repeat<TResult>(TResult element, int count)
    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As ParallelQuery(Of TResult)
    parameters:
    - id: element
      type: '{TResult}'
      description: The value to be repeated.
    - id: count
      type: System.Int32
      description: The number of times to repeat the value in the generated sequence.
    typeParameters:
    - id: TResult
      description: The type of the value to be repeated in the result sequence.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: A sequence that contains a repeated value.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: is less than 0.
- uid: System.Linq.ParallelEnumerable.Empty``1
  id: Empty``1
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Empty<TResult>()
  name.vb: Empty(Of TResult)()
  fullName: System.Linq.ParallelEnumerable.Empty<TResult>()
  fullName.vb: System.Linq.ParallelEnumerable.Empty(Of TResult)()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 504
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns an empty ParallelQuery{TResult} that has the specified type argument.
  syntax:
    content: public static ParallelQuery<TResult> Empty<TResult>()
    content.vb: Public Shared Function Empty(Of TResult) As ParallelQuery(Of TResult)
    typeParameters:
    - id: TResult
      description: >-
        The type to assign to the type parameter of the returned

        generic sequence.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: An empty sequence whose type argument is <typeparamref name="TResult" />.
- uid: System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  id: ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)
  name.vb: ForAll(Of TSource)(ParallelQuery(Of TSource), Action(Of TSource))
  fullName: System.Linq.ParallelEnumerable.ForAll<TSource>(System.Linq.ParallelQuery<TSource>, System.Action<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.ForAll(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 545
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Invokes in parallel the specified action for each element in the <paramref name="source" />.
  remarks: >-
    This is an efficient way to process the output from a parallelized query because it does

    not require a merge step at the end.  However, order of execution is non-deterministic.
  syntax:
    content: public static void ForAll<TSource>(ParallelQuery<TSource> source, Action<TSource> action)
    content.vb: Public Shared Sub ForAll(Of TSource)(source As ParallelQuery(Of TSource), action As Action(Of TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        The [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) whose elements will be processed by

        <paramref name="action" />.
    - id: action
      type: System.Action{{TSource}}
      description: An Action to invoke on each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 577
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Filters in parallel a sequence of values based on a predicate.
  syntax:
    content: public static ParallelQuery<TSource> Where<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to filter.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        A sequence that contains elements from the input sequence that satisfy

        the condition.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 595
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
  syntax:
    content: public static ParallelQuery<TSource> Where<TSource>(ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to filter.
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains elements from the input sequence that satisfy the condition.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 620
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Projects in parallel each element of a sequence into a new form.
  syntax:
    content: public static ParallelQuery<TResult> Select<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to invoke a transform function on.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TResult
      description: The type of elements resturned by <b>selector</b>.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence whose elements are the result of invoking the transform function on each

        element of <paramref name="source" />.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)
  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, TResult))
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 641
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Projects in parallel each element of a sequence into a new form by incorporating the element's index.
  syntax:
    content: public static ParallelQuery<TResult> Select<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, int, TResult> selector)
    content.vb: Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to invoke a transform function on.
    - id: selector
      type: System.Func{{TSource},System.Int32,{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TResult
      description: The type of elements resturned by <b>selector</b>.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence whose elements are the result of invoking the transform function on each

        element of <paramref name="source" />.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)
  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), ParallelQuery(Of TSecond), Func(Of TFirst, TSecond, TResult))
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Linq.ParallelQuery<TSecond>, System.Func<TFirst, TSecond, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Linq.ParallelQuery(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 671
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Merges in parallel two sequences by using the specified predicate function.
  syntax:
    content: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst> first, ParallelQuery<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As ParallelQuery(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TFirst}}
      description: The first sequence to zip.
    - id: second
      type: System.Linq.ParallelQuery{{TSecond}}
      description: The second sequence to zip.
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
      description: A function to create a result element from two matching elements.
    typeParameters:
    - id: TFirst
      description: The type of the elements of the first sequence.
    - id: TSecond
      description: The type of the elements of the second sequence.
    - id: TResult
      description: The type of the return elements.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence that has elements of type <typeparamref name="TResult" /> that are obtained by performing

        resultSelector pairwise on two sequences. If the sequence lengths are unequal, this truncates

        to the length of the shorter sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 699
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Zip overload should never be called.

    This method is marked as obsolete and always throws

    [System.NotSupportedException]() when invoked.
  remarks: >-
    This overload exists to disallow usage of Zip with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Zip operator would appear to be bind to the parallel implementation, but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TFirst}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSecond}}
      description: This parameter is not used.
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
      description: This parameter is not used.
    typeParameters:
    - id: TFirst
      description: This type parameter is not used.
    - id: TSecond
      description: This type parameter is not used.
    - id: TResult
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 732
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Correlates in parallel the elements of two sequences based on matching keys.

    The default equality comparer is used to compare keys.
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: >-
        A function to extract the join key from each element of

        the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: >-
        A function to extract the join key from each element of

        the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: A function to create a result element from two matching elements.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence that has elements of type <typeparamref name="TResult" /> that are obtained by performing

        an inner join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or  or

      or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 761
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Join overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when invoked.
  remarks: >-
    This overload exists to disallow usage Join with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Join operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: This parameter is not used.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: This parameter is not used.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: This parameter is not used.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: This parameter is not used.
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: This parameter is not used.
    typeParameters:
    - id: TOuter
      description: This type parameter is not used.
    - id: TInner
      description: This type parameter is not used.
    - id: TKey
      description: This type parameter is not used.
    - id: TResult
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 792
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Correlates in parallel the elements of two sequences based on matching keys.

    A specified IEqualityComparer{T} is used to compare keys.
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: >-
        A function to extract the join key from each element

        of the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: >-
        A function to extract the join key from each element

        of the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: A function to create a result element from two matching elements.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to hash and compare keys.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence that has elements of type <typeparamref name="TResult" /> that are obtained by performing

        an inner join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or  or

      or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 828
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Join overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when invoked.
  remarks: >-
    This overload exists to disallow usage of Join with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Join operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: This parameter is not used.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: This parameter is not used.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: This parameter is not used.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: This parameter is not used.
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: This parameter is not used.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: This parameter is not used.
    typeParameters:
    - id: TOuter
      description: This type parameter is not used.
    - id: TInner
      description: This type parameter is not used.
    - id: TKey
      description: This type parameter is not used.
    - id: TResult
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 864
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Correlates in parallel the elements of two sequences based on equality of keys and groups the results.

    The default equality comparer is used to compare keys.
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: >-
        A function to extract the join key from each element

        of the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: >-
        A function to extract the join key from each element

        of the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence that has elements of type <typeparamref name="TResult" /> that are obtained by performing

        a grouped join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or  or

      or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 894
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This GroupJoin overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of GroupJoin with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the GroupJoin operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: This parameter is not used.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: This parameter is not used.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: This parameter is not used.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: This parameter is not used.
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: This parameter is not used.
    typeParameters:
    - id: TOuter
      description: This type parameter is not used.
    - id: TInner
      description: This type parameter is not used.
    - id: TKey
      description: This type parameter is not used.
    - id: TResult
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 926
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Correlates in parallel the elements of two sequences based on key equality and groups the results.

    A specified IEqualityComparer{T} is used to compare keys.
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: >-
        A function to extract the join key from each element

        of the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: >-
        A function to extract the join key from each element

        of the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to hash and compare keys.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence that has elements of type <typeparamref name="TResult" /> that are obtained by performing

        a grouped join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or  or

      or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 963
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This GroupJoin overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of GroupJoin with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the GroupJoin operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: This parameter is not used.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: This parameter is not used.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: This parameter is not used.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: This parameter is not used.
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: This parameter is not used.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: This parameter is not used.
    typeParameters:
    - id: TOuter
      description: This type parameter is not used.
    - id: TInner
      description: This type parameter is not used.
    - id: TKey
      description: This type parameter is not used.
    - id: TResult
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)
  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 991
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Projects in parallel each element of a sequence to an IEnumerable{T}

    and flattens the resulting sequences into one sequence.
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
    content.vb: Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TResult
      description: The type of the elements of the sequence returned by <B>selector</B>.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function on each element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)
  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1014
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Projects in parallel each element of a sequence to an IEnumerable{T}, and flattens the resulting

    sequences into one sequence. The index of each source element is used in the projected form of

    that element.
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)
    content.vb: Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TResult
      description: The type of the elements of the sequence returned by <B>selector</B>.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function on each element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1043
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Projects each element of a sequence to an IEnumerable{T},

    flattens the resulting sequences into one sequence, and invokes a result selector

    function on each element therein.
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
      description: >-
        A transform function to apply to each source element;

        the second parameter of the function represents the index of the source element.
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TCollection
      description: The type of the intermediate elements collected by <paramref name="collectionSelector" />.
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping

        each of those sequence elements and their corresponding source element to a result element.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1079
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Projects each element of a sequence to an IEnumerable{T}, flattens the resulting

    sequences into one sequence, and invokes a result selector function on each element

    therein. The index of each source element is used in the intermediate projected

    form of that element.
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
      description: >-
        A transform function to apply to each source element;

        the second parameter of the function represents the index of the source element.
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TCollection
      description: >-
        The type of the intermediate elements collected by

        <paramref name="collectionSelector" />.
    - id: TResult
      description: The type of elements to return.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping

        each of those sequence elements and their corresponding source element to a

        result element.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1114
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Sorts in parallel the elements of a sequence in ascending order according to a key.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    To achieve a stable sort, change a query of the form:

    <code>var ordered = source.OrderBy((e) =&gt; e.k);</code>

    to instead be formed as:

    <code>var ordered = source.Select((e,i) =&gt; new { E=e, I=i }).OrderBy((v) =&gt; v.i).Select((v) =&gt; v.e);</code>
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        according to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1142
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    See the remarks for OrderBy(ParallelQuery{TSource}, Func{TSource,TKey}) for

    an approach to implementing a stable sort.
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An IComparer{TKey} to compare keys.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted according

        to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1169
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Sorts in parallel the elements of a sequence in descending order according to a key.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    See the remarks for OrderBy(ParallelQuery{TSource}, Func{TSource,TKey}) for

    an approach to implementing a stable sort.
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        descending according to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1196
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Sorts the elements of a sequence in descending order by using a specified comparer.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    See the remarks for OrderBy(ParallelQuery{TSource}, Func{TSource,TKey}) for

    an approach to implementing a stable sort.
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An IComparer{TKey} to compare keys.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted descending

        according to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1226
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence

    in ascending order according to a key.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    See the remarks for OrderBy(ParallelQuery{TSource}, Func{TSource,TKey}) for

    an approach to implementing a stable sort.
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} than

        contains elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are

        sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1257
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence in

    ascending order by using a specified comparer.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    See the remarks for OrderBy(ParallelQuery{TSource}, Func{TSource,TKey}) for

    an approach to implementing a stable sort.
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} that contains

        elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An IComparer{TKey} to compare keys.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        according to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1287
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence in

    descending order, according to a key.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    See the remarks for OrderBy(ParallelQuery{TSource}, Func{TSource,TKey}) for

    an approach to implementing a stable sort.
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} than contains

        elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        descending according to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1318
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence in descending

    order by using a specified comparer.
  remarks: >-
    In contrast to the sequential implementation, this is not a stable sort.

    See the remarks for OrderBy(ParallelQuery{TSource}, Func{TSource,TKey}) for

    an approach to implementing a stable sort.
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} than contains

        elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An IComparer{TKey} to compare keys.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        descending according to a key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1345
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Groups in parallel the elements of a sequence according to a specified key selector function.
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.ParallelQuery{IGrouping{{TKey},{TSource}}}
      description: >-
        A collection of elements of type IGrouping{TKey, TElement}, where each element represents a

        group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or

      is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1364
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Linq.ParallelQuery{IGrouping{{TKey},{TSource}}}
      description: >-
        A collection of elements of type IGrouping{TKey, TElement}, where each element represents a

        group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1391
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Groups in parallel the elements of a sequence according to a specified key selector function and

    projects the elements for each group by using a specified function.
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ParallelQuery(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: >-
        A function to map each source element to an element in an

        IGrouping{Key, TElement}.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: >-
        The type of the elements in each

        IGrouping{TKey, TElement}.
    return:
      type: System.Linq.ParallelQuery{IGrouping{{TKey},{TElement}}}
      description: >-
        A collection of elements of type IGrouping{TKey, TElement}, where each element represents a

        group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1417
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Groups in parallel the elements of a sequence according to a key selector function.

    The keys are compared by using a comparer and each group's elements are projected by

    using a specified function.
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: >-
        A function to map each source element to an element in an

        IGrouping{Key, TElement}.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: >-
        The type of the elements in each

        IGrouping{TKey, TElement}.
    return:
      type: System.Linq.ParallelQuery{IGrouping{{TKey},{TElement}}}
      description: >-
        A collection of elements of type IGrouping{TKey, TElement}, where each element represents a

        group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)
  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1456
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Groups in parallel the elements of a sequence according to a specified

    key selector function and creates a result value from each group and its key.
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: A function to create a result value from each group.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TResult
      description: The type of the result value returned by <paramref name="resultSelector" />.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A collection of elements of type <typeparamref name="TResult" /> where each element represents a

        projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1484
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Groups in parallel the elements of a sequence according to a specified key selector function

    and creates a result value from each group and its key. The keys are compared

    by using a specified comparer.
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TResult
      description: The type of the result value returned by <paramref name="resultSelector" />.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A collection of elements of type <typeparamref name="TResult" /> where each element represents a

        projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1514
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Groups in parallel the elements of a sequence according to a specified key

    selector function and creates a result value from each group and its key.

    The elements of each group are projected by using a specified function.
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: >-
        A function to map each source element to an element in an

        IGrouping{Key, TElement}.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: A function to create a result value from each group.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: >-
        The type of the elements in each

        IGrouping{TKey, TElement}.
    - id: TResult
      description: The type of the result value returned by <paramref name="resultSelector" />.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A collection of elements of type <typeparamref name="TResult" /> where each element represents a

        projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1545
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Groups the elements of a sequence according to a specified key selector function and

    creates a result value from each group and its key. Key values are compared by using a

    specified comparer, and the elements of each group are projected by using a specified function.
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: >-
        A function to map each source element to an element in an

        IGrouping{Key, TElement}.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: >-
        The type of the elements in each

        IGrouping{TKey, TElement}.
    - id: TResult
      description: The type of the result value returned by <paramref name="resultSelector" />.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: >-
        A collection of elements of type <typeparamref name="TResult" /> where each element represents a

        projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)
  name.vb: Aggregate(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, TSource, TSource))
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TSource, TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TSource, TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1669
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Applies in parallel an accumulator function over a sequence.
  syntax:
    content: public static TSource Aggregate<TSource>(ParallelQuery<TSource> source, Func<TSource, TSource, TSource> func)
    content.vb: Public Shared Function Aggregate(Of TSource)(source As ParallelQuery(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to aggregate over.
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
      description: An accumulator function to be invoked on each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  id: Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  name.vb: Aggregate(Of TSource, TAccumulate)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1716
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Applies in parallel an accumulator function over a sequence.

    The specified seed value is used as the initial accumulator value.
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
    content.vb: Public Shared Function Aggregate(Of TSource, TAccumulate)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TAccumulate
      description: The type of the accumulator value.
    return:
      type: '{TAccumulate}'
      description: The final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1755
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Applies in parallel an accumulator function over a sequence. The specified

    seed value is used as the initial accumulator value, and the specified

    function is used to select the result value.
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    content.vb: Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: >-
        A function to transform the final accumulator value

        into the result value.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TAccumulate
      description: The type of the accumulator value.
    - id: TResult
      description: The type of the resulting value.
    return:
      type: '{TResult}'
      description: The transformed final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    description: or  or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1818
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Applies in parallel an accumulator function over a sequence. This overload is not

    available in the sequential implementation.
  remarks: >-
    This overload is specific to processing a parallelized query. A parallelized query may

    partition the data source sequence into several sub-sequences (partitions).

    The <paramref name="updateAccumulatorFunc" /> is invoked on each element within partitions.

    Each partition then yields a single accumulated result. The <paramref name="combineAccumulatorsFunc" />

    is then invoked on the results of each partition to yield a single element. This element is then

    transformed by the <paramref name="resultSelector" /> function.
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    content.vb: Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: updateAccumulatorFunc
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element in a partition.
    - id: combineAccumulatorsFunc
      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
      description: An accumulator function to be invoked on the yielded element from each partition.
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: A function to transform the final accumulator value into the result value.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TAccumulate
      description: The type of the accumulator value.
    - id: TResult
      description: The type of the resulting value.
    return:
      type: '{TResult}'
      description: The transformed final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or

      or  or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), Func(Of TAccumulate), Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TAccumulate>, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TAccumulate), System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1871
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Applies in parallel an accumulator function over a sequence.  This overload is not

    available in the sequential implementation.
  remarks: >-
    This overload is specific to parallelized queries. A parallelized query may partition the data source sequence

    into several sub-sequences (partitions). The <paramref name="updateAccumulatorFunc" /> is invoked

    on each element within partitions. Each partition then yields a single accumulated result.

    The <paramref name="combineAccumulatorsFunc" />

    is then invoked on the results of each partition to yield a single element. This element is then

    transformed by the <paramref name="resultSelector" /> function.
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource> source, Func<TAccumulate> seedFactory, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    content.vb: Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seedFactory As Func(Of TAccumulate), updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to aggregate over.
    - id: seedFactory
      type: System.Func{{TAccumulate}}
      description: A function that returns the initial accumulator value.
    - id: updateAccumulatorFunc
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element in a partition.
    - id: combineAccumulatorsFunc
      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
      description: An accumulator function to be invoked on the yielded element from each partition.
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: A function to transform the final accumulator value into the result value.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TAccumulate
      description: The type of the accumulator value.
    - id: TResult
      description: The type of the resulting value.
    return:
      type: '{TResult}'
      description: The transformed final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      or  or

      or  or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  id: Count``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Count<TSource>(ParallelQuery<TSource>)
  name.vb: Count(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1911
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the number of elements in a parallel sequence.
  syntax:
    content: public static int Count<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Int32
      description: The number of elements in the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The number of elements in source is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: Count(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1955
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns a number that represents how many elements in the specified

    parallel sequence satisfy a condition.
  syntax:
    content: public static int Count<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains elements to be counted.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Int32
      description: >-
        A number that represents how many elements in the sequence satisfy the condition

        in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The number of elements in source is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  id: LongCount``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: LongCount<TSource>(ParallelQuery<TSource>)
  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1984
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns an Int64 that represents the total number of elements in a parallel sequence.
  syntax:
    content: public static long LongCount<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Int64
      description: The number of elements in the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The number of elements in source is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2024
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.
  syntax:
    content: public static long LongCount<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains elements to be counted.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Int64
      description: >-
        A number that represents how many elements in the sequence satisfy the condition

        in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The number of elements in source is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  id: Sum(System.Linq.ParallelQuery{System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Int32>)
  name.vb: Sum(ParallelQuery(Of Int32))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2053
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static int Sum(ParallelQuery<int> source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Int32
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Nullable<Int32>>)
  name.vb: Sum(ParallelQuery(Of Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2075
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static int ? Sum(ParallelQuery<int ? > source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  id: Sum(System.Linq.ParallelQuery{System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Int64>)
  name.vb: Sum(ParallelQuery(Of Int64))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2097
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static long Sum(ParallelQuery<long> source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Int64
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Nullable<Int64>>)
  name.vb: Sum(ParallelQuery(Of Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2119
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static long ? Sum(ParallelQuery<long ? > source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  id: Sum(System.Linq.ParallelQuery{System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Single>)
  name.vb: Sum(ParallelQuery(Of Single))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2139
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static float Sum(ParallelQuery<float> source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Single
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Nullable<Single>>)
  name.vb: Sum(ParallelQuery(Of Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2159
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static float ? Sum(ParallelQuery<float ? > source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  id: Sum(System.Linq.ParallelQuery{System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Double>)
  name.vb: Sum(ParallelQuery(Of Double))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2179
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static double Sum(ParallelQuery<double> source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Double
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Nullable<Double>>)
  name.vb: Sum(ParallelQuery(Of Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2199
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static double ? Sum(ParallelQuery<double ? > source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  id: Sum(System.Linq.ParallelQuery{System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Decimal>)
  name.vb: Sum(ParallelQuery(Of Decimal))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2221
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static decimal Sum(ParallelQuery<decimal> source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Decimal
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<Nullable<Decimal>>)
  name.vb: Sum(ParallelQuery(Of Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2243
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content: public static decimal ? Sum(ParallelQuery<decimal ? > source)
    content.vb: Public Shared Function Sum(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2267
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static int Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2291
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static int ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2315
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static long Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Int64
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2339
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static long ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2361
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static float Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Single
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2383
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static float ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2405
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Double
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2427
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2451
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static decimal Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Decimal
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2475
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static decimal ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  id: Min(System.Linq.ParallelQuery{System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Int32>)
  name.vb: Min(ParallelQuery(Of Int32))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2511
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static int Min(ParallelQuery<int> source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Int32
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Nullable<Int32>>)
  name.vb: Min(ParallelQuery(Of Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2531
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static int ? Min(ParallelQuery<int ? > source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Int32}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  id: Min(System.Linq.ParallelQuery{System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Int64>)
  name.vb: Min(ParallelQuery(Of Int64))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2554
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static long Min(ParallelQuery<long> source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Int64
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Nullable<Int64>>)
  name.vb: Min(ParallelQuery(Of Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2574
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static long ? Min(ParallelQuery<long ? > source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Int64}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  id: Min(System.Linq.ParallelQuery{System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Single>)
  name.vb: Min(ParallelQuery(Of Single))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2597
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static float Min(ParallelQuery<float> source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Single
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Nullable<Single>>)
  name.vb: Min(ParallelQuery(Of Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2617
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static float ? Min(ParallelQuery<float ? > source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Single}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  id: Min(System.Linq.ParallelQuery{System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Double>)
  name.vb: Min(ParallelQuery(Of Double))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2640
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static double Min(ParallelQuery<double> source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Double
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Nullable<Double>>)
  name.vb: Min(ParallelQuery(Of Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2660
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static double ? Min(ParallelQuery<double ? > source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Double}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  id: Min(System.Linq.ParallelQuery{System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Decimal>)
  name.vb: Min(ParallelQuery(Of Decimal))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2683
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static decimal Min(ParallelQuery<decimal> source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Decimal
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<Nullable<Decimal>>)
  name.vb: Min(ParallelQuery(Of Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2703
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static decimal ? Min(ParallelQuery<decimal ? > source)
    content.vb: Public Shared Function Min(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Decimal}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  id: Min``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2727
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content: public static TSource Min<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements and  is a non-nullable value type.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2753
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static int Min<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Int32
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2775
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static int ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Int32}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2800
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static long Min<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Int64
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2822
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static long ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Int64}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2847
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static float Min<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Single
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2869
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static float ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Single}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2894
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static double Min<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Double
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2916
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static double ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Double}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2941
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static decimal Min<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Decimal
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2963
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static decimal ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Decimal}
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  name.vb: Min(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
  fullName: System.Linq.ParallelEnumerable.Min<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2989
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content: public static TResult Min<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: Public Shared Function Min(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TResult
      description: The type of the value returned by <paramref name="selector" />.
    return:
      type: '{TResult}'
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements and  is a non-nullable value type.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  id: Max(System.Linq.ParallelQuery{System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Int32>)
  name.vb: Max(ParallelQuery(Of Int32))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3015
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static int Max(ParallelQuery<int> source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Int32
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Nullable<Int32>>)
  name.vb: Max(ParallelQuery(Of Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3035
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static int ? Max(ParallelQuery<int ? > source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Int32}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  id: Max(System.Linq.ParallelQuery{System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Int64>)
  name.vb: Max(ParallelQuery(Of Int64))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3058
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static long Max(ParallelQuery<long> source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Int64
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Nullable<Int64>>)
  name.vb: Max(ParallelQuery(Of Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3078
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static long ? Max(ParallelQuery<long ? > source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Int64}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  id: Max(System.Linq.ParallelQuery{System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Single>)
  name.vb: Max(ParallelQuery(Of Single))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3101
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static float Max(ParallelQuery<float> source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Single
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Nullable<Single>>)
  name.vb: Max(ParallelQuery(Of Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3121
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static float ? Max(ParallelQuery<float ? > source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Single}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  id: Max(System.Linq.ParallelQuery{System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Double>)
  name.vb: Max(ParallelQuery(Of Double))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3144
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static double Max(ParallelQuery<double> source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Double
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Nullable<Double>>)
  name.vb: Max(ParallelQuery(Of Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3164
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static double ? Max(ParallelQuery<double ? > source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Double}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  id: Max(System.Linq.ParallelQuery{System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Decimal>)
  name.vb: Max(ParallelQuery(Of Decimal))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3187
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static decimal Max(ParallelQuery<decimal> source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Decimal
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<Nullable<Decimal>>)
  name.vb: Max(ParallelQuery(Of Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3207
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static decimal ? Max(ParallelQuery<decimal ? > source)
    content.vb: Public Shared Function Max(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Decimal}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  id: Max``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3230
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content: public static TSource Max<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements and  is a non-nullable value type.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3256
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static int Max<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Int32
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3278
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static int ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Int32}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3303
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static long Max<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Int64
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3325
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static long ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Int64}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3350
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static float Max<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Single
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3372
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static float ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Single}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3397
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static double Max<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Double
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3419
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static double ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Double}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3444
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static decimal Max<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Decimal
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3466
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static decimal ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Decimal}
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  name.vb: Max(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
  fullName: System.Linq.ParallelEnumerable.Max<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3492
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content: public static TResult Max<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: Public Shared Function Max(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TResult
      description: The type of the value returned by <paramref name="selector" />.
    return:
      type: '{TResult}'
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements and  is a non-nullable value type.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  id: Average(System.Linq.ParallelQuery{System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Int32>)
  name.vb: Average(ParallelQuery(Of Int32))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3520
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static double Average(ParallelQuery<int> source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Nullable<Int32>>)
  name.vb: Average(ParallelQuery(Of Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3542
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static double ? Average(ParallelQuery<int ? > source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Integer?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  id: Average(System.Linq.ParallelQuery{System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Int64>)
  name.vb: Average(ParallelQuery(Of Int64))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3567
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static double Average(ParallelQuery<long> source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Long)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Nullable<Int64>>)
  name.vb: Average(ParallelQuery(Of Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3589
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static double ? Average(ParallelQuery<long ? > source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Long?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  id: Average(System.Linq.ParallelQuery{System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Single>)
  name.vb: Average(ParallelQuery(Of Single))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3612
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static float Average(ParallelQuery<float> source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Single
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Nullable<Single>>)
  name.vb: Average(ParallelQuery(Of Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3632
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static float ? Average(ParallelQuery<float ? > source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  id: Average(System.Linq.ParallelQuery{System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Double>)
  name.vb: Average(ParallelQuery(Of Double))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3655
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static double Average(ParallelQuery<double> source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Nullable<Double>>)
  name.vb: Average(ParallelQuery(Of Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3675
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static double ? Average(ParallelQuery<double ? > source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
  exceptions:
  - type: System.ArgumentNullException
    description: A sequence of values that are used to calculate an average.The average of the sequence of values. is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  id: Average(System.Linq.ParallelQuery{System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Decimal>)
  name.vb: Average(ParallelQuery(Of Decimal))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3698
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static decimal Average(ParallelQuery<decimal> source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<Nullable<Decimal>>)
  name.vb: Average(ParallelQuery(Of Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3718
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content: public static decimal ? Average(ParallelQuery<decimal ? > source)
    content.vb: Public Shared Function Average(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3746
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3770
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3797
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3821
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      The sum or count of the elements in the sequence is larger than .

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3846
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static float Average<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Single
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3868
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static float ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3893
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3915
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3940
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static decimal Average<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3962
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static decimal ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: Any(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3989
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Determines in parallel whether any element of a sequence satisfies a condition.
  syntax:
    content: public static bool Any<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: An IEnumerable whose elements to apply the predicate to.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Boolean
      description: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  id: Any``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Any<TSource>(ParallelQuery<TSource>)
  name.vb: Any(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4012
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Determines whether a parallel sequence contains any elements.
  syntax:
    content: public static bool Any<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The IEnumerable to check for emptiness.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Boolean
      description: true if the source sequence contains any elements; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: All(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.All<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.All(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4041
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Determines in parallel whether all elements of a sequence satisfy a condition.
  syntax:
    content: public static bool All<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function All(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements to apply the predicate to.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Boolean
      description: true if all elements in the source sequence pass the test in the specified predicate; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  id: Contains``1(System.Linq.ParallelQuery{``0},``0)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Contains<TSource>(ParallelQuery<TSource>, TSource)
  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource)
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4072
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Determines in parallel whether a sequence contains a specified element

    by using the default equality comparer.
  syntax:
    content: public static bool Contains<TSource>(ParallelQuery<TSource> source, TSource value)
    content.vb: Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence in which to locate a value.
    - id: value
      type: '{TSource}'
      description: The value to locate in the sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Boolean
      description: true if the source sequence contains an element that has the specified value; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)
  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4097
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Determines in parallel whether a sequence contains a specified element by using a

    specified IEqualityComparer{T}.
  syntax:
    content: public static bool Contains<TSource>(ParallelQuery<TSource> source, TSource value, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence in which to locate a value.
    - id: value
      type: '{TSource}'
      description: The value to locate in the sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An equality comparer to compare values.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Boolean
      description: true if the source sequence contains an element that has the specified value; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Take<TSource>(ParallelQuery<TSource>, Int32)
  name.vb: Take(Of TSource)(ParallelQuery(Of TSource), Int32)
  fullName: System.Linq.ParallelEnumerable.Take<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  fullName.vb: System.Linq.ParallelEnumerable.Take(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4126
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns a specified number of contiguous elements from the start of a parallel sequence.
  syntax:
    content: public static ParallelQuery<TSource> Take<TSource>(ParallelQuery<TSource> source, int count)
    content.vb: Public Shared Function Take(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to return.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the specified number of elements from the start of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4158
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns elements from a parallel sequence as long as a specified condition is true.
  syntax:
    content: public static ParallelQuery<TSource> TakeWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        A sequence that contains the elements from the input sequence that occur before

        the element at which the test no longer passes.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4183
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns elements from a parallel sequence as long as a specified condition is true.

    The element's index is used in the logic of the predicate function.
  syntax:
    content: public static ParallelQuery<TSource> TakeWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: >-
        A function to test each source element for a condition; the second parameter of the

        function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        A sequence that contains elements from the input sequence that occur before

        the element at which the test no longer passes.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Skip<TSource>(ParallelQuery<TSource>, Int32)
  name.vb: Skip(Of TSource)(ParallelQuery(Of TSource), Int32)
  fullName: System.Linq.ParallelEnumerable.Skip<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  fullName.vb: System.Linq.ParallelEnumerable.Skip(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4208
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.
  syntax:
    content: public static ParallelQuery<TSource> Skip<TSource>(ParallelQuery<TSource> source, int count)
    content.vb: Public Shared Function Skip(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to skip before returning the remaining elements.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the elements that occur after the specified index in the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4240
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Bypasses elements in a parallel sequence as long as a specified

    condition is true and then returns the remaining elements.
  syntax:
    content: public static ParallelQuery<TSource> SkipWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        A sequence that contains the elements from the input sequence starting at

        the first element in the linear series that does not pass the test specified by

        <B>predicate</B>.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4267
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Bypasses elements in a parallel sequence as long as a specified condition is true and

    then returns the remaining elements. The element's index is used in the logic of

    the predicate function.
  syntax:
    content: public static ParallelQuery<TSource> SkipWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: >-
        A function to test each source element for a condition; the

        second parameter of the function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        A sequence that contains the elements from the input sequence starting at the

        first element in the linear series that does not pass the test specified by

        <B>predicate</B>.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4293
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Concatenates two parallel sequences.
  syntax:
    content: public static ParallelQuery<TSource> Concat<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: The first sequence to concatenate.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to concatenate to the first sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the concatenated elements of the two input sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4315
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Concat overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of Concat with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Concat operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TSource> Concat<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4345
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Determines whether two parallel sequences are equal by comparing the elements by using

    the default equality comparer for their type.
  syntax:
    content: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to compare to <b>second</b>.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to compare to the first input sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: >-
        true if the two source sequences are of equal length and their corresponding elements

        are equal according to the default equality comparer for their type; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4367
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This SequenceEqual overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of SequenceEqual with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the SequenceEqual operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Boolean
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: Thrown every time this method is called.
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4394
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Determines whether two parallel sequences are equal by comparing their elements by

    using a specified IEqualityComparer{T}.
  syntax:
    content: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to compare to <paramref name="second" />.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to compare to the first input sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to use to compare elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: >-
        true if the two source sequences are of equal length and their corresponding

        elements are equal according to the default equality comparer for their type; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4488
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This SequenceEqual overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of SequenceEqual with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the SequenceEqual operator would appear to be binding to the parallel implementation,

    but would in reality bind to sequential implementation.
  syntax:
    content: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Boolean
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: Thrown every time this method is called.
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  id: Distinct``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Distinct<TSource>(ParallelQuery<TSource>)
  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4508
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns distinct elements from a parallel sequence by using the

    default equality comparer to compare values.
  syntax:
    content: public static ParallelQuery<TSource> Distinct<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to remove duplicate elements from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains distinct elements from the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)
  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4525
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns distinct elements from a parallel sequence by using a specified

    IEqualityComparer{T} to compare values.
  syntax:
    content: public static ParallelQuery<TSource> Distinct<TSource>(ParallelQuery<TSource> source, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to remove duplicate elements from.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains distinct elements from the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4547
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Produces the set union of two parallel sequences by using the default equality comparer.
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements form the first set for the union.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements form the second set for the union.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the elements from both input sequences, excluding duplicates.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4568
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Union overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of Union with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Union operator would appear to be binding to the parallel implementation,

    but would in reality bind to sequential implementation.
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4586
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements form the first set for the union.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements form the second set for the union.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the elements from both input sequences, excluding duplicates.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4611
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Union overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of Union with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Union operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4637
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Produces the set intersection of two parallel sequences by using the

    default equality comparer to compare values.
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements that also appear in the first sequence will be returned.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the elements that form the set intersection of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4658
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Intersect overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of Intersect with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Intersect operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4681
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Produces the set intersection of two parallel sequences by using

    the specified IEqualityComparer{T} to compare values.
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements that also appear in the first sequence will be returned.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the elements that form the set intersection of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4706
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Intersect overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of Intersect with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Intersect operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4734
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Produces the set difference of two parallel sequences by using

    the default equality comparer to compare values.
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements that are not also in <paramref name="second" /> will be returned.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        A sequence whose elements that also occur in the first sequence will cause those

        elements to be removed from the returned sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the set difference of the elements of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4755
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Except overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of Except with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Except operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4777
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Produces the set difference of two parallel sequences by using the

    specified IEqualityComparer{T} to compare values.
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements that are not also in <paramref name="second" /> will be returned.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: >-
        A sequence whose elements that also occur in the first sequence will cause those elements

        to be removed from the returned sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the set difference of the elements of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4802
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    This Except overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  remarks: >-
    This overload exists to disallow usage of Except with a left data source of type

    [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) and a right data source of type [System.Collections.Generic.IEnumerable`1]().

    Otherwise, the Except operator would appear to be binding to the parallel implementation,

    but would in reality bind to the sequential implementation.
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: This parameter is not used.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: This parameter is not used.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: This parameter is not used.
    typeParameters:
    - id: TSource
      description: This type parameter is not used.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: This overload always throws a <see cref="T:System.NotSupportedException" />.
  exceptions:
  - type: System.NotSupportedException
    description: The exception that occurs when this method is called.
- uid: System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  id: AsEnumerable``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: AsEnumerable<TSource>(ParallelQuery<TSource>)
  name.vb: AsEnumerable(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.AsEnumerable<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.AsEnumerable(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4828
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Converts a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) into an

    [System.Collections.Generic.IEnumerable`1]() to force sequential

    evaluation of the query.
  syntax:
    content: public static IEnumerable<TSource> AsEnumerable<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function AsEnumerable(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The input sequence types as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  id: ToArray``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToArray<TSource>(ParallelQuery<TSource>)
  name.vb: ToArray(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.ToArray<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.ToArray(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4853
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Creates an array from a ParallelQuery{T}.
  syntax:
    content: public static TSource[] ToArray<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function ToArray(Of TSource)(source As ParallelQuery(Of TSource)) As TSource()
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create an array from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}[]'
      description: An array that contains the elements from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  id: ToList``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToList<TSource>(ParallelQuery<TSource>)
  name.vb: ToList(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.ToList<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.ToList(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4887
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Creates a List{T} from an ParallelQuery{T}.
  syntax:
    content: public static List<TSource> ToList<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function ToList(Of TSource)(source As ParallelQuery(Of TSource)) As List(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create a List&lt;(Of &lt;(T&gt;)&gt;) from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Collections.Generic.List{{TSource}}
      description: A List&lt;(Of &lt;(T&gt;)&gt;) that contains elements from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4969
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to

    a specified key selector function.
  syntax:
    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      produces a key that is a null reference (Nothing in Visual Basic).

      -or-

      produces duplicate keys for two elements.

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4998
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to a

    specified key selector function and key comparer.
  syntax:
    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      produces a key that is a null reference (Nothing in Visual Basic).

      -or-

      produces duplicate keys for two elements.

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5067
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to specified

    key selector and element selector functions.
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A transform function to produce a result element value from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: The type of the value returned by <paramref name="elementSelector" />.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: >-
        A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains values of type <typeparamref name="TElement" />

        selected from the input sequence
  exceptions:
  - type: System.ArgumentNullException
    description: or  or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      produces a key that is a null reference (Nothing in Visual Basic).

      -or-

      produces duplicate keys for two elements.

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5102
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Creates a Dictionary{TKey,TValue from a ParallelQuery{T} according to a

    specified key selector function, a comparer, and an element selector function.
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: >-
        A transform function to produce a result element

        value from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: The type of the value returned by <paramref name="elementSelector" />.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: >-
        A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains values of type <typeparamref name="TElement" />

        selected from the input sequence
  exceptions:
  - type: System.ArgumentNullException
    description: or  or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: >-
      produces a key that is a null reference (Nothing in Visual Basic).

      -or-

      produces duplicate keys for two elements.

      -or-

      One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5166
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified key selector function.
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: ILookup{{TKey},{TSource}}
      description: A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5191
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified

    key selector function and key comparer.
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    return:
      type: ILookup{{TKey},{TSource}}
      description: A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    description: or  or is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5245
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to specified

    key selector and element selector functions.
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A transform function to produce a result element value from each element.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: The type of the value returned by <paramref name="elementSelector" />.
    return:
      type: ILookup{{TKey},{TElement}}
      description: >-
        A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement

        selected from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5277
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to

    a specified key selector function, a comparer and an element selector function.
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A transform function to produce a result element value from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.
    typeParameters:
    - id: TSource
      description: The type of elements of <paramref name="source" />.
    - id: TKey
      description: The type of the key returned by <paramref name="keySelector" />.
    - id: TElement
      description: The type of the value returned by <paramref name="elementSelector" />.
    return:
      type: ILookup{{TKey},{TElement}}
      description: >-
        A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected

        from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: or  or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  id: Reverse``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Reverse<TSource>(ParallelQuery<TSource>)
  name.vb: Reverse(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Reverse<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Reverse(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5324
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Inverts the order of the elements in a parallel sequence.
  syntax:
    content: public static ParallelQuery<TSource> Reverse<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Reverse(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to reverse.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements correspond to those of the input sequence in reverse order.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  id: OfType``1(System.Linq.ParallelQuery)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: OfType<TResult>(ParallelQuery)
  name.vb: OfType(Of TResult)(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.OfType<TResult>(System.Linq.ParallelQuery)
  fullName.vb: System.Linq.ParallelEnumerable.OfType(Of TResult)(System.Linq.ParallelQuery)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5345
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Filters the elements of a ParallelQuery based on a specified type.
  syntax:
    content: public static ParallelQuery<TResult> OfType<TResult>(ParallelQuery source)
    content.vb: Public Shared Function OfType(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: The sequence whose elements to filter.
    typeParameters:
    - id: TResult
      description: The type to filter the elements of the sequence on.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: A sequence that contains elements from the input sequence of type <typeparamref name="TResult" />.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  id: Cast``1(System.Linq.ParallelQuery)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Cast<TResult>(ParallelQuery)
  name.vb: Cast(Of TResult)(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.Cast<TResult>(System.Linq.ParallelQuery)
  fullName.vb: System.Linq.ParallelEnumerable.Cast(Of TResult)(System.Linq.ParallelQuery)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5363
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Converts the elements of a weakly-typed ParallelQuery to the specified stronger type.
  syntax:
    content: public static ParallelQuery<TResult> Cast<TResult>(ParallelQuery source)
    content.vb: Public Shared Function Cast(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: The sequence that contains the weakly typed elements to be converted.
    typeParameters:
    - id: TResult
      description: The stronger type to convert the elements of <paramref name="source" /> to.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: A sequence that contains each weakly-type element of the source sequence converted to the specified stronger type.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  id: First``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: First<TSource>(ParallelQuery<TSource>)
  name.vb: First(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5449
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the first element of a parallel sequence.
  syntax:
    content: public static TSource First<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The first element in the specified sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: First(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5492
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the first element in a parallel sequence that satisfies a specified condition.
  remarks: >-
    There's a temporary difference from LINQ to Objects, this does not throw

    ArgumentNullException when the predicate is null.
  syntax:
    content: public static TSource First<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The first element in the sequence that passes the test in the specified predicate function.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: No element in  satisfies the condition in .
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>)
  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5531
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the first element of a parallel sequence, or a default value if the

    sequence contains no elements.
  syntax:
    content: public static TSource FirstOrDefault<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: default(<B>TSource</B>) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5577
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the first element of the parallel sequence that satisfies a condition or a

    default value if no such element is found.
  remarks: >-
    There's a temporary difference from LINQ to Objects, this does not throw

    ArgumentNullException when the predicate is null.
  syntax:
    content: public static TSource FirstOrDefault<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: >-
        default(<B>TSource</B>) if <paramref name="source" /> is empty or if no element passes the test

        specified by <B>predicate</B>; otherwise, the first element in <paramref name="source" /> that

        passes the test specified by <B>predicate</B>.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  id: Last``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Last<TSource>(ParallelQuery<TSource>)
  name.vb: Last(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5625
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the last element of a parallel sequence.
  syntax:
    content: public static TSource Last<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the last element from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The value at the last position in the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: contains no elements.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: Last(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5668
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the last element of a parallel sequence that satisfies a specified condition.
  syntax:
    content: public static TSource Last<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The last element in the sequence that passes the test in the specified predicate function.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: No element in  satisfies the condition in .
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  id: LastOrDefault``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: LastOrDefault<TSource>(ParallelQuery<TSource>)
  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5709
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the last element of a parallel sequence, or a default value if the

    sequence contains no elements.
  syntax:
    content: public static TSource LastOrDefault<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return an element from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: default(<typeparamref name="TSource" />) if the source sequence is empty; otherwise, the last element in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5751
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the last element of a parallel sequence that satisfies a condition, or

    a default value if no such element is found.
  syntax:
    content: public static TSource LastOrDefault<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: >-
        default(<typeparamref name="TSource" />) if the sequence is empty or if no elements pass the test in the

        predicate function; otherwise, the last element that passes the test in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  id: Single``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Single<TSource>(ParallelQuery<TSource>)
  name.vb: Single(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5799
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the only element of a parallel sequence, and throws an exception if there is not

    exactly one element in the sequence.
  syntax:
    content: public static TSource Single<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The single element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: The input sequence contains more than one element. -or- The input sequence is empty.
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: Single(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5828
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the only element of a parallel sequence that satisfies a specified condition,

    and throws an exception if more than one such element exists.
  syntax:
    content: public static TSource Single<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the single element of.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test an element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The single element of the input sequence that satisfies a condition.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.InvalidOperationException
    description: No element satisfies the condition in . -or- More than one element satisfies the condition in .
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>)
  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5855
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the only element of a parallel sequence, or a default value if the sequence is

    empty; this method throws an exception if there is more than one element in the sequence.
  syntax:
    content: public static TSource SingleOrDefault<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: >-
        The single element of the input sequence, or default(<typeparamref name="TSource" />) if the

        sequence contains no elements.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5885
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the only element of a parallel sequence that satisfies a specified condition

    or a default value if no such element exists; this method throws an exception

    if more than one element satisfies the condition.
  syntax:
    content: public static TSource SingleOrDefault<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the single element of.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test an element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: >-
        The single element of the input sequence that satisfies the condition, or

        default(<typeparamref name="TSource" />) if no such element is found.
  exceptions:
  - type: System.ArgumentNullException
    description: or  is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>)
  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource))
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>)
  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5910
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the elements of the specified parallel sequence or the type parameter's

    default value in a singleton collection if the sequence is empty.
  syntax:
    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(ParallelQuery<TSource> source)
    content.vb: Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return a default value for if it is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains default(<B>TSource</B>) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)
  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource), TSource)
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5928
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the elements of the specified parallel sequence or the specified value

    in a singleton collection if the sequence is empty.
  syntax:
    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(ParallelQuery<TSource> source, TSource defaultValue)
    content.vb: Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource), defaultValue As TSource) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the specified value for if it is empty.
    - id: defaultValue
      type: '{TSource}'
      description: The value to return if the sequence is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains <B>defaultValue</B> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
- uid: System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ElementAt<TSource>(ParallelQuery<TSource>, Int32)
  name.vb: ElementAt(Of TSource)(ParallelQuery(Of TSource), Int32)
  fullName: System.Linq.ParallelEnumerable.ElementAt<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  fullName.vb: System.Linq.ParallelEnumerable.ElementAt(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5959
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: Returns the element at a specified index in a parallel sequence.
  syntax:
    content: public static TSource ElementAt<TSource>(ParallelQuery<TSource> source, int index)
    content.vb: Public Shared Function ElementAt(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: The element at the specified position in the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    description: is less than 0 or greater than or equal to the number of elements in .
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
- uid: System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  parent: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)
  name.vb: ElementAtOrDefault(Of TSource)(ParallelQuery(Of TSource), Int32)
  fullName: System.Linq.ParallelEnumerable.ElementAtOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  fullName.vb: System.Linq.ParallelEnumerable.ElementAtOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5998
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: >-
    Returns the element at a specified index in a parallel sequence or a default value if the

    index is out of range.
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(ParallelQuery<TSource> source, int index)
    content.vb: Public Shared Function ElementAtOrDefault(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="source" />.
    return:
      type: '{TSource}'
      description: >-
        default(<B>TSource</B>) if the index is outside the bounds of the source sequence;

        otherwise, the element at the specified position in the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    description: is a null reference (Nothing in Visual Basic).
  - type: System.AggregateException
    description: One or more exceptions occurred during the evaluation of the query.
  - type: System.OperationCanceledException
    description: The query was canceled.
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Linq.ParallelQuery`1
  parent: System.Linq
  isExternal: false
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<TSource>
  name.vb: ParallelQuery(Of TSource)
  fullName: System.Linq.ParallelQuery<TSource>
  fullName.vb: System.Linq.ParallelQuery(Of TSource)
  type: Class
  summary: Represents a parallel sequence.
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ArgumentNullException
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  name.vb: IEnumerable(Of TSource)
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TSource}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<TSource>
  name.vb: ParallelQuery(Of TSource)
  fullName: System.Linq.ParallelQuery<TSource>
  fullName.vb: System.Linq.ParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: Partitioner<TSource>
  name.vb: Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: true
  name: Partitioner<TSource>
  name.vb: Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Linq.ParallelQuery
  parent: System.Linq
  isExternal: false
  href: System.Linq.ParallelQuery.yml
  name: ParallelQuery
  fullName: System.Linq.ParallelQuery
  type: Class
  summary: Represents a parallel sequence.
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ArgumentOutOfRangeException
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.ObjectDisposedException
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Linq.ParallelExecutionMode
  parent: System.Linq
  isExternal: false
  href: System.Linq.ParallelExecutionMode.yml
  name: ParallelExecutionMode
  fullName: System.Linq.ParallelExecutionMode
  type: Enum
  summary: >-
    The query execution mode is a hint that specifies how the system should handle

    performance trade-offs when parallelizing queries.
- uid: System.ArgumentException
- uid: System.Linq.ParallelMergeOptions
  parent: System.Linq
  isExternal: false
  href: System.Linq.ParallelMergeOptions.yml
  name: ParallelMergeOptions
  fullName: System.Linq.ParallelMergeOptions
  type: Enum
  summary: >-
    Specifies the preferred type of output merge to use in a query. This is a hint only, and may not be

    respected by the system when parallelizing all queries.
- uid: System.Linq.ParallelQuery{System.Int32}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Int32>
  name.vb: ParallelQuery(Of Int32)
  fullName: System.Linq.ParallelQuery<System.Int32>
  fullName.vb: System.Linq.ParallelQuery(Of System.Int32)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Linq.ParallelQuery{{TResult}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<TResult>
  name.vb: ParallelQuery(Of TResult)
  fullName: System.Linq.ParallelQuery<TResult>
  fullName.vb: System.Linq.ParallelQuery(Of TResult)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.AggregateException
- uid: System.OperationCanceledException
- uid: System.Action{{TSource}}
  parent: System
  definition: System.Action`1
  name: Action<TSource>
  name.vb: Action(Of TSource)
  fullName: System.Action<TSource>
  fullName.vb: System.Action(Of TSource)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action`1
  parent: System
  isExternal: true
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Boolean>
  name.vb: Func(Of TSource, Boolean)
  fullName: System.Func<TSource, System.Boolean>
  fullName.vb: System.Func(Of TSource, System.Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, Boolean>
  name.vb: Func(Of TSource, Int32, Boolean)
  fullName: System.Func<TSource, System.Int32, System.Boolean>
  fullName.vb: System.Func(Of TSource, System.Int32, System.Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`3
  parent: System
  isExternal: true
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TResult>
  name.vb: Func(Of TSource, TResult)
  fullName: System.Func<TSource, TResult>
  fullName.vb: System.Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, TResult>
  name.vb: Func(Of TSource, Int32, TResult)
  fullName: System.Func<TSource, System.Int32, TResult>
  fullName.vb: System.Func(Of TSource, System.Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TFirst}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<TFirst>
  name.vb: ParallelQuery(Of TFirst)
  fullName: System.Linq.ParallelQuery<TFirst>
  fullName.vb: System.Linq.ParallelQuery(Of TFirst)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TSecond}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<TSecond>
  name.vb: ParallelQuery(Of TSecond)
  fullName: System.Linq.ParallelQuery<TSecond>
  fullName.vb: System.Linq.ParallelQuery(Of TSecond)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: System.Func{{TFirst},{TSecond},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TFirst, TSecond, TResult>
  name.vb: Func(Of TFirst, TSecond, TResult)
  fullName: System.Func<TFirst, TSecond, TResult>
  fullName.vb: System.Func(Of TFirst, TSecond, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.NotSupportedException
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSecond>
  name.vb: IEnumerable(Of TSecond)
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TOuter}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<TOuter>
  name.vb: ParallelQuery(Of TOuter)
  fullName: System.Linq.ParallelQuery<TOuter>
  fullName.vb: System.Linq.ParallelQuery(Of TOuter)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TInner}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<TInner>
  name.vb: ParallelQuery(Of TInner)
  fullName: System.Linq.ParallelQuery<TInner>
  fullName.vb: System.Linq.ParallelQuery(Of TInner)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TOuter, TKey>
  name.vb: Func(Of TOuter, TKey)
  fullName: System.Func<TOuter, TKey>
  fullName.vb: System.Func(Of TOuter, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TInner},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TInner, TKey>
  name.vb: Func(Of TInner, TKey)
  fullName: System.Func<TInner, TKey>
  fullName.vb: System.Func(Of TInner, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TInner},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TOuter, TInner, TResult>
  name.vb: Func(Of TOuter, TInner, TResult)
  fullName: System.Func<TOuter, TInner, TResult>
  fullName.vb: System.Func(Of TOuter, TInner, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TInner>
  name.vb: IEnumerable(Of TInner)
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  name.vb: IEqualityComparer(Of TKey)
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TOuter, IEnumerable<TInner>, TResult>
  name.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)
  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>
  fullName.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TResult>>
  name.vb: Func(Of TSource, IEnumerable(Of TResult))
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, IEnumerable<TResult>>
  name.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>
  fullName.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TCollection>>
  name.vb: Func(Of TSource, IEnumerable(Of TCollection))
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TCollection},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TCollection, TResult>
  name.vb: Func(Of TSource, TCollection, TResult)
  fullName: System.Func<TSource, TCollection, TResult>
  fullName.vb: System.Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, IEnumerable<TCollection>>
  name.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>
  fullName.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TKey>
  name.vb: Func(Of TSource, TKey)
  fullName: System.Func<TSource, TKey>
  fullName.vb: System.Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Linq.OrderedParallelQuery{{TSource}}
  parent: System.Linq
  definition: System.Linq.OrderedParallelQuery`1
  href: System.Linq.OrderedParallelQuery`1.yml
  name: OrderedParallelQuery<TSource>
  name.vb: OrderedParallelQuery(Of TSource)
  fullName: System.Linq.OrderedParallelQuery<TSource>
  fullName.vb: System.Linq.OrderedParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
    href: System.Linq.OrderedParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
    href: System.Linq.OrderedParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.OrderedParallelQuery`1
  isExternal: false
  href: System.Linq.OrderedParallelQuery`1.yml
  name: OrderedParallelQuery<TSource>
  name.vb: OrderedParallelQuery(Of TSource)
  fullName: System.Linq.OrderedParallelQuery<TSource>
  fullName.vb: System.Linq.OrderedParallelQuery(Of TSource)
  type: Class
  summary: Represents a sorted, parallel sequence.
  spec.csharp:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
    href: System.Linq.OrderedParallelQuery`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
    href: System.Linq.OrderedParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  name.vb: IComparer(Of TKey)
  fullName: System.Collections.Generic.IComparer<TKey>
  fullName.vb: System.Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{IGrouping{{TKey},{TSource}}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<IGrouping<TKey, TSource>>
  name.vb: ParallelQuery(Of IGrouping(Of TKey, TSource))
  fullName: System.Linq.ParallelQuery<IGrouping<TKey, TSource>>
  fullName.vb: System.Linq.ParallelQuery(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TElement}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TElement>
  name.vb: Func(Of TSource, TElement)
  fullName: System.Func<TSource, TElement>
  fullName.vb: System.Func(Of TSource, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{IGrouping{{TKey},{TElement}}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<IGrouping<TKey, TElement>>
  name.vb: ParallelQuery(Of IGrouping(Of TKey, TElement))
  fullName: System.Linq.ParallelQuery<IGrouping<TKey, TElement>>
  fullName.vb: System.Linq.ParallelQuery(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TSource>, TResult>
  name.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>
  fullName.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TElement>, TResult>
  name.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  fullName.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TSource},{TSource}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TSource, TSource>
  name.vb: Func(Of TSource, TSource, TSource)
  fullName: System.Func<TSource, TSource, TSource>
  fullName.vb: System.Func(Of TSource, TSource, TSource)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: '{TSource}'
  isExternal: false
  name: TSource
  fullName: TSource
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}
  parent: System
  definition: System.Func`3
  name: Func<TAccumulate, TSource, TAccumulate>
  name.vb: Func(Of TAccumulate, TSource, TAccumulate)
  fullName: System.Func<TAccumulate, TSource, TAccumulate>
  fullName.vb: System.Func(Of TAccumulate, TSource, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  name.vb: Func(Of TAccumulate, TResult)
  fullName: System.Func<TAccumulate, TResult>
  fullName.vb: System.Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
  parent: System
  definition: System.Func`3
  name: Func<TAccumulate, TAccumulate, TAccumulate>
  name.vb: Func(Of TAccumulate, TAccumulate, TAccumulate)
  fullName: System.Func<TAccumulate, TAccumulate, TAccumulate>
  fullName.vb: System.Func(Of TAccumulate, TAccumulate, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate}}
  parent: System
  definition: System.Func`1
  name: Func<TAccumulate>
  name.vb: Func(Of TAccumulate)
  fullName: System.Func<TAccumulate>
  fullName.vb: System.Func(Of TAccumulate)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: true
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  fullName: System.Int64
- uid: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Nullable<Int32>>
  name.vb: ParallelQuery(Of Nullable(Of Int32))
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int32>>
  fullName.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  name.vb: Nullable(Of Int32)
  fullName: System.Nullable<System.Int32>
  fullName.vb: System.Nullable(Of System.Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  name.vb: Nullable(Of T)
  fullName: System.Nullable<T>
  fullName.vb: System.Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Int64}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Int64>
  name.vb: ParallelQuery(Of Int64)
  fullName: System.Linq.ParallelQuery<System.Int64>
  fullName.vb: System.Linq.ParallelQuery(Of System.Int64)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Nullable<Int64>>
  name.vb: ParallelQuery(Of Nullable(Of Int64))
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int64>>
  fullName.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  name.vb: Nullable(Of Int64)
  fullName: System.Nullable<System.Int64>
  fullName.vb: System.Nullable(Of System.Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Single}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Single>
  name.vb: ParallelQuery(Of Single)
  fullName: System.Linq.ParallelQuery<System.Single>
  fullName.vb: System.Linq.ParallelQuery(Of System.Single)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  fullName: System.Single
- uid: System.Linq.ParallelQuery{System.Nullable{System.Single}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Nullable<Single>>
  name.vb: ParallelQuery(Of Nullable(Of Single))
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Single>>
  fullName.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Single))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  name.vb: Nullable(Of Single)
  fullName: System.Nullable<System.Single>
  fullName.vb: System.Nullable(Of System.Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Double}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Double>
  name.vb: ParallelQuery(Of Double)
  fullName: System.Linq.ParallelQuery<System.Double>
  fullName.vb: System.Linq.ParallelQuery(Of System.Double)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  fullName: System.Double
- uid: System.Linq.ParallelQuery{System.Nullable{System.Double}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Nullable<Double>>
  name.vb: ParallelQuery(Of Nullable(Of Double))
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Double>>
  fullName.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Double))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  name.vb: Nullable(Of Double)
  fullName: System.Nullable<System.Double>
  fullName.vb: System.Nullable(Of System.Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Decimal}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Decimal>
  name.vb: ParallelQuery(Of Decimal)
  fullName: System.Linq.ParallelQuery<System.Decimal>
  fullName.vb: System.Linq.ParallelQuery(Of System.Decimal)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  fullName: System.Decimal
- uid: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  href: System.Linq.ParallelQuery`1.yml
  name: ParallelQuery<Nullable<Decimal>>
  name.vb: ParallelQuery(Of Nullable(Of Decimal))
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Decimal>>
  fullName.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
    href: System.Linq.ParallelQuery`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  name.vb: Nullable(Of Decimal)
  fullName: System.Nullable<System.Decimal>
  fullName.vb: System.Nullable(Of System.Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int32>
  name.vb: Func(Of TSource, Int32)
  fullName: System.Func<TSource, System.Int32>
  fullName.vb: System.Func(Of TSource, System.Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int32}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int32>>
  name.vb: Func(Of TSource, Nullable(Of Int32))
  fullName: System.Func<TSource, System.Nullable<System.Int32>>
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int64}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int64>
  name.vb: Func(Of TSource, Int64)
  fullName: System.Func<TSource, System.Int64>
  fullName.vb: System.Func(Of TSource, System.Int64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int64}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int64>>
  name.vb: Func(Of TSource, Nullable(Of Int64))
  fullName: System.Func<TSource, System.Nullable<System.Int64>>
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Single}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Single>
  name.vb: Func(Of TSource, Single)
  fullName: System.Func<TSource, System.Single>
  fullName.vb: System.Func(Of TSource, System.Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Single}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Single>>
  name.vb: Func(Of TSource, Nullable(Of Single))
  fullName: System.Func<TSource, System.Nullable<System.Single>>
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Double}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Double>
  name.vb: Func(Of TSource, Double)
  fullName: System.Func<TSource, System.Double>
  fullName.vb: System.Func(Of TSource, System.Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Double}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Double>>
  name.vb: Func(Of TSource, Nullable(Of Double))
  fullName: System.Func<TSource, System.Nullable<System.Double>>
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Double))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Decimal}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Decimal>
  name.vb: Func(Of TSource, Decimal)
  fullName: System.Func<TSource, System.Decimal>
  fullName.vb: System.Func(Of TSource, System.Decimal)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Decimal}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Decimal>>
  name.vb: Func(Of TSource, Nullable(Of Decimal))
  fullName: System.Func<TSource, System.Nullable<System.Decimal>>
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  name.vb: IEqualityComparer(Of TSource)
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: '{TSource}[]'
  isExternal: false
  name: TSource[]
  name.vb: TSource()
  fullName: TSource[]
  fullName.vb: TSource()
  spec.csharp:
  - name: TSource
    fullName: TSource
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSource
    fullName: TSource
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.List{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TSource>
  name.vb: List(Of TSource)
  fullName: System.Collections.Generic.List<TSource>
  fullName.vb: System.Collections.Generic.List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: true
  name: List<T>
  name.vb: List(Of T)
  fullName: System.Collections.Generic.List<T>
  fullName.vb: System.Collections.Generic.List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TSource>
  name.vb: Dictionary(Of TKey, TSource)
  fullName: System.Collections.Generic.Dictionary<TKey, TSource>
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<TKey, TValue>
  name.vb: Dictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TElement>
  name.vb: Dictionary(Of TKey, TElement)
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: ILookup{{TKey},{TSource}}
  definition: ILookup`2
  name: ILookup<TKey, TSource>
  name.vb: ILookup(Of TKey, TSource)
  fullName: ILookup<TKey, TSource>
  fullName.vb: ILookup(Of TKey, TSource)
  spec.csharp:
  - uid: ILookup`2
    name: ILookup
    fullName: ILookup
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ILookup`2
    name: ILookup
    fullName: ILookup
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: ILookup`2
  isExternal: true
  name: ILookup<, >
  name.vb: ILookup(Of , )
  fullName: ILookup<, >
  fullName.vb: ILookup(Of , )
  spec.csharp:
  - uid: ILookup`2
    name: ILookup
    fullName: ILookup
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ILookup`2
    name: ILookup
    fullName: ILookup
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: ILookup{{TKey},{TElement}}
  definition: ILookup`2
  name: ILookup<TKey, TElement>
  name.vb: ILookup(Of TKey, TElement)
  fullName: ILookup<TKey, TElement>
  fullName.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: ILookup`2
    name: ILookup
    fullName: ILookup
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ILookup`2
    name: ILookup
    fullName: ILookup
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
