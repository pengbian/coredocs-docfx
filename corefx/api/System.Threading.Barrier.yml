items:
- uid: System.Threading.Barrier
  id: Barrier
  parent: System.Threading
  children:
  - System.Threading.Barrier.#ctor(System.Int32)
  - System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  - System.Threading.Barrier.AddParticipant
  - System.Threading.Barrier.AddParticipants(System.Int32)
  - System.Threading.Barrier.CurrentPhaseNumber
  - System.Threading.Barrier.Dispose
  - System.Threading.Barrier.Dispose(System.Boolean)
  - System.Threading.Barrier.ParticipantCount
  - System.Threading.Barrier.ParticipantsRemaining
  - System.Threading.Barrier.RemoveParticipant
  - System.Threading.Barrier.RemoveParticipants(System.Int32)
  - System.Threading.Barrier.SignalAndWait
  - System.Threading.Barrier.SignalAndWait(System.Int32)
  - System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  - System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  - System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  href: System.Threading.Barrier.yml
  name: Barrier
  fullName: System.Threading.Barrier
  type: Class
  source:
    remote: &o0
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 76
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.
  remarks: >-
    <para>

    A group of tasks cooperate by moving through a series of phases, where each in the group signals it

    has arrived at the <see cref="T:System.Threading.Barrier" /> in a given phase and implicitly waits for all others to

    arrive. The same <see cref="T:System.Threading.Barrier" /> can be used for multiple phases.

    </para>

    <para>

    All public and protected members of <see cref="T:System.Threading.Barrier" /> are thread-safe and may be used

    concurrently from multiple threads, with the exception of Dispose, which

    must only be used when all other operations on the <see cref="T:System.Threading.Barrier" /> have

    completed.

    </para>
  syntax:
    content: 'public class Barrier : IDisposable'
    content.vb: Public Class Barrier Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.Barrier.ParticipantsRemaining
  id: ParticipantsRemaining
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: ParticipantsRemaining
  fullName: System.Threading.Barrier.ParticipantsRemaining
  type: Property
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 145
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "Gets the number of participants in the barrier that havenâ€™t yet signaled\r\nin the current phase."
  remarks: >-
    This could be 0 during a post-phase action delegate execution or if the

    ParticipantCount is 0.
  syntax:
    content: public int ParticipantsRemaining { get; }
    content.vb: Public ReadOnly Property ParticipantsRemaining As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Threading.Barrier.ParticipantCount
  id: ParticipantCount
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: ParticipantCount
  fullName: System.Threading.Barrier.ParticipantCount
  type: Property
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 159
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Gets the total number of participants in the barrier.
  syntax:
    content: public int ParticipantCount { get; }
    content.vb: Public ReadOnly Property ParticipantCount As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Threading.Barrier.CurrentPhaseNumber
  id: CurrentPhaseNumber
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: CurrentPhaseNumber
  fullName: System.Threading.Barrier.CurrentPhaseNumber
  type: Property
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 167
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Gets the number of the barrier's current phase.
  syntax:
    content: public long CurrentPhaseNumber { get; }
    content.vb: Public ReadOnly Property CurrentPhaseNumber As Long
    parameters: []
    return:
      type: System.Int64
- uid: System.Threading.Barrier.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: Barrier(Int32)
  fullName: System.Threading.Barrier.Barrier(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 183
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the [System.Threading.Barrier](System.Threading.Barrier.yml) class.
  syntax:
    content: public Barrier(int participantCount)
    content.vb: Public Sub New(participantCount As Integer)
    parameters:
    - id: participantCount
      type: System.Int32
      description: The number of participating threads.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than 0

      or greater than .
- uid: System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  id: '#ctor(System.Int32,System.Action{System.Threading.Barrier})'
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: Barrier(Int32, Action<Barrier>)
  name.vb: Barrier(Int32, Action(Of Barrier))
  fullName: System.Threading.Barrier.Barrier(System.Int32, System.Action<System.Threading.Barrier>)
  fullName.vb: System.Threading.Barrier.Barrier(System.Int32, System.Action(Of System.Threading.Barrier))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 202
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the [System.Threading.Barrier](System.Threading.Barrier.yml) class.
  remarks: >-
    The <paramref name="postPhaseAction" /> delegate will be executed after

    all participants have arrived at the barrier in one phase.  The participants

    will not be released to the next phase until the postPhaseAction delegate

    has completed execution.
  syntax:
    content: public Barrier(int participantCount, Action<Barrier> postPhaseAction)
    content.vb: Public Sub New(participantCount As Integer, postPhaseAction As Action(Of Barrier))
    parameters:
    - id: participantCount
      type: System.Int32
      description: The number of participating threads.
    - id: postPhaseAction
      type: System.Action{System.Threading.Barrier}
      description: >-
        The [System.Action`1]() to be executed after each

        phase.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than 0

      or greater than .
- uid: System.Threading.Barrier.AddParticipant
  id: AddParticipant
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: AddParticipant()
  fullName: System.Threading.Barrier.AddParticipant()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 275
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Notifies the [System.Threading.Barrier](System.Threading.Barrier.yml) that there will be an additional participant.
  syntax:
    content: public long AddParticipant()
    content.vb: Public Function AddParticipant As Long
    return:
      type: System.Int64
      description: >-
        The phase number of the barrier in which the new participants will first

        participate.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      Adding a participant would cause the barrier's participant count to

      exceed .
  - type: System.InvalidOperationException
    description: The method was invoked from within a post-phase action.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.AddParticipants(System.Int32)
  id: AddParticipants(System.Int32)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: AddParticipants(Int32)
  fullName: System.Threading.Barrier.AddParticipants(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 303
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Notifies the [System.Threading.Barrier](System.Threading.Barrier.yml) that there will be additional participants.
  syntax:
    content: public long AddParticipants(int participantCount)
    content.vb: Public Function AddParticipants(participantCount As Integer) As Long
    parameters:
    - id: participantCount
      type: System.Int32
      description: >-
        The number of additional participants to add to the

        barrier.
    return:
      type: System.Int64
      description: >-
        The phase number of the barrier in which the new participants will first

        participate.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than

      0.
  - type: System.ArgumentOutOfRangeException
    description: >-
      Adding  participants would cause the

      barrier's participant count to exceed .
  - type: System.InvalidOperationException
    description: The method was invoked from within a post-phase action.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.RemoveParticipant
  id: RemoveParticipant
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: RemoveParticipant()
  fullName: System.Threading.Barrier.RemoveParticipant()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 391
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Notifies the [System.Threading.Barrier](System.Threading.Barrier.yml) that there will be one less participant.
  syntax:
    content: public void RemoveParticipant()
    content.vb: Public Sub RemoveParticipant
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The barrier already has 0

      participants.
  - type: System.InvalidOperationException
    description: The method was invoked from within a post-phase action.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.RemoveParticipants(System.Int32)
  id: RemoveParticipants(System.Int32)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: RemoveParticipants(Int32)
  fullName: System.Threading.Barrier.RemoveParticipants(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 408
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Notifies the [System.Threading.Barrier](System.Threading.Barrier.yml) that there will be fewer participants.
  syntax:
    content: public void RemoveParticipants(int participantCount)
    content.vb: Public Sub RemoveParticipants(participantCount As Integer)
    parameters:
    - id: participantCount
      type: System.Int32
      description: The number of additional participants to remove from the barrier.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than

      0.
  - type: System.InvalidOperationException
    description: The barrier already has 0 participants.
  - type: System.InvalidOperationException
    description: The method was invoked from within a post-phase action.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.SignalAndWait
  id: SignalAndWait
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: SignalAndWait()
  fullName: System.Threading.Barrier.SignalAndWait()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 475
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: >-
    Signals that a participant has reached the [System.Threading.Barrier](System.Threading.Barrier.yml) and waits for all other

    participants to reach the barrier as well.
  syntax:
    content: public void SignalAndWait()
    content.vb: Public Sub SignalAndWait
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The method was invoked from within a post-phase action, the barrier currently has 0 participants,

      or the barrier is being used by more threads than are registered as participants.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  id: SignalAndWait(System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: SignalAndWait(CancellationToken)
  fullName: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 495
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: >-
    Signals that a participant has reached the [System.Threading.Barrier](System.Threading.Barrier.yml) and waits for all other

    participants to reach the barrier, while observing a [System.Threading.CancellationToken]().
  syntax:
    content: public void SignalAndWait(CancellationToken cancellationToken)
    content.vb: Public Sub SignalAndWait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <see cref="T:System.Threading.CancellationToken" /> to

        observe.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The method was invoked from within a post-phase action, the barrier currently has 0 participants,

      or the barrier is being used by more threads than are registered as participants.
  - type: System.OperationCanceledException
    description: >-
      has been

      canceled.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  id: SignalAndWait(System.TimeSpan)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: SignalAndWait(TimeSpan)
  fullName: System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 524
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: >-
    Signals that a participant has reached the [System.Threading.Barrier](System.Threading.Barrier.yml) and waits for all other

    participants to reach the barrier as well, using a

    [System.TimeSpan]() to measure the time interval.
  syntax:
    content: public bool SignalAndWait(TimeSpan timeout)
    content.vb: Public Function SignalAndWait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of

        milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to

        wait indefinitely.
    return:
      type: System.Boolean
      description: true if all other participants reached the barrier; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number

      other than -1 milliseconds, which represents an infinite time-out, or it is greater than

      .
  - type: System.InvalidOperationException
    description: >-
      The method was invoked from within a post-phase action, the barrier currently has 0 participants,

      or the barrier is being used by more threads than are registered as participants.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  id: SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: SignalAndWait(TimeSpan, CancellationToken)
  fullName: System.Threading.Barrier.SignalAndWait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 551
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: >-
    Signals that a participant has reached the [System.Threading.Barrier](System.Threading.Barrier.yml) and waits for all other

    participants to reach the barrier as well, using a

    [System.TimeSpan]() to measure the time interval, while observing a [System.Threading.CancellationToken]().
  syntax:
    content: public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function SignalAndWait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of

        milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to

        wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <see cref="T:System.Threading.CancellationToken" /> to

        observe.
    return:
      type: System.Boolean
      description: true if all other participants reached the barrier; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number

      other than -1 milliseconds, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: >-
      The method was invoked from within a post-phase action, the barrier currently has 0 participants,

      or the barrier is being used by more threads than are registered as participants.
  - type: System.OperationCanceledException
    description: >-
      has been

      canceled.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.SignalAndWait(System.Int32)
  id: SignalAndWait(System.Int32)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: SignalAndWait(Int32)
  fullName: System.Threading.Barrier.SignalAndWait(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 578
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: >-
    Signals that a participant has reached the [System.Threading.Barrier](System.Threading.Barrier.yml) and waits for all other

    participants to reach the barrier as well, using a

    32-bit signed integer to measure the time interval.
  syntax:
    content: public bool SignalAndWait(int millisecondsTimeout)
    content.vb: Public Function SignalAndWait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]()(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if all other participants reached the barrier; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: >-
      The method was invoked from within a post-phase action, the barrier currently has 0 participants,

      or the barrier is being used by more threads than are registered as participants.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  id: SignalAndWait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: SignalAndWait(Int32, CancellationToken)
  fullName: System.Threading.Barrier.SignalAndWait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 604
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: >-
    Signals that a participant has reached the barrier and waits for all other participants to reach

    the barrier as well, using a

    32-bit signed integer to measure the time interval, while observing a [System.Threading.CancellationToken]().
  syntax:
    content: public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function SignalAndWait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]()(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <see cref="T:System.Threading.CancellationToken" /> to

        observe.
    return:
      type: System.Boolean
      description: true if all other participants reached the barrier; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: >-
      The method was invoked from within a post-phase action, the barrier currently has 0 participants,

      or the barrier is being used by more threads than are registered as participants.
  - type: System.OperationCanceledException
    description: >-
      has been

      canceled.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.Barrier.Dispose
  id: Dispose
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: Dispose()
  fullName: System.Threading.Barrier.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 892
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases all resources used by the current instance of [System.Threading.Barrier](System.Threading.Barrier.yml).
  remarks: >-
    Unlike most of the members of <see cref="T:System.Threading.Barrier" />, Dispose is not thread-safe and may not be

    used concurrently with other members of this instance.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  exceptions:
  - type: System.InvalidOperationException
    description: The method was invoked from within a post-phase action.
- uid: System.Threading.Barrier.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.Barrier
  href: System.Threading.Barrier.yml
  name: Dispose(Boolean)
  fullName: System.Threading.Barrier.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 913
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: >-
    When overridden in a derived class, releases the unmanaged resources used by the

    [System.Threading.Barrier](System.Threading.Barrier.yml), and optionally releases the managed resources.
  remarks: >-
    Unlike most of the members of <see cref="T:System.Threading.Barrier" />, Dispose is not thread-safe and may not be

    used concurrently with other members of this instance.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: >-
        true to release both managed and unmanaged resources; false to release

        only unmanaged resources.
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  fullName: System.Int64
- uid: System.Threading.Barrier
  isExternal: false
  href: System.Threading.Barrier.yml
  name: Barrier
  fullName: System.Threading.Barrier
  type: Class
  summary: Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.
- uid: System.ArgumentOutOfRangeException
- uid: System.Action`1
  parent: System
  isExternal: true
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Action{System.Threading.Barrier}
  parent: System
  definition: System.Action`1
  href: System.Threading.Barrier.yml
  name: Action<Barrier>
  name.vb: Action(Of Barrier)
  fullName: System.Action<System.Threading.Barrier>
  fullName.vb: System.Action(Of System.Threading.Barrier)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Barrier
    name: Barrier
    fullName: System.Threading.Barrier
    href: System.Threading.Barrier.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Barrier
    name: Barrier
    fullName: System.Threading.Barrier
    href: System.Threading.Barrier.yml
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ObjectDisposedException
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.OperationCanceledException
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.Timeout.Infinite
