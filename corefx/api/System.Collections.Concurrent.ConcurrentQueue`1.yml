items:
- uid: System.Collections.Concurrent.ConcurrentQueue`1
  id: ConcurrentQueue`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentQueue`1.Count
  - System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  - System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  - System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  - System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue<T>
  name.vb: ConcurrentQueue(Of T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 26
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Represents a thread-safe first-in, first-out collection of objects.
  remarks: >-
    All public  and protected members of [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) are thread-safe and may be used

    concurrently from multiple threads.
  syntax:
    content: 'public class ConcurrentQueue<T> : IProducerConsumerCollection<T>, ICollection, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public Class ConcurrentQueue(Of T) Implements IProducerConsumerCollection(Of T), ICollection, IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: Specifies the type of elements in the queue.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).ConcurrentQueue()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 43
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) class.
  syntax:
    content: public ConcurrentQueue()
    content.vb: Public Sub New
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue(IEnumerable<T>)
  name.vb: ConcurrentQueue(IEnumerable(Of T))
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).ConcurrentQueue(System.Collections.Generic.IEnumerable(Of T))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 82
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml)

    class that contains elements copied from the specified collection
  syntax:
    content: public ConcurrentQueue(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 117
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular

    <see cref="T:System.Array" /> index.
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: >-
        The one-dimensional <see cref="T:System.Array">Array</see> that is the

        destination of the elements copied from the

        <see cref="T:System.Collections.Concurrent.ConcurrentBag" />. The <see cref="T:System.Array">Array</see> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: >-
        The zero-based index in <paramref name="array" /> at which copying

        begins.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference (Nothing in

      Visual Basic).
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than

      zero.
  - type: System.ArgumentException
    description: >-
      is multidimensional. -or-

      does not have zero-based indexing. -or-

      is equal to or greater than the length of the

      -or- The number of elements in the source  is

      greater than the available space from  to the end of the destination

      . -or- The type of the source  cannot be cast automatically to the type of the

      destination .
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 139
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Gets a value indicating whether access to the [System.Collections.ICollection]() is

    synchronized with the SyncRoot.
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 154
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection](). This property is not supported.
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    description: The SyncRoot property is not supported.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 166
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An [System.Collections.IEnumerator]() that can be used to iterate through the collection.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IProducerConsumerCollection<T>.TryAdd(T)
  name.vb: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 183
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add an object to the [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  remarks: >-
    For <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />, this operation will always add the object to the

    end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />

    and return true.
  syntax:
    content: bool IProducerConsumerCollection<T>.TryAdd(T item)
    content.vb: Function System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryAdd
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}" />. The value can be a null

        reference (Nothing in Visual Basic) for reference types.
    return:
      type: System.Boolean
      description: true if the object was added successfully; otherwise, false.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IProducerConsumerCollection<T>.TryTake(out T)
  name.vb: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(ByRef T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 201
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return an object from the [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  remarks: >-
    For <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />, this operation will attempt to remove the object

    from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.
  syntax:
    content: bool IProducerConsumerCollection<T>.TryTake(out T item)
    content.vb: Function System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(ByRef item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryTake
    parameters:
    - id: item
      type: '{T}'
      description: >-
        When this method returns, if the operation was successful, <paramref name="item" /> contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      type: System.Boolean
      description: true if an element was removed and returned successfully; otherwise, false.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.IsEmpty
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 217
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value that indicates whether the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) is empty.
  remarks: >-
    For determining whether the collection contains any items, use of this property is recommended

    rather than retrieving the number of items from the [System.Collections.Concurrent.ConcurrentQueue`1.Count](System.Collections.Concurrent.ConcurrentQueue`1.yml) property and comparing it

    to 0.  However, as this collection is intended to be accessed concurrently, it may be the case

    that another thread will modify the collection after [System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty](System.Collections.Concurrent.ConcurrentQueue`1.yml) returns, thus invalidating

    the result.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ToArray()
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 255
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the elements stored in the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) to a new array.
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Count
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 350
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets the number of elements contained in the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  remarks: >-
    For determining whether the collection contains any items, use of the [System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty](System.Collections.Concurrent.ConcurrentQueue`1.yml)

    property is recommended rather than retrieving the number of items from the [System.Collections.Concurrent.ConcurrentQueue`1.Count](System.Collections.Concurrent.ConcurrentQueue`1.yml)

    property and comparing it to 0.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 399
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) elements to an existing one-dimensional [System.Array](), starting at the specified array index.
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: >-
        The one-dimensional <see cref="T:System.Array">Array</see> that is the

        destination of the elements copied from the

        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />. The <see cref="T:System.Array">Array</see> must have zero-based

        indexing.
    - id: index
      type: System.Int32
      description: >-
        The zero-based index in <paramref name="array" /> at which copying

        begins.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference (Nothing in

      Visual Basic).
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than

      zero.
  - type: System.ArgumentException
    description: >-
      is equal to or greater than the

      length of the

      -or- The number of elements in the source  is greater than the

      available space from  to the end of the destination .
- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 426
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  remarks: >-
    The enumeration represents a moment-in-time snapshot of the contents

    of the queue.  It does not reflect any updates to the collection after

    [System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator](System.Collections.Concurrent.ConcurrentQueue`1.yml) was called.  The enumerator is safe to use

    concurrently with reads from and writes to the queue.
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator for the contents of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: Enqueue(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).Enqueue(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 533
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds an object to the end of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content: public void Enqueue(T item)
    content.vb: Public Sub Enqueue(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to add to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />. The value can be a null reference

        (Nothing in Visual Basic) for reference types.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  id: TryDequeue(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: TryDequeue(out T)
  name.vb: TryDequeue(ByRef T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(out T)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).TryDequeue(ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 557
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return the object at the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content: public bool TryDequeue(out T result)
    content.vb: Public Function TryDequeue(ByRef result As T) As Boolean
    parameters:
    - id: result
      type: '{T}'
      description: >-
        When this method returns, if the operation was successful, <paramref name="result" /> contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      type: System.Boolean
      description: >-
        true if an element was removed and returned from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />

        successfully; otherwise, false.
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  id: TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: TryPeek(out T)
  name.vb: TryPeek(ByRef T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryPeek(out T)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T).TryPeek(ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 578
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to return an object from the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml)

    without removing it.
  syntax:
    content: public bool TryPeek(out T result)
    content.vb: Public Function TryPeek(ByRef result As T) As Boolean
    parameters:
    - id: result
      type: '{T}'
      description: >-
        When this method returns, <paramref name="result" /> contains an object from

        the beginning of the [System.Collections.Concurrent.ConcurrentQueue{T}]() or an

        unspecified value if the operation failed.
    return:
      type: System.Boolean
      description: true if and object was returned successfully; otherwise, false.
references:
- uid: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue<T>
  name.vb: ConcurrentQueue(Of T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T)
  type: Class
  summary: Represents a thread-safe first-in, first-out collection of objects.
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.ArgumentNullException
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  fullName: System.Array
- uid: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.NotSupportedException
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Concurrent.IProducerConsumerCollection{T}
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count
- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentQueue{T}
