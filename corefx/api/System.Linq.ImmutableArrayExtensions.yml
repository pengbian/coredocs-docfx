items:
- uid: System.Linq.ImmutableArrayExtensions
  id: ImmutableArrayExtensions
  parent: System.Linq
  children:
  - System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ImmutableArrayExtensions
  fullName: System.Linq.ImmutableArrayExtensions
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 17
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: LINQ extension method overrides that offer greater efficiency for [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml) than the standard LINQ methods
  syntax:
    content: public class ImmutableArrayExtensions
    content.vb: Public Class ImmutableArrayExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  id: Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Select<T, TResult>(ImmutableArray<T>, Func<T, TResult>)
  name.vb: Select(Of T, TResult)(ImmutableArray(Of T), Func(Of T, TResult))
  fullName: System.Linq.ImmutableArrayExtensions.Select<T, TResult>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TResult>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Select(Of T, TResult)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 28
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form.
  syntax:
    content: public static IEnumerable<TResult> Select<T, TResult>(ImmutableArray<T> immutableArray, Func<T, TResult> selector)
    content.vb: Public Shared Function Select(Of T, TResult)(immutableArray As ImmutableArray(Of T), selector As Func(Of T, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The immutable array.
    - id: selector
      type: System.Func{{T},{TResult}}
      description: The selector.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    - id: TResult
      description: The type of the result element.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
- uid: System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ImmutableArray(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  fullName: System.Linq.ImmutableArrayExtensions.SelectMany<TSource, TCollection, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Immutable.ImmutableArray(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 56
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: >-
    Projects each element of a sequence to an [System.Collections.Generic.IEnumerable`1](),

    flattens the resulting sequences into one sequence, and invokes a result

    selector function on each element therein.
  syntax:
    content: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource> immutableArray, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: Public Shared Function SelectMany(Of TSource, TCollection, TResult)(immutableArray As ImmutableArray(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: The immutable array.
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
      description: A transform function to apply to each element of the input sequence.
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: A transform function to apply to each element of the intermediate sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <paramref name="immutableArray" />.
    - id: TCollection
      description: The type of the intermediate elements collected by <paramref name="collectionSelector" />.
    - id: TResult
      description: The type of the elements of the resulting sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: >-
        An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result

        of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each

        element of <paramref name="immutableArray" /> and then mapping each of those sequence elements and their

        corresponding source element to a result element.
- uid: System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Where<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: Where(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.Where<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Where(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 88
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate.
  syntax:
    content: public static IEnumerable<T> Where<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function Where(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As IEnumerable(Of T)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  id: Any``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Any<T>(ImmutableArray<T>)
  name.vb: Any(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Any(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 104
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Gets a value indicating whether any elements are in this collection.
  syntax:
    content: public static bool Any<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function Any(Of T)(immutableArray As ImmutableArray(Of T)) As Boolean
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Any<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: Any(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Any(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 117
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: >-
    Gets a value indicating whether any elements are in this collection

    that match a given condition.
  syntax:
    content: public static bool Any<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function Any(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As Boolean
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The predicate.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
- uid: System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: All<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: All(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.All<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.All(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 144
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: >-
    Gets a value indicating whether all elements in this collection

    match a given condition.
  syntax:
    content: public static bool All<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function All(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As Boolean
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The predicate.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
      description: <c>true</c> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <c>false</c>.
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  id: SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>)
  name.vb: SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), ImmutableArray(Of TDerived), IEqualityComparer(Of TBase))
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(System.Collections.Immutable.ImmutableArray(Of TBase), System.Collections.Immutable.ImmutableArray(Of TDerived), System.Collections.Generic.IEqualityComparer(Of TBase))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 166
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Determines whether two sequences are equal according to an equality comparer.
  syntax:
    content: 'public static bool SequenceEqual<TDerived, TBase>(ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, IEqualityComparer<TBase> comparer = null)where TDerived : TBase'
    content.vb: Public Shared Function SequenceEqual(Of TDerived As TBase, TBase)(immutableArray As ImmutableArray(Of TBase), items As ImmutableArray(Of TDerived), comparer As IEqualityComparer(Of TBase) = Nothing) As Boolean
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TBase}}
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TDerived}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TBase}}
    typeParameters:
    - id: TDerived
      description: The type of element in the compared array.
    - id: TBase
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  id: SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>)
  name.vb: SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), IEnumerable(Of TDerived), IEqualityComparer(Of TBase))
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Generic.IEnumerable<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(System.Collections.Immutable.ImmutableArray(Of TBase), System.Collections.Generic.IEnumerable(Of TDerived), System.Collections.Generic.IEqualityComparer(Of TBase))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 202
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Determines whether two sequences are equal according to an equality comparer.
  syntax:
    content: 'public static bool SequenceEqual<TDerived, TBase>(ImmutableArray<TBase> immutableArray, IEnumerable<TDerived> items, IEqualityComparer<TBase> comparer = null)where TDerived : TBase'
    content.vb: Public Shared Function SequenceEqual(Of TDerived As TBase, TBase)(immutableArray As ImmutableArray(Of TBase), items As IEnumerable(Of TDerived), comparer As IEqualityComparer(Of TBase) = Nothing) As Boolean
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TBase}}
    - id: items
      type: System.Collections.Generic.IEnumerable{{TDerived}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TBase}}
    typeParameters:
    - id: TDerived
      description: The type of element in the compared array.
    - id: TBase
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  id: SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase, TBase, Boolean>)
  name.vb: SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), ImmutableArray(Of TDerived), Func(Of TBase, TBase, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Func<TBase, TBase, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(System.Collections.Immutable.ImmutableArray(Of TBase), System.Collections.Immutable.ImmutableArray(Of TDerived), System.Func(Of TBase, TBase, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 237
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Determines whether two sequences are equal according to an equality comparer.
  syntax:
    content: 'public static bool SequenceEqual<TDerived, TBase>(ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, Func<TBase, TBase, bool> predicate)where TDerived : TBase'
    content.vb: Public Shared Function SequenceEqual(Of TDerived As TBase, TBase)(immutableArray As ImmutableArray(Of TBase), items As ImmutableArray(Of TDerived), predicate As Func(Of TBase, TBase, Boolean)) As Boolean
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TBase}}
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TDerived}}
    - id: predicate
      type: System.Func{{TBase},{TBase},System.Boolean}
    typeParameters:
    - id: TDerived
      description: The type of element in the compared array.
    - id: TBase
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Aggregate<T>(ImmutableArray<T>, Func<T, T, T>)
  name.vb: Aggregate(Of T)(ImmutableArray(Of T), Func(Of T, T, T))
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, T, T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Aggregate(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, T, T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 269
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence.
  syntax:
    content: public static T Aggregate<T>(ImmutableArray<T> immutableArray, Func<T, T, T> func)
    content.vb: Public Shared Function Aggregate(Of T)(immutableArray As ImmutableArray(Of T), func As Func(Of T, T, T)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: func
      type: System.Func{{T},{T},{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  id: Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Aggregate<TAccumulate, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>)
  name.vb: Aggregate(Of TAccumulate, T)(ImmutableArray(Of T), TAccumulate, Func(Of TAccumulate, T, TAccumulate))
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<TAccumulate, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate, T, TAccumulate>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Aggregate(Of TAccumulate, T)(System.Collections.Immutable.ImmutableArray(Of T), TAccumulate, System.Func(Of TAccumulate, T, TAccumulate))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 293
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence.
  syntax:
    content: public static TAccumulate Aggregate<TAccumulate, T>(ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func)
    content.vb: Public Shared Function Aggregate(Of TAccumulate, T)(immutableArray As ImmutableArray(Of T), seed As TAccumulate, func As Func(Of TAccumulate, T, TAccumulate)) As TAccumulate
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: System.Func{{TAccumulate},{T},{TAccumulate}}
    typeParameters:
    - id: TAccumulate
      description: The type of the accumulated value.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{TAccumulate}'
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  id: Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Aggregate<TAccumulate, TResult, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>)
  name.vb: Aggregate(Of TAccumulate, TResult, T)(ImmutableArray(Of T), TAccumulate, Func(Of TAccumulate, T, TAccumulate), Func(Of TAccumulate, TResult))
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<TAccumulate, TResult, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate, T, TAccumulate>, System.Func<TAccumulate, TResult>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Aggregate(Of TAccumulate, TResult, T)(System.Collections.Immutable.ImmutableArray(Of T), TAccumulate, System.Func(Of TAccumulate, T, TAccumulate), System.Func(Of TAccumulate, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 313
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence.
  syntax:
    content: public static TResult Aggregate<TAccumulate, TResult, T>(ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    content.vb: Public Shared Function Aggregate(Of TAccumulate, TResult, T)(immutableArray As ImmutableArray(Of T), seed As TAccumulate, func As Func(Of TAccumulate, T, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: System.Func{{TAccumulate},{T},{TAccumulate}}
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
    typeParameters:
    - id: TAccumulate
      description: The type of the accumulated value.
    - id: TResult
      description: The type of result returned by the result selector.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{TResult}'
- uid: System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  id: ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ElementAt<T>(ImmutableArray<T>, Int32)
  name.vb: ElementAt(Of T)(ImmutableArray(Of T), Int32)
  fullName: System.Linq.ImmutableArrayExtensions.ElementAt<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ElementAt(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 325
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence.
  syntax:
    content: public static T ElementAt<T>(ImmutableArray<T> immutableArray, int index)
    content.vb: Public Shared Function ElementAt(Of T)(immutableArray As ImmutableArray(Of T), index As Integer) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ElementAtOrDefault<T>(ImmutableArray<T>, Int32)
  name.vb: ElementAtOrDefault(Of T)(ImmutableArray(Of T), Int32)
  fullName: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 335
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.
  syntax:
    content: public static T ElementAtOrDefault<T>(ImmutableArray<T> immutableArray, int index)
    content.vb: Public Shared Function ElementAtOrDefault(Of T)(immutableArray As ImmutableArray(Of T), index As Integer) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: First<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: First(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.First(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 350
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in a sequence that satisfies a specified condition.
  syntax:
    content: public static T First<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function First(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  id: First``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: First<T>(ImmutableArray<T>)
  name.vb: First(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.First(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 372
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in a sequence that satisfies a specified condition.
  syntax:
    content: public static T First<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function First(Of T)(immutableArray As ImmutableArray(Of T)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  id: FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: FirstOrDefault<T>(ImmutableArray<T>)
  name.vb: FirstOrDefault(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.FirstOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 387
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.
  syntax:
    content: public static T FirstOrDefault<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function FirstOrDefault(Of T)(immutableArray As ImmutableArray(Of T)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: FirstOrDefault<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: FirstOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.FirstOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 397
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
  syntax:
    content: public static T FirstOrDefault<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function FirstOrDefault(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  id: Last``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Last<T>(ImmutableArray<T>)
  name.vb: Last(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Last(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 418
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of a sequence.
  syntax:
    content: public static T Last<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function Last(Of T)(immutableArray As ImmutableArray(Of T)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Last<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: Last(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Last(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 432
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a specified condition.
  syntax:
    content: public static T Last<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function Last(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  id: LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: LastOrDefault<T>(ImmutableArray<T>)
  name.vb: LastOrDefault(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.LastOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 454
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of a sequence, or a default value if the sequence contains no elements.
  syntax:
    content: public static T LastOrDefault<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function LastOrDefault(Of T)(immutableArray As ImmutableArray(Of T)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: LastOrDefault<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: LastOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.LastOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 465
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
  syntax:
    content: public static T LastOrDefault<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function LastOrDefault(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  id: Single``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Single<T>(ImmutableArray<T>)
  name.vb: Single(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.Single<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Single(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 486
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
  syntax:
    content: public static T Single<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function Single(Of T)(immutableArray As ImmutableArray(Of T)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Single<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: Single(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.Single<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Single(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 497
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
  syntax:
    content: public static T Single<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function Single(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  id: SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SingleOrDefault<T>(ImmutableArray<T>)
  name.vb: SingleOrDefault(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.SingleOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 531
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
  syntax:
    content: public static T SingleOrDefault<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function SingleOrDefault(Of T)(immutableArray As ImmutableArray(Of T)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SingleOrDefault<T>(ImmutableArray<T>, Func<T, Boolean>)
  name.vb: SingleOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName: System.Linq.ImmutableArrayExtensions.SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, System.Boolean>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.SingleOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, System.Boolean))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 542
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
  syntax:
    content: public static T SingleOrDefault<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    content.vb: Public Shared Function SingleOrDefault(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: predicate
      type: System.Func{{T},System.Boolean}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  id: ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>)
  name.vb: ToDictionary(Of TKey, T)(ImmutableArray(Of T), Func(Of T, TKey))
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 574
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content: public static Dictionary<TKey, T> ToDictionary<TKey, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector)
    content.vb: Public Shared Function ToDictionary(Of TKey, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey)) As Dictionary(Of TKey, T)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{T}}
      description: The newly initialized dictionary.
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  id: ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>)
  name.vb: ToDictionary(Of TKey, TElement, T)(ImmutableArray(Of T), Func(Of T, TKey), Func(Of T, TElement))
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Func<T, TElement>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, TElement, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey), System.Func(Of T, TElement))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 590
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector)
    content.vb: Public Shared Function ToDictionary(Of TKey, TElement, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    - id: elementSelector
      type: System.Func{{T},{TElement}}
      description: The element selector.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TElement
      description: The type of the element.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: The newly initialized dictionary.
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  id: ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>, IEqualityComparer<TKey>)
  name.vb: ToDictionary(Of TKey, T)(ImmutableArray(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey))
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 605
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content: public static Dictionary<TKey, T> ToDictionary<TKey, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function ToDictionary(Of TKey, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, T)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer to initialize the dictionary with.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{T}}
      description: The newly initialized dictionary.
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  id: ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  name.vb: ToDictionary(Of TKey, TElement, T)(ImmutableArray(Of T), Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Func<T, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, TElement, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey), System.Func(Of T, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 630
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function ToDictionary(Of TKey, TElement, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    - id: elementSelector
      type: System.Func{{T},{TElement}}
      description: The element selector.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer to initialize the dictionary with.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TElement
      description: The type of the element.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: The newly initialized dictionary.
- uid: System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  id: ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToArray<T>(ImmutableArray<T>)
  name.vb: ToArray(Of T)(ImmutableArray(Of T))
  fullName: System.Linq.ImmutableArrayExtensions.ToArray<T>(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToArray(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 651
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Copies the contents of this array to a mutable array.
  syntax:
    content: public static T[] ToArray<T>(ImmutableArray<T> immutableArray)
    content.vb: Public Shared Function ToArray(Of T)(immutableArray As ImmutableArray(Of T)) As T()
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}[]'
      description: The newly instantiated array.
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: First<T>(ImmutableArray<T>.Builder)
  name.vb: First(Of T)(ImmutableArray(Of T).Builder)
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.First(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 671
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in the collection.
  syntax:
    content: public static T First<T>(ImmutableArray<T>.Builder builder)
    content.vb: Public Shared Function First(Of T)(builder As ImmutableArray(Of T).Builder) As T
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
    typeParameters:
    - id: T
    return:
      type: '{T}'
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown if the collection is empty.
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: FirstOrDefault<T>(ImmutableArray<T>.Builder)
  name.vb: FirstOrDefault(Of T)(ImmutableArray(Of T).Builder)
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.FirstOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 687
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in the collection, or the default value if the collection is empty.
  syntax:
    content: public static T FirstOrDefault<T>(ImmutableArray<T>.Builder builder)
    content.vb: Public Shared Function FirstOrDefault(Of T)(builder As ImmutableArray(Of T).Builder) As T
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
    typeParameters:
    - id: T
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Last<T>(ImmutableArray<T>.Builder)
  name.vb: Last(Of T)(ImmutableArray(Of T).Builder)
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Last(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 699
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element in the collection.
  syntax:
    content: public static T Last<T>(ImmutableArray<T>.Builder builder)
    content.vb: Public Shared Function Last(Of T)(builder As ImmutableArray(Of T).Builder) As T
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
    typeParameters:
    - id: T
    return:
      type: '{T}'
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown if the collection is empty.
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: LastOrDefault<T>(ImmutableArray<T>.Builder)
  name.vb: LastOrDefault(Of T)(ImmutableArray(Of T).Builder)
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.LastOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 715
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element in the collection, or the default value if the collection is empty.
  syntax:
    content: public static T LastOrDefault<T>(ImmutableArray<T>.Builder builder)
    content.vb: Public Shared Function LastOrDefault(Of T)(builder As ImmutableArray(Of T).Builder) As T
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
    typeParameters:
    - id: T
    return:
      type: '{T}'
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  parent: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Any<T>(ImmutableArray<T>.Builder)
  name.vb: Any(Of T)(ImmutableArray(Of T).Builder)
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Any(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 726
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns a value indicating whether this collection contains any elements.
  syntax:
    content: public static bool Any<T>(ImmutableArray<T>.Builder builder)
    content.vb: Public Shared Function Any(Of T)(builder As ImmutableArray(Of T).Builder) As Boolean
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
    typeParameters:
    - id: T
    return:
      type: System.Boolean
references:
- uid: System.Collections.Immutable.ImmutableArray`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<T>
  name.vb: ImmutableArray(Of T)
  fullName: System.Collections.Immutable.ImmutableArray<T>
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  type: Struct
  summary: A readonly array with O(1) indexable lookup time.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Immutable.ImmutableArray{{T}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<T>
  name.vb: ImmutableArray(Of T)
  fullName: System.Collections.Immutable.ImmutableArray<T>
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func{{T},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  name.vb: IEnumerable(Of TResult)
  fullName: System.Collections.Generic.IEnumerable<TResult>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Immutable.ImmutableArray{{TSource}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<TSource>
  name.vb: ImmutableArray(Of TSource)
  fullName: System.Collections.Immutable.ImmutableArray<TSource>
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TSource)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TCollection>>
  name.vb: Func(Of TSource, IEnumerable(Of TCollection))
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TCollection},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TCollection, TResult>
  name.vb: Func(Of TSource, TCollection, TResult)
  fullName: System.Func<TSource, TCollection, TResult>
  fullName.vb: System.Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`3
  parent: System
  isExternal: true
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{T},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  name.vb: Func(Of T, Boolean)
  fullName: System.Func<T, System.Boolean>
  fullName.vb: System.Func(Of T, System.Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Immutable.ImmutableArray{{TBase}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<TBase>
  name.vb: ImmutableArray(Of TBase)
  fullName: System.Collections.Immutable.ImmutableArray<TBase>
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TBase)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: <
    fullName: <
  - name: TBase
    fullName: TBase
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TBase
    fullName: TBase
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableArray{{TDerived}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<TDerived>
  name.vb: ImmutableArray(Of TDerived)
  fullName: System.Collections.Immutable.ImmutableArray<TDerived>
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TDerived)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: <
    fullName: <
  - name: TDerived
    fullName: TDerived
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TDerived
    fullName: TDerived
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TBase}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TBase>
  name.vb: IEqualityComparer(Of TBase)
  fullName: System.Collections.Generic.IEqualityComparer<TBase>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TBase
    fullName: TBase
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TBase
    fullName: TBase
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TDerived}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TDerived>
  name.vb: IEnumerable(Of TDerived)
  fullName: System.Collections.Generic.IEnumerable<TDerived>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TDerived)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TDerived
    fullName: TDerived
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TDerived
    fullName: TDerived
  - name: )
    fullName: )
- uid: System.Func{{TBase},{TBase},System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<TBase, TBase, Boolean>
  name.vb: Func(Of TBase, TBase, Boolean)
  fullName: System.Func<TBase, TBase, System.Boolean>
  fullName.vb: System.Func(Of TBase, TBase, System.Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TBase
    fullName: TBase
  - name: ', '
    fullName: ', '
  - name: TBase
    fullName: TBase
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TBase
    fullName: TBase
  - name: ', '
    fullName: ', '
  - name: TBase
    fullName: TBase
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{T},{T},{T}}
  parent: System
  definition: System.Func`3
  name: Func<T, T, T>
  name.vb: Func(Of T, T, T)
  fullName: System.Func<T, T, T>
  fullName.vb: System.Func(Of T, T, T)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{T},{TAccumulate}}
  parent: System
  definition: System.Func`3
  name: Func<TAccumulate, T, TAccumulate>
  name.vb: Func(Of TAccumulate, T, TAccumulate)
  fullName: System.Func<TAccumulate, T, TAccumulate>
  fullName.vb: System.Func(Of TAccumulate, T, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  name.vb: Func(Of TAccumulate, TResult)
  fullName: System.Func<TAccumulate, TResult>
  fullName.vb: System.Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Func{{T},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<T, TKey>
  name.vb: Func(Of T, TKey)
  fullName: System.Func<T, TKey>
  fullName.vb: System.Func(Of T, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, T>
  name.vb: Dictionary(Of TKey, T)
  fullName: System.Collections.Generic.Dictionary<TKey, T>
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, T)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<TKey, TValue>
  name.vb: Dictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func{{T},{TElement}}
  parent: System
  definition: System.Func`2
  name: Func<T, TElement>
  name.vb: Func(Of T, TElement)
  fullName: System.Func<T, TElement>
  fullName.vb: System.Func(Of T, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TElement>
  name.vb: Dictionary(Of TKey, TElement)
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  name.vb: IEqualityComparer(Of TKey)
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Collections.Immutable.ImmutableArray{{T}}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ImmutableArray.Builder<>
  name.vb: ImmutableArray.Builder(Of )
  fullName: System.Collections.Immutable.ImmutableArray.Builder<>
  fullName.vb: System.Collections.Immutable.ImmutableArray.Builder(Of )
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableArray`1.Builder
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ImmutableArray.Builder<>
  name.vb: ImmutableArray.Builder(Of )
  fullName: System.Collections.Immutable.ImmutableArray.Builder<>
  fullName.vb: System.Collections.Immutable.ImmutableArray.Builder(Of )
  type: Class
  summary: >-
    A writable array accessor that can be converted into an @'System.Collections.Immutable.ImmutableArray`1'

    instance without allocating memory.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
