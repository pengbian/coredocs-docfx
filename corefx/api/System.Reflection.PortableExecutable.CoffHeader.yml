items:
- uid: System.Reflection.PortableExecutable.CoffHeader
  id: CoffHeader
  parent: System.Reflection.PortableExecutable
  children:
  - System.Reflection.PortableExecutable.CoffHeader.Characteristics
  - System.Reflection.PortableExecutable.CoffHeader.Machine
  - System.Reflection.PortableExecutable.CoffHeader.NumberOfSections
  - System.Reflection.PortableExecutable.CoffHeader.NumberOfSymbols
  - System.Reflection.PortableExecutable.CoffHeader.PointerToSymbolTable
  - System.Reflection.PortableExecutable.CoffHeader.SizeOfOptionalHeader
  - System.Reflection.PortableExecutable.CoffHeader.TimeDateStamp
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: CoffHeader
  fullName: System.Reflection.PortableExecutable.CoffHeader
  type: Class
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 5
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  syntax:
    content: public sealed class CoffHeader
    content.vb: Public NotInheritable Class CoffHeader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Reflection.PortableExecutable.CoffHeader.Machine
  id: Machine
  parent: System.Reflection.PortableExecutable.CoffHeader
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: Machine
  fullName: System.Reflection.PortableExecutable.CoffHeader.Machine
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 10
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: The type of target machine.
  syntax:
    content: public Machine Machine { get; }
    content.vb: Public ReadOnly Property Machine As Machine
    parameters: []
    return:
      type: System.Reflection.PortableExecutable.Machine
- uid: System.Reflection.PortableExecutable.CoffHeader.NumberOfSections
  id: NumberOfSections
  parent: System.Reflection.PortableExecutable.CoffHeader
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: NumberOfSections
  fullName: System.Reflection.PortableExecutable.CoffHeader.NumberOfSections
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 15
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: The number of sections. This indicates the size of the section table, which immediately follows the headers.
  syntax:
    content: public short NumberOfSections { get; }
    content.vb: Public ReadOnly Property NumberOfSections As Short
    parameters: []
    return:
      type: System.Int16
- uid: System.Reflection.PortableExecutable.CoffHeader.TimeDateStamp
  id: TimeDateStamp
  parent: System.Reflection.PortableExecutable.CoffHeader
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: TimeDateStamp
  fullName: System.Reflection.PortableExecutable.CoffHeader.TimeDateStamp
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 20
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: The low 32 bits of the number of seconds since 00:00 January 1, 1970, that indicates when the file was created.
  syntax:
    content: public int TimeDateStamp { get; }
    content.vb: Public ReadOnly Property TimeDateStamp As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.CoffHeader.PointerToSymbolTable
  id: PointerToSymbolTable
  parent: System.Reflection.PortableExecutable.CoffHeader
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: PointerToSymbolTable
  fullName: System.Reflection.PortableExecutable.CoffHeader.PointerToSymbolTable
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 26
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The file pointer to the COFF symbol table, or zero if no COFF symbol table is present.

    This value should be zero for a PE image.
  syntax:
    content: public int PointerToSymbolTable { get; }
    content.vb: Public ReadOnly Property PointerToSymbolTable As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.CoffHeader.NumberOfSymbols
  id: NumberOfSymbols
  parent: System.Reflection.PortableExecutable.CoffHeader
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: NumberOfSymbols
  fullName: System.Reflection.PortableExecutable.CoffHeader.NumberOfSymbols
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 32
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The number of entries in the symbol table. This data can be used to locate the string table,

    which immediately follows the symbol table. This value should be zero for a PE image.
  syntax:
    content: public int NumberOfSymbols { get; }
    content.vb: Public ReadOnly Property NumberOfSymbols As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.CoffHeader.SizeOfOptionalHeader
  id: SizeOfOptionalHeader
  parent: System.Reflection.PortableExecutable.CoffHeader
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: SizeOfOptionalHeader
  fullName: System.Reflection.PortableExecutable.CoffHeader.SizeOfOptionalHeader
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 38
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The size of the optional header, which is required for executable files but not for object files.

    This value should be zero for an object file.
  syntax:
    content: public short SizeOfOptionalHeader { get; }
    content.vb: Public ReadOnly Property SizeOfOptionalHeader As Short
    parameters: []
    return:
      type: System.Int16
- uid: System.Reflection.PortableExecutable.CoffHeader.Characteristics
  id: Characteristics
  parent: System.Reflection.PortableExecutable.CoffHeader
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: Characteristics
  fullName: System.Reflection.PortableExecutable.CoffHeader.Characteristics
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/CoffHeader.cs
    startLine: 43
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: The flags that indicate the attributes of the file.
  syntax:
    content: public Characteristics Characteristics { get; }
    content.vb: Public ReadOnly Property Characteristics As Characteristics
    parameters: []
    return:
      type: System.Reflection.PortableExecutable.Characteristics
references:
- uid: System.Reflection.PortableExecutable
  isExternal: false
  name: System.Reflection.PortableExecutable
  fullName: System.Reflection.PortableExecutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Reflection.PortableExecutable.Machine
  parent: System.Reflection.PortableExecutable
  isExternal: false
  href: System.Reflection.PortableExecutable.Machine.yml
  name: Machine
  fullName: System.Reflection.PortableExecutable.Machine
  type: Enum
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  fullName: System.Int16
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.PortableExecutable.Characteristics
  parent: System.Reflection.PortableExecutable
  isExternal: false
  href: System.Reflection.PortableExecutable.Characteristics.yml
  name: Characteristics
  fullName: System.Reflection.PortableExecutable.Characteristics
  type: Enum
