items:
- uid: System.Collections.Generic.HashSet`1
  id: HashSet`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.HashSet`1.#ctor
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.Add(`0)
  - System.Collections.Generic.HashSet`1.Clear
  - System.Collections.Generic.HashSet`1.Comparer
  - System.Collections.Generic.HashSet`1.Contains(`0)
  - System.Collections.Generic.HashSet`1.CopyTo(`0[])
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.HashSet`1.Count
  - System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.GetEnumerator
  - System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.Remove(`0)
  - System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.HashSet`1.TrimExcess
  - System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet<T>
  name.vb: HashSet(Of T)
  fullName: System.Collections.Generic.HashSet<T>
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 50
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: 'public class HashSet<T> : ISet<T>, ICollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public Class HashSet(Of T) Implements ISet(Of T), ICollection(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ISet{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Generic.HashSet`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet()
  fullName: System.Collections.Generic.HashSet<T>.HashSet()
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 76
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public HashSet()
    content.vb: Public Sub New
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet(IEqualityComparer<T>)
  name.vb: HashSet(IEqualityComparer(Of T))
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet(System.Collections.Generic.IEqualityComparer(Of T))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 80
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public HashSet(IEqualityComparer<T> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet(IEnumerable<T>)
  name.vb: HashSet(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet(System.Collections.Generic.IEnumerable(Of T))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 94
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public HashSet(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet(IEnumerable<T>, IEqualityComparer<T>)
  name.vb: HashSet(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 105
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Implementation Notes:

    Since resizes are relatively expensive (require rehashing), this attempts to minimize

    the need to resize by setting the initial capacity based on size of collection.
  syntax:
    content: public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 142
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.Add(T item)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
    parameters:
    - id: item
      type: '{T}'
- uid: System.Collections.Generic.HashSet`1.Clear
  id: Clear
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: Clear()
  fullName: System.Collections.Generic.HashSet<T>.Clear()
  fullName.vb: System.Collections.Generic.HashSet(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 151
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Remove all items from this set. This clears the elements but not the underlying

    buckets and slots array. Follow this call by TrimExcess to release these.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Generic.HashSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: Contains(T)
  fullName: System.Collections.Generic.HashSet<T>.Contains(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 173
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Checks if this hashset contains the item
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: item to check for containment
    return:
      type: System.Boolean
      description: true if item contained; false if not
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 196
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copy items in this hashset to array, starting at arrayIndex
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: array to add items to
    - id: arrayIndex
      type: System.Int32
      description: index to start at
- uid: System.Collections.Generic.HashSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: Remove(T)
  fullName: System.Collections.Generic.HashSet<T>.Remove(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 206
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Remove item from this hashset
  syntax:
    content: public bool Remove(T item)
    content.vb: Public Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: item to remove
    return:
      type: System.Boolean
      description: true if removed; false if not (i.e. if the item wasn't in the HashSet)
- uid: System.Collections.Generic.HashSet`1.Count
  id: Count
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: Count
  fullName: System.Collections.Generic.HashSet<T>.Count
  fullName.vb: System.Collections.Generic.HashSet(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 253
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Number of elements in this hashset
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 261
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Whether this is readonly
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Generic.HashSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 270
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public HashSet<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As HashSet(Of T).Enumerator
    return:
      type: System.Collections.Generic.HashSet`1.Enumerator
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 275
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
- uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 280
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
- uid: System.Collections.Generic.HashSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: Add(T)
  fullName: System.Collections.Generic.HashSet<T>.Add(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 295
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Add item to this HashSet. Returns bool indicating whether item was added (won't be

    added if already present)
  syntax:
    content: public bool Add(T item)
    content.vb: Public Function Add(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
      description: true if added, false if already present
- uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: UnionWith(IEnumerable<T>)
  name.vb: UnionWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 308
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Take the union of this HashSet with other. Modifies this set.



    Implementation note: GetSuggestedCapacity (to increase capacity in advance avoiding

    multiple resizes ended up not being useful in practice; quickly gets to the

    point where it's a wasteful check.
  syntax:
    content: public void UnionWith(IEnumerable<T> other)
    content.vb: Public Sub UnionWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to add
- uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: IntersectWith(IEnumerable<T>)
  name.vb: IntersectWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 336
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Takes the intersection of this set with other. Modifies this set.



    Implementation Notes:

    We get better perf if other is a hashset using same equality comparer, because we

    get constant contains check in other. Resulting cost is O(n1) to iterate over this.



    If we can't go above route, iterate over the other and mark intersection by checking

    contains in this. Then loop over and delete any unmarked elements. Total cost is n2+n1.



    Attempts to return early based on counts alone, using the property that the

    intersection of anything with the empty set is the empty set.
  syntax:
    content: public void IntersectWith(IEnumerable<T> other)
    content.vb: Public Sub IntersectWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to add
- uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: ExceptWith(IEnumerable<T>)
  name.vb: ExceptWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 378
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Remove items in other from this set. Modifies this set.
  syntax:
    content: public void ExceptWith(IEnumerable<T> other)
    content.vb: Public Sub ExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to remove
- uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: SymmetricExceptWith(IEnumerable<T>)
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 410
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Takes symmetric difference (XOR) with other and this set. Modifies this set.
  syntax:
    content: public void SymmetricExceptWith(IEnumerable<T> other)
    content.vb: Public Sub SymmetricExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to XOR
- uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  name.vb: IsSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 462
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Checks if this is a subset of other.



    Implementation Notes:

    The following properties are used up-front to avoid element-wise checks:

    1. If this is the empty set, then it's a subset of anything, including the empty set

    2. If other has unique elements according to this equality comparer, and this has more

    elements than other, then it can't be a subset.



    Furthermore, if other is a hashset using the same equality comparer, we can use a

    faster element-wise check.
  syntax:
    content: public bool IsSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a subset of other; false if not
- uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 513
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Checks if this is a proper subset of other (i.e. strictly contained in)



    Implementation Notes:

    The following properties are used up-front to avoid element-wise checks:

    1. If this is the empty set, then it's a proper subset of a set that contains at least

    one element, but it's not a proper subset of the empty set.

    2. If other has unique elements according to this equality comparer, and this has &gt;=

    the number of elements in other, then this can't be a proper subset.



    Furthermore, if other is a hashset using the same equality comparer, we can use a

    faster element-wise check.
  syntax:
    content: public bool IsProperSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a proper subset of other; false if not
- uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  name.vb: IsSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 560
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Checks if this is a superset of other



    Implementation Notes:

    The following properties are used up-front to avoid element-wise checks:

    1. If other has no elements (it's the empty set), then this is a superset, even if this

    is also the empty set.

    2. If other has unique elements according to this equality comparer, and this has less

    than the number of elements in other, then this can't be a superset
  syntax:
    content: public bool IsSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a superset of other; false if not
- uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 612
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Checks if this is a proper superset of other (i.e. other strictly contained in this)



    Implementation Notes:

    This is slightly more complicated than above because we have to keep track if there

    was at least one element not contained in other.



    The following properties are used up-front to avoid element-wise checks:

    1. If this is the empty set, then it can't be a proper superset of any set, even if

    other is the empty set.

    2. If other is an empty set and this contains at least 1 element, then this is a proper

    superset.

    3. If other has unique elements according to this equality comparer, and other's count

    is greater than or equal to this count, then this can't be a proper superset



    Furthermore, if other has unique elements according to this equality comparer, we can

    use a faster element-wise check.
  syntax:
    content: public bool IsProperSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a proper superset of other; false if not
- uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: Overlaps(IEnumerable<T>)
  name.vb: Overlaps(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 657
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Checks if this set overlaps other (i.e. they share at least one item)
  syntax:
    content: public bool Overlaps(IEnumerable<T> other)
    content.vb: Public Function Overlaps(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if these have at least one common element; false if disjoint
- uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: SetEquals(IEnumerable<T>)
  name.vb: SetEquals(IEnumerable(Of T))
  fullName: System.Collections.Generic.HashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 686
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Checks if this and other contain the same elements. This is set equality:

    duplicates and order are ignored
  syntax:
    content: public bool SetEquals(IEnumerable<T> other)
    content.vb: Public Function SetEquals(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: CopyTo(T[])
  name.vb: CopyTo(T())
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[])
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T())
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 725
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array)
    content.vb: Public Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: CopyTo(T[], Int32, Int32)
  name.vb: CopyTo(T(), Int32, Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32, System.Int32)
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 727
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex, int count)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer, count As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    - id: count
      type: System.Int32
- uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: RemoveWhere(Predicate<T>)
  name.vb: RemoveWhere(Predicate(Of T))
  fullName: System.Collections.Generic.HashSet<T>.RemoveWhere(System.Predicate<T>)
  fullName.vb: System.Collections.Generic.HashSet(Of T).RemoveWhere(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 771
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Remove elements that match specified predicate. Returns the number of elements removed
  syntax:
    content: public int RemoveWhere(Predicate<T> match)
    content.vb: Public Function RemoveWhere(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
- uid: System.Collections.Generic.HashSet`1.Comparer
  id: Comparer
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: Comparer
  fullName: System.Collections.Generic.HashSet<T>.Comparer
  fullName.vb: System.Collections.Generic.HashSet(Of T).Comparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 803
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Gets the IEqualityComparer that is used to determine equality of keys for

    the HashSet.
  syntax:
    content: public IEqualityComparer<T> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{T}}
- uid: System.Collections.Generic.HashSet`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: TrimExcess()
  fullName: System.Collections.Generic.HashSet<T>.TrimExcess()
  fullName.vb: System.Collections.Generic.HashSet(Of T).TrimExcess()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 822
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: >-
    Sets the capacity of this list to the size of the list (rounded up to nearest prime),

    unless count is 0, in which case we release references.



    This method can be used to minimize a list's memory overhead once it is known that no

    new elements will be added to the list. To completely clear a list and release all

    memory referenced by the list, execute the following statements:



    list.Clear();

    list.TrimExcess();
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.HashSet`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.HashSet`1.Enumerator.yml
  name: HashSet.Enumerator<>
  name.vb: HashSet.Enumerator(Of )
  fullName: System.Collections.Generic.HashSet.Enumerator<>
  fullName.vb: System.Collections.Generic.HashSet.Enumerator(Of )
  type: Struct
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
    href: System.Collections.Generic.HashSet`1.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
    href: System.Collections.Generic.HashSet`1.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  name.vb: Predicate(Of T)
  fullName: System.Predicate<T>
  fullName.vb: System.Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: true
  name: Predicate<T>
  name.vb: Predicate(Of T)
  fullName: System.Predicate<T>
  fullName.vb: System.Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
