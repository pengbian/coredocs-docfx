items:
- uid: System.Collections.Immutable.IImmutableList`1
  id: IImmutableList`1
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.IImmutableList`1.Add(`0)
  - System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableList`1.Clear
  - System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)
  - System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)
  - System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: IImmutableList<T>
  name.vb: IImmutableList(Of T)
  fullName: System.Collections.Immutable.IImmutableList<T>
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T)
  type: Interface
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 17
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: A list of elements that can only be modified by creating a new instance of the list.
  remarks: >-
    Mutations on this list generate new lists.  Incremental changes to a list share as much memory as possible with the prior versions of a list,

    while allowing garbage collection to clean up any unique list data that is no longer being referenced.
  syntax:
    content: 'public interface IImmutableList<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public Interface IImmutableList(Of T) Inherits IReadOnlyList(Of T)
    typeParameters:
    - id: T
      description: The type of element stored in the list.
  inheritedMembers:
  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
- uid: System.Collections.Immutable.IImmutableList`1.Clear
  id: Clear
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.IImmutableList<T>.Clear()
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 23
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an empty list that retains the same sort or unordered semantics that this instance has.
  syntax:
    content: IImmutableList<T> Clear()
    content.vb: Function Clear As IImmutableList(Of T)
    return:
      type: System.Collections.Immutable.IImmutableList`1
- uid: System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  name.vb: IndexOf(T, Int32, Int32, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 50
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml)

    that starts at the specified index and contains the specified number of elements.
  syntax:
    content: int IndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)
    content.vb: Function IndexOf(item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the <see cref="T:System.Collections.Immutable.ImmutableList`1" />. The value

        can be null for reference types.
    - id: index
      type: System.Int32
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> that starts at index and

        contains count number of elements, if found; otherwise, -1.
- uid: System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  name.vb: LastIndexOf(T, Int32, Int32, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 73
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml)

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content: int LastIndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)
    content.vb: Function LastIndexOf(item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the <see cref="T:System.Collections.Immutable.ImmutableList`1" />. The value

        can be null for reference types.
    - id: index
      type: System.Int32
      description: The starting position of the search. The search proceeds from <paramref name="index" /> toward the beginning of this instance.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements

        in the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> that contains <paramref name="count" /> number of elements

        and ends at <paramref name="index" />, if found; otherwise, -1.
- uid: System.Collections.Immutable.IImmutableList`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.IImmutableList<T>.Add(T)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 81
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified value to this list.
  syntax:
    content: IImmutableList<T> Add(T value)
    content.vb: Function Add(value As T) As IImmutableList(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: The value to add.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new list with the element added.
- uid: System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: AddRange(IEnumerable<T>)
  name.vb: AddRange(IEnumerable(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 89
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified values to this list.
  syntax:
    content: IImmutableList<T> AddRange(IEnumerable<T> items)
    content.vb: Function AddRange(items As IEnumerable(Of T)) As IImmutableList(Of T)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The values to add.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new list with the elements added.
- uid: System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: Insert(Int32, T)
  fullName: System.Collections.Immutable.IImmutableList<T>.Insert(System.Int32, T)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).Insert(System.Int32, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 98
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Inserts the specified value at the specified index.
  syntax:
    content: IImmutableList<T> Insert(int index, T element)
    content.vb: Function Insert(index As Integer, element As T) As IImmutableList(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: The index at which to insert the value.
    - id: element
      type: '{T}'
      description: The element to insert.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: The new immutable list.
- uid: System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: InsertRange(Int32, IEnumerable<T>)
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 107
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Inserts the specified values at the specified index.
  syntax:
    content: IImmutableList<T> InsertRange(int index, IEnumerable<T> items)
    content.vb: Function InsertRange(index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: The index at which to insert the value.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The elements to insert.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: The new immutable list.
- uid: System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  id: Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: Remove(T, IEqualityComparer<T>)
  name.vb: Remove(T, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.Remove(T, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).Remove(T, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 118
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified value from this list.
  syntax:
    content: IImmutableList<T> Remove(T value, IEqualityComparer<T> equalityComparer)
    content.vb: Function Remove(value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: The value to remove.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new list with the element removed, or this list if the element is not in this list.
- uid: System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})
  id: RemoveAll(System.Predicate{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: RemoveAll(Predicate<T>)
  name.vb: RemoveAll(Predicate(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.RemoveAll(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).RemoveAll(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 132
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Removes all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content: IImmutableList<T> RemoveAll(Predicate<T> match)
    content.vb: Function RemoveAll(match As Predicate(Of T)) As IImmutableList(Of T)
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the elements

        to remove.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: The new list.
- uid: System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  name.vb: RemoveRange(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).RemoveRange(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 145
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified values from this list.
  syntax:
    content: IImmutableList<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer)
    content.vb: Function RemoveRange(items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items to remove if matches are found in this list.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new list with the elements removed.
- uid: System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: RemoveRange(Int32, Int32)
  fullName: System.Collections.Immutable.IImmutableList<T>.RemoveRange(System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).RemoveRange(System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 156
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified values from this list.
  syntax:
    content: IImmutableList<T> RemoveRange(int index, int count)
    content.vb: Function RemoveRange(index As Integer, count As Integer) As IImmutableList(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: The starting index to begin removal.
    - id: count
      type: System.Int32
      description: The number of elements to remove.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new list with the elements removed.
- uid: System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: RemoveAt(Int32)
  fullName: System.Collections.Immutable.IImmutableList<T>.RemoveAt(System.Int32)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 164
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the element at the specified index.
  syntax:
    content: IImmutableList<T> RemoveAt(int index)
    content.vb: Function RemoveAt(index As Integer) As IImmutableList(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new list with the elements removed.
- uid: System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: SetItem(Int32, T)
  fullName: System.Collections.Immutable.IImmutableList<T>.SetItem(System.Int32, T)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).SetItem(System.Int32, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 173
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Replaces an element in the list at a given position with the specified element.
  syntax:
    content: IImmutableList<T> SetItem(int index, T value)
    content.vb: Function SetItem(index As Integer, value As T) As IImmutableList(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: The position in the list of the element to replace.
    - id: value
      type: '{T}'
      description: The element to replace the old element with.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: The new list -- even if the value being replaced is equal to the new value for that position.
- uid: System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  id: Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.IImmutableList`1
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: Replace(T, T, IEqualityComparer<T>)
  name.vb: Replace(T, T, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.IImmutableList<T>.Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T).Replace(T, T, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableList.cs
    startLine: 186
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Replaces the first equal element in the list with the specified element.
  syntax:
    content: IImmutableList<T> Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer)
    content.vb: Function Replace(oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)
    parameters:
    - id: oldValue
      type: '{T}'
      description: The element to replace.
    - id: newValue
      type: '{T}'
      description: The element to replace the old element with.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: The new list -- even if the value being replaced is equal to the new value for that position.
  exceptions:
  - type: System.ArgumentException
    description: Thrown when the old value does not exist in the list.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList{{T}}
  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  name: Item[Int32]
  name.vb: Item(Int32)
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: Item[Int32]
  name.vb: Item(Int32)
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  name.vb: IReadOnlyList(Of T)
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  name.vb: IReadOnlyCollection(Of T)
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyList<T>
  name.vb: IReadOnlyList(Of T)
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyCollection<T>
  name.vb: IReadOnlyCollection(Of T)
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableList`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableList`1.yml
  name: IImmutableList<T>
  name.vb: IImmutableList(Of T)
  fullName: System.Collections.Immutable.IImmutableList<T>
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T)
  type: Interface
  summary: A list of elements that can only be modified by creating a new instance of the list.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    href: System.Collections.Immutable.IImmutableList`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    href: System.Collections.Immutable.IImmutableList`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableList`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ImmutableList<T>
  name.vb: ImmutableList(Of T)
  fullName: System.Collections.Immutable.ImmutableList<T>
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T)
  type: Class
  summary: An immutable list implementation.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
    href: System.Collections.Immutable.ImmutableList`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
    href: System.Collections.Immutable.ImmutableList`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: true
  name: Predicate<T>
  name.vb: Predicate(Of T)
  fullName: System.Predicate<T>
  fullName.vb: System.Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  name.vb: Predicate(Of T)
  fullName: System.Predicate<T>
  fullName.vb: System.Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ArgumentException
