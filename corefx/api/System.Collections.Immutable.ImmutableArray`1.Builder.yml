items:
- uid: System.Collections.Immutable.ImmutableArray`1.Builder
  id: ImmutableArray`1.Builder
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Collections.Immutable.ImmutableArray`1.Builder.Capacity
  - System.Collections.Immutable.ImmutableArray`1.Builder.Clear
  - System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)
  - System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.Count
  - System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable
  - System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)
  - System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Builder.Reverse
  - System.Collections.Immutable.ImmutableArray`1.Builder.Sort
  - System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.Builder.ToArray
  - System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ImmutableArray<T>.Builder
  name.vb: ImmutableArray(Of T).Builder
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 17
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    A writable array accessor that can be converted into an [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml)

    instance without allocating memory.
  syntax:
    content: 'public sealed class Builder : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public NotInheritable Class Builder Implements IList(Of T), ICollection(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Capacity
  id: Capacity
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Capacity
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Capacity
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Capacity
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 54
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Get and sets the length of the internal array.  When set the internal array is

    reallocated to the given capacity if it is not already the specified length.
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Count
  id: Count
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Count
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 91
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the length of the builder.
  remarks: >-
    If the value is decreased, the array contents are truncated.

    If the value is increased, the added elements are initialized to the default value of type <typeparamref name="T" />.
  syntax:
    content: public int Count { get; set; }
    content.vb: Public Property Count As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Item[Int32]
  name.vb: Item(Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Item[System.Int32]
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 137
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the element at the specified index.
  syntax:
    content: public T this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: '{T}'
  exceptions:
  - type: System.IndexOutOfRangeException
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 165
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable
  id: ToImmutable
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ToImmutable()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.ToImmutable()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.ToImmutable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 174
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an immutable copy of the current contents of this collection.
  syntax:
    content: public ImmutableArray<T> ToImmutable()
    content.vb: Public Function ToImmutable As ImmutableArray(Of T)
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An immutable array.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable
  id: MoveToImmutable
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: MoveToImmutable()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.MoveToImmutable()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.MoveToImmutable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 190
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Extracts the internal array as an [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml) and replaces it

    with a zero length array.
  syntax:
    content: public ImmutableArray<T> MoveToImmutable()
    content.vb: Public Function MoveToImmutable As ImmutableArray(Of T)
    return:
      type: System.Collections.Immutable.ImmutableArray`1
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      When  doesn't

      equal .
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 206
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes all items from the [System.Collections.Generic.ICollection`1]().
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Insert(Int32, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Insert(System.Int32, T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Insert(System.Int32, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 216
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Inserts an item to the [System.Collections.Generic.IList`1]() at the specified index.
  syntax:
    content: public void Insert(int index, T item)
    content.vb: Public Sub Insert(index As Integer, item As T)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <paramref name="item" /> should be inserted.
    - id: item
      type: '{T}'
      description: The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)
  id: Add(`0)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 234
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an item to the [System.Collections.Generic.ICollection`1]().
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange(IEnumerable<T>)
  name.vb: AddRange(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 244
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: public void AddRange(IEnumerable<T> items)
    content.vb: Public Sub AddRange(items As IEnumerable(Of T))
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])
  id: AddRange(`0[])
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange(T[])
  name.vb: AddRange(T())
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange(T[])
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(T())
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 264
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: public void AddRange(params T[] items)
    content.vb: Public Sub AddRange(ParamArray items As T())
    parameters:
    - id: items
      type: '{T}[]'
      description: The items.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])
  id: AddRange``1(``0[])
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange<TDerived>(TDerived[])
  name.vb: AddRange(Of TDerived)(TDerived())
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange<TDerived>(TDerived[])
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(Of TDerived)(TDerived())
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 282
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: 'public void AddRange<TDerived>(TDerived[] items)where TDerived : T'
    content.vb: Public Sub AddRange(Of TDerived As T)(items As TDerived())
    parameters:
    - id: items
      type: '{TDerived}[]'
      description: The items.
    typeParameters:
    - id: TDerived
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)
  id: AddRange(`0[],System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange(T[], Int32)
  name.vb: AddRange(T(), Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange(T[], System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 301
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: public void AddRange(T[] items, int length)
    content.vb: Public Sub AddRange(items As T(), length As Integer)
    parameters:
    - id: items
      type: '{T}[]'
      description: The items.
    - id: length
      type: System.Int32
      description: The number of elements from the source array to add.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  id: AddRange(System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange(ImmutableArray<T>)
  name.vb: AddRange(ImmutableArray(Of T))
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange(System.Collections.Immutable.ImmutableArray<T>)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(System.Collections.Immutable.ImmutableArray(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 320
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: public void AddRange(ImmutableArray<T> items)
    content.vb: Public Sub AddRange(items As ImmutableArray(Of T))
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1
      description: The items.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)
  id: AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange(ImmutableArray<T>, Int32)
  name.vb: AddRange(ImmutableArray(Of T), Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(System.Collections.Immutable.ImmutableArray(Of T), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 330
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: public void AddRange(ImmutableArray<T> items, int length)
    content.vb: Public Sub AddRange(items As ImmutableArray(Of T), length As Integer)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1
      description: The items.
    - id: length
      type: System.Int32
      description: The number of elements from the source array to add.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})
  id: AddRange``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange<TDerived>(ImmutableArray<TDerived>)
  name.vb: AddRange(Of TDerived)(ImmutableArray(Of TDerived))
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange<TDerived>(System.Collections.Immutable.ImmutableArray<TDerived>)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(Of TDerived)(System.Collections.Immutable.ImmutableArray(Of TDerived))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 344
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: 'public void AddRange<TDerived>(ImmutableArray<TDerived> items)where TDerived : T'
    content.vb: Public Sub AddRange(Of TDerived As T)(items As ImmutableArray(Of TDerived))
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TDerived}}
      description: The items.
    typeParameters:
    - id: TDerived
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)
  id: AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange(ImmutableArray<T>.Builder)
  name.vb: AddRange(ImmutableArray(Of T).Builder)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange(System.Collections.Immutable.ImmutableArray<T>.Builder)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 356
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: public void AddRange(ImmutableArray<T>.Builder items)
    content.vb: Public Sub AddRange(items As ImmutableArray(Of T).Builder)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1.Builder
      description: The items.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: AddRange<TDerived>(ImmutableArray<TDerived>.Builder)
  name.vb: AddRange(Of TDerived)(ImmutableArray(Of TDerived).Builder)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.AddRange<TDerived>(System.Collections.Immutable.ImmutableArray<TDerived>.Builder)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.AddRange(Of TDerived)(System.Collections.Immutable.ImmutableArray(Of TDerived).Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 366
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified items to the end of the array.
  syntax:
    content: 'public void AddRange<TDerived>(ImmutableArray<TDerived>.Builder items)where TDerived : T'
    content.vb: Public Sub AddRange(Of TDerived As T)(items As ImmutableArray(Of TDerived).Builder)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TDerived}}.Builder
      description: The items.
    typeParameters:
    - id: TDerived
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 377
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified element.
  syntax:
    content: public bool Remove(T element)
    content.vb: Public Function Remove(element As T) As Boolean
    parameters:
    - id: element
      type: '{T}'
      description: The element.
    return:
      type: System.Boolean
      description: A value indicating whether the specified element was found and removed from the collection.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: RemoveAt(Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.RemoveAt(System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 393
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the [System.Collections.Generic.IList`1]() item at the specified index.
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Contains(T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 412
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the [System.Collections.Generic.ICollection`1]() contains a specific value.
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
    return:
      type: System.Boolean
      description: true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.ToArray
  id: ToArray
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ToArray()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.ToArray()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 420
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new array with the current contents of this Builder.
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 437
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Copies the current contents to the specified array.
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The array to copy to.
    - id: index
      type: System.Int32
      description: The starting index of the target array.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: IndexOf(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.IndexOf(T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.IndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 464
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines the index of a specific item in the [System.Collections.Generic.IList`1]().
  syntax:
    content: public int IndexOf(T item)
    content.vb: Public Function IndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
    return:
      type: System.Int32
      description: The index of <paramref name="item" /> if found in the list; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: IndexOf(T, Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.IndexOf(T, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.IndexOf(T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 476
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the array for the specified item.
  syntax:
    content: public int IndexOf(T item, int startIndex)
    content.vb: Public Function IndexOf(item As T, startIndex As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The item to search for.
    - id: startIndex
      type: System.Int32
      description: The index at which to begin the search.
    return:
      type: System.Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: IndexOf(T, Int32, Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.IndexOf(T, System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.IndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 489
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the array for the specified item.
  syntax:
    content: public int IndexOf(T item, int startIndex, int count)
    content.vb: Public Function IndexOf(item As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The item to search for.
    - id: startIndex
      type: System.Int32
      description: The index at which to begin the search.
    - id: count
      type: System.Int32
      description: The number of elements to search.
    return:
      type: System.Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  name.vb: IndexOf(T, Int32, Int32, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 503
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the array for the specified item.
  syntax:
    content: public int IndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)
    content.vb: Public Function IndexOf(item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The item to search for.
    - id: startIndex
      type: System.Int32
      description: The index at which to begin the search.
    - id: count
      type: System.Int32
      description: The number of elements to search.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: LastIndexOf(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.LastIndexOf(T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.LastIndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 539
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the array for the specified item in reverse.
  syntax:
    content: public int LastIndexOf(T item)
    content.vb: Public Function LastIndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The item to search for.
    return:
      type: System.Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: LastIndexOf(T, Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.LastIndexOf(T, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.LastIndexOf(T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 556
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the array for the specified item in reverse.
  syntax:
    content: public int LastIndexOf(T item, int startIndex)
    content.vb: Public Function LastIndexOf(item As T, startIndex As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The item to search for.
    - id: startIndex
      type: System.Int32
      description: The index at which to begin the search.
    return:
      type: System.Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.LastIndexOf(T, System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.LastIndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 576
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the array for the specified item in reverse.
  syntax:
    content: public int LastIndexOf(T item, int startIndex, int count)
    content.vb: Public Function LastIndexOf(item As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The item to search for.
    - id: startIndex
      type: System.Int32
      description: The index at which to begin the search.
    - id: count
      type: System.Int32
      description: The number of elements to search.
    return:
      type: System.Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  name.vb: LastIndexOf(T, Int32, Int32, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 590
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the array for the specified item in reverse.
  syntax:
    content: public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)
    content.vb: Public Function LastIndexOf(item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The item to search for.
    - id: startIndex
      type: System.Int32
      description: The index at which to begin the search.
    - id: count
      type: System.Int32
      description: The number of elements to search.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Reverse
  id: Reverse
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Reverse()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Reverse()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Reverse()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 624
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Reverses the order of elements in the collection.
  syntax:
    content: public void Reverse()
    content.vb: Public Sub Reverse
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Sort
  id: Sort
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Sort()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Sort()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Sort()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 646
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Sorts the array.
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Sort(IComparer<T>)
  name.vb: Sort(IComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Sort(System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Sort(System.Collections.Generic.IComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 658
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Sorts the array.
  syntax:
    content: public void Sort(IComparer<T> comparer)
    content.vb: Public Sub Sort(comparer As IComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer to use in sorting. If <c>null</c>, the default comparer is used.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: Sort(Int32, Int32, IComparer<T>)
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 672
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Sorts the array.
  syntax:
    content: public void Sort(int index, int count, IComparer<T> comparer)
    content.vb: Public Sub Sort(index As Integer, count As Integer, comparer As IComparer(Of T))
    parameters:
    - id: index
      type: System.Int32
      description: The index of the first element to consider in the sort.
    - id: count
      type: System.Int32
      description: The number of elements to include in the sort.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer to use in sorting. If <c>null</c>, the default comparer is used.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 689
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 701
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator.
- uid: System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 710
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An enumerator.
references:
- uid: System.Collections.Immutable.ImmutableArray`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<T>
  name.vb: ImmutableArray(Of T)
  fullName: System.Collections.Immutable.ImmutableArray<T>
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  type: Struct
  summary: A readonly array with O(1) indexable lookup time.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.IndexOutOfRangeException
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<T>
  name.vb: ICollection(Of T)
  fullName: System.Collections.Generic.ICollection<T>
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  name.vb: IList(Of T)
  fullName: System.Collections.Generic.IList<T>
  fullName.vb: System.Collections.Generic.IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: '{TDerived}[]'
  isExternal: false
  name: TDerived[]
  name.vb: TDerived()
  fullName: TDerived[]
  fullName.vb: TDerived()
  spec.csharp:
  - name: TDerived
    fullName: TDerived
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TDerived
    fullName: TDerived
  - name: ()
    fullName: ()
- uid: System.Collections.Immutable.ImmutableArray{{TDerived}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<TDerived>
  name.vb: ImmutableArray(Of TDerived)
  fullName: System.Collections.Immutable.ImmutableArray<TDerived>
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TDerived)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: <
    fullName: <
  - name: TDerived
    fullName: TDerived
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    href: System.Collections.Immutable.ImmutableArray`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TDerived
    fullName: TDerived
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableArray`1.Builder
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ImmutableArray.Builder<>
  name.vb: ImmutableArray.Builder(Of )
  fullName: System.Collections.Immutable.ImmutableArray.Builder<>
  fullName.vb: System.Collections.Immutable.ImmutableArray.Builder(Of )
  type: Class
  summary: >-
    A writable array accessor that can be converted into an @'System.Collections.Immutable.ImmutableArray`1'

    instance without allocating memory.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableArray{{TDerived}}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  name: ImmutableArray.Builder<>
  name.vb: ImmutableArray.Builder(Of )
  fullName: System.Collections.Immutable.ImmutableArray.Builder<>
  fullName.vb: System.Collections.Immutable.ImmutableArray.Builder(Of )
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: ImmutableArray.Builder
    fullName: System.Collections.Immutable.ImmutableArray.Builder
    href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
