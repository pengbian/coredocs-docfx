items:
- uid: System.Linq.Queryable
  id: Queryable
  parent: System.Linq
  children:
  - System.Linq.Queryable.Aggregate``1(IQueryable{``0},Expression{System.Func{``0,``0,``0}})
  - System.Linq.Queryable.Aggregate``2(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}})
  - System.Linq.Queryable.Aggregate``3(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}},Expression{System.Func{``1,``2}})
  - System.Linq.Queryable.All``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Any``1(IQueryable{``0})
  - System.Linq.Queryable.Any``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Average(IQueryable{System.Decimal})
  - System.Linq.Queryable.Average(IQueryable{System.Double})
  - System.Linq.Queryable.Average(IQueryable{System.Int32})
  - System.Linq.Queryable.Average(IQueryable{System.Int64})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Average(IQueryable{System.Single})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Cast``1(IQueryable)
  - System.Linq.Queryable.Concat``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Contains``1(IQueryable{``0},``0)
  - System.Linq.Queryable.Contains``1(IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Count``1(IQueryable{``0})
  - System.Linq.Queryable.Count``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0})
  - System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0},``0)
  - System.Linq.Queryable.Distinct``1(IQueryable{``0})
  - System.Linq.Queryable.Distinct``1(IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.ElementAt``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.ElementAtOrDefault``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.First``1(IQueryable{``0})
  - System.Linq.Queryable.First``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0})
  - System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  - System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  - System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}})
  - System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Last``1(IQueryable{``0})
  - System.Linq.Queryable.Last``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LastOrDefault``1(IQueryable{``0})
  - System.Linq.Queryable.LastOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LongCount``1(IQueryable{``0})
  - System.Linq.Queryable.LongCount``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Max``1(IQueryable{``0})
  - System.Linq.Queryable.Max``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Min``1(IQueryable{``0})
  - System.Linq.Queryable.Min``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OfType``1(IQueryable)
  - System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Reverse``1(IQueryable{``0})
  - System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,``1}})
  - System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Single``1(IQueryable{``0})
  - System.Linq.Queryable.Single``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0})
  - System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Skip``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Sum(IQueryable{System.Decimal})
  - System.Linq.Queryable.Sum(IQueryable{System.Double})
  - System.Linq.Queryable.Sum(IQueryable{System.Int32})
  - System.Linq.Queryable.Sum(IQueryable{System.Int64})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Sum(IQueryable{System.Single})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Take``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Zip``3(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``1,``2}})
  href: System.Linq.Queryable.yml
  name: Queryable
  fullName: System.Linq.Queryable
  type: Class
  source:
    remote: &o0
      path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 10
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public class Queryable
    content.vb: Public Class Queryable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  id: AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  name.vb: AsQueryable(Of TElement)(IEnumerable(Of TElement))
  fullName: System.Linq.Queryable.AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  fullName.vb: System.Linq.Queryable.AsQueryable(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 12
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TElement> AsQueryable<TElement>(IEnumerable<TElement> source)
    content.vb: Public Shared Function AsQueryable(Of TElement)(source As IEnumerable(Of TElement)) As IQueryable(Of TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TElement}}
    typeParameters:
    - id: TElement
    return:
      type: IQueryable{{TElement}}
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  id: AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 21
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable AsQueryable(IEnumerable source)
    content.vb: Public Shared Function AsQueryable(source As IEnumerable) As IQueryable
    parameters:
    - id: source
      type: System.Collections.IEnumerable
    return:
      type: IQueryable
- uid: System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: Where``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.Where(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 33
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Where<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: Where``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32, Boolean>>)
  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32, Boolean)))
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.Where(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 49
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Where<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int, bool>> predicate)
    content.vb: Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Int32,System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.OfType``1(IQueryable)
  id: OfType``1(IQueryable)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: OfType<TResult>(IQueryable)
  name.vb: OfType(Of TResult)(IQueryable)
  fullName: System.Linq.Queryable.OfType<TResult>(IQueryable)
  fullName.vb: System.Linq.Queryable.OfType(Of TResult)(IQueryable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 65
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> OfType<TResult>(IQueryable source)
    content.vb: Public Shared Function OfType(Of TResult)(source As IQueryable) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable
    typeParameters:
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.Cast``1(IQueryable)
  id: Cast``1(IQueryable)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Cast<TResult>(IQueryable)
  name.vb: Cast(Of TResult)(IQueryable)
  fullName: System.Linq.Queryable.Cast<TResult>(IQueryable)
  fullName.vb: System.Linq.Queryable.Cast(Of TResult)(IQueryable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 78
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> Cast<TResult>(IQueryable source)
    content.vb: Public Shared Function Cast(Of TResult)(source As IQueryable) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable
    typeParameters:
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  id: Select``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Select<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)
  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName: System.Linq.Queryable.Select<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TResult>>)
  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 91
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> Select<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)
    content.vb: Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,``1}})
  id: Select``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Select<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, Int32, TResult>>)
  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32, TResult)))
  fullName: System.Linq.Queryable.Select<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32, TResult>>)
  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 107
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> Select<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, int, TResult>> selector)
    content.vb: Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Int32,{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 123
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, IEnumerable<TResult>>> selector)
    content.vb: Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, IEnumerable(Of TResult)))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, Int32, IEnumerable<TResult>>>)
  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult))))
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>)
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 139
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, int, IEnumerable<TResult>>> selector)
    content.vb: Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer, IEnumerable(Of TResult)))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<Func<TSource, Int32, IEnumerable<TCollection>>>, Expression<Func<TSource, TCollection, TResult>>)
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection))), Expression(Of Func(Of TSource, TCollection, TResult)))
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>, Expression<System.Func<TSource, TCollection, TResult>>)
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))), Expression(Of System.Func(Of TSource, TCollection, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 155
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(IQueryable<TSource> source, Expression<Func<TSource, int, IEnumerable<TCollection>>> collectionSelector, Expression<Func<TSource, TCollection, TResult>> resultSelector)
    content.vb: Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expression(Of Func(Of TSource, Integer, IEnumerable(Of TCollection))), resultSelector As Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: collectionSelector
      type: Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}
    - id: resultSelector
      type: Expression{System.Func{{TSource},{TCollection},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TCollection
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<Func<TSource, IEnumerable<TCollection>>>, Expression<Func<TSource, TCollection, TResult>>)
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), Expression(Of Func(Of TSource, TCollection, TResult)))
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>, Expression<System.Func<TSource, TCollection, TResult>>)
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))), Expression(Of System.Func(Of TSource, TCollection, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 174
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(IQueryable<TSource> source, Expression<Func<TSource, IEnumerable<TCollection>>> collectionSelector, Expression<Func<TSource, TCollection, TResult>> resultSelector)
    content.vb: Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), resultSelector As Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: collectionSelector
      type: Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}
    - id: resultSelector
      type: Expression{System.Func{{TSource},{TCollection},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TCollection
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}})
  id: Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, TInner, TResult>>)
  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), Expression(Of System.Func(Of TOuter, TKey)), Expression(Of System.Func(Of TInner, TKey)), Expression(Of System.Func(Of TOuter, TInner, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 200
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector)
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: IQueryable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: Expression{System.Func{{TOuter},{TKey}}}
    - id: innerKeySelector
      type: Expression{System.Func{{TInner},{TKey}}}
    - id: resultSelector
      type: Expression{System.Func{{TOuter},{TInner},{TResult}}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), Expression(Of System.Func(Of TOuter, TKey)), Expression(Of System.Func(Of TInner, TKey)), Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 231
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: IQueryable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: Expression{System.Func{{TOuter},{TKey}}}
    - id: innerKeySelector
      type: Expression{System.Func{{TInner},{TKey}}}
    - id: resultSelector
      type: Expression{System.Func{{TOuter},{TInner},{TResult}}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  id: GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), Expression(Of System.Func(Of TOuter, TKey)), Expression(Of System.Func(Of TInner, TKey)), Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 264
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector)
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: IQueryable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: Expression{System.Func{{TOuter},{TKey}}}
    - id: innerKeySelector
      type: Expression{System.Func{{TInner},{TKey}}}
    - id: resultSelector
      type: Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), Expression(Of System.Func(Of TOuter, TKey)), Expression(Of System.Func(Of TInner, TKey)), Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 294
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: IQueryable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: Expression{System.Func{{TOuter},{TKey}}}
    - id: innerKeySelector
      type: Expression{System.Func{{TInner},{TKey}}}
    - id: resultSelector
      type: Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  id: OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)
  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 326
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    content.vb: Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 342
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  id: OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)
  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 359
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    content.vb: Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 375
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  id: ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>)
  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 392
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    content.vb: Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IOrderedQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 408
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IOrderedQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  id: ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>)
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 425
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    content.vb: Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IOrderedQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 441
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: IOrderedQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IOrderedQueryable{{TSource}}
- uid: System.Linq.Queryable.Take``1(IQueryable{``0},System.Int32)
  id: Take``1(IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Take<TSource>(IQueryable<TSource>, Int32)
  name.vb: Take(Of TSource)(IQueryable(Of TSource), Int32)
  fullName: System.Linq.Queryable.Take<TSource>(IQueryable<TSource>, System.Int32)
  fullName.vb: System.Linq.Queryable.Take(Of TSource)(IQueryable(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 458
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Take<TSource>(IQueryable<TSource> source, int count)
    content.vb: Public Shared Function Take(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: count
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 472
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> TakeWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32, Boolean>>)
  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32, Boolean)))
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 488
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> TakeWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int, bool>> predicate)
    content.vb: Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Int32,System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Skip``1(IQueryable{``0},System.Int32)
  id: Skip``1(IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Skip<TSource>(IQueryable<TSource>, Int32)
  name.vb: Skip(Of TSource)(IQueryable(Of TSource), Int32)
  fullName: System.Linq.Queryable.Skip<TSource>(IQueryable<TSource>, System.Int32)
  fullName.vb: System.Linq.Queryable.Skip(Of TSource)(IQueryable(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 504
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Skip<TSource>(IQueryable<TSource> source, int count)
    content.vb: Public Shared Function Skip(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: count
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 518
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> SkipWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32, Boolean>>)
  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32, Boolean)))
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 534
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> SkipWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int, bool>> predicate)
    content.vb: Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Int32,System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  id: GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)
  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 550
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IQueryable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IQueryable{IGrouping{{TKey},{TSource}}}
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}})
  id: GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>)
  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TSource, TElement)))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), Expression(Of System.Func(Of TSource, TElement)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 566
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement))) As IQueryable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: elementSelector
      type: Expression{System.Func{{TSource},{TElement}}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: IQueryable{IGrouping{{TKey},{TElement}}}
- uid: System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 585
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: IQueryable{IGrouping{{TKey},{TSource}}}
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TSource, TElement)), IEqualityComparer(Of TKey))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), Expression(Of System.Func(Of TSource, TElement)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 602
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: elementSelector
      type: Expression{System.Func{{TSource},{TElement}}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: IQueryable{IGrouping{{TKey},{TElement}}}
- uid: System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  id: GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>)
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TSource, TElement)), Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), Expression(Of System.Func(Of TSource, TElement)), Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 622
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector, Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: elementSelector
      type: Expression{System.Func{{TSource},{TElement}}}
    - id: resultSelector
      type: Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  id: GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 644
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: resultSelector
      type: Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 663
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: resultSelector
      type: Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TSource, TElement)), Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), IEqualityComparer(Of TKey))
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TKey)), Expression(Of System.Func(Of TSource, TElement)), Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 683
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector, Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: keySelector
      type: Expression{System.Func{{TSource},{TKey}}}
    - id: elementSelector
      type: Expression{System.Func{{TSource},{TElement}}}
    - id: resultSelector
      type: Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.Distinct``1(IQueryable{``0})
  id: Distinct``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Distinct<TSource>(IQueryable<TSource>)
  name.vb: Distinct(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 706
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Distinct<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Distinct``1(IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)
  name.vb: Distinct(Of TSource)(IQueryable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 719
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Distinct<TSource>(IQueryable<TSource> source, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Concat``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  name.vb: Concat(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.Queryable.Concat<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.Queryable.Concat(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 733
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Concat<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: Public Shared Function Concat(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Zip``3(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``1,``2}})
  id: Zip``3(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst, TSecond, TResult>>)
  name.vb: Zip(Of TFirst, TSecond, TResult)(IQueryable(Of TFirst), IEnumerable(Of TSecond), Expression(Of Func(Of TFirst, TSecond, TResult)))
  fullName: System.Linq.Queryable.Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, Expression<System.Func<TFirst, TSecond, TResult>>)
  fullName.vb: System.Linq.Queryable.Zip(Of TFirst, TSecond, TResult)(IQueryable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), Expression(Of System.Func(Of TFirst, TSecond, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 749
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TResult> Zip<TFirst, TSecond, TResult>(IQueryable<TFirst> source1, IEnumerable<TSecond> source2, Expression<Func<TFirst, TSecond, TResult>> resultSelector)
    content.vb: Public Shared Function Zip(Of TFirst, TSecond, TResult)(source1 As IQueryable(Of TFirst), source2 As IEnumerable(Of TSecond), resultSelector As Expression(Of Func(Of TFirst, TSecond, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source1
      type: IQueryable{{TFirst}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSecond}}
    - id: resultSelector
      type: Expression{System.Func{{TFirst},{TSecond},{TResult}}}
    typeParameters:
    - id: TFirst
    - id: TSecond
    - id: TResult
    return:
      type: IQueryable{{TResult}}
- uid: System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  name.vb: Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.Queryable.Union(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 768
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Union<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.Queryable.Union(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 784
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Union<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 805
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Intersect<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 821
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Intersect<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  name.vb: Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.Queryable.Except(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 842
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Except<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.Queryable.Except(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 858
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Except<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.First``1(IQueryable{``0})
  id: First``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: First<TSource>(IQueryable<TSource>)
  name.vb: First(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.First(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 879
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource First<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function First(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.First``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: First``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: First<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: First(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.First(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 892
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource First<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function First(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0})
  id: FirstOrDefault``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: FirstOrDefault<TSource>(IQueryable<TSource>)
  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 908
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource FirstOrDefault<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: FirstOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 921
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource FirstOrDefault<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.Last``1(IQueryable{``0})
  id: Last``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Last<TSource>(IQueryable<TSource>)
  name.vb: Last(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Last(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 937
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource Last<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.Last``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: Last``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Last<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: Last(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.Last(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 950
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource Last<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.LastOrDefault``1(IQueryable{``0})
  id: LastOrDefault``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: LastOrDefault<TSource>(IQueryable<TSource>)
  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 966
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource LastOrDefault<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.LastOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: LastOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 979
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource LastOrDefault<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.Single``1(IQueryable{``0})
  id: Single``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Single<TSource>(IQueryable<TSource>)
  name.vb: Single(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Single(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 995
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource Single<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.Single``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: Single``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Single<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: Single(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.Single(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1008
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource Single<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0})
  id: SingleOrDefault``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SingleOrDefault<TSource>(IQueryable<TSource>)
  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1024
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource SingleOrDefault<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: SingleOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1037
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource SingleOrDefault<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.ElementAt``1(IQueryable{``0},System.Int32)
  id: ElementAt``1(IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: ElementAt<TSource>(IQueryable<TSource>, Int32)
  name.vb: ElementAt(Of TSource)(IQueryable(Of TSource), Int32)
  fullName: System.Linq.Queryable.ElementAt<TSource>(IQueryable<TSource>, System.Int32)
  fullName.vb: System.Linq.Queryable.ElementAt(Of TSource)(IQueryable(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1053
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource ElementAt<TSource>(IQueryable<TSource> source, int index)
    content.vb: Public Shared Function ElementAt(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.ElementAtOrDefault``1(IQueryable{``0},System.Int32)
  id: ElementAtOrDefault``1(IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)
  name.vb: ElementAtOrDefault(Of TSource)(IQueryable(Of TSource), Int32)
  fullName: System.Linq.Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, System.Int32)
  fullName.vb: System.Linq.Queryable.ElementAtOrDefault(Of TSource)(IQueryable(Of TSource), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1069
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(IQueryable<TSource> source, int index)
    content.vb: Public Shared Function ElementAtOrDefault(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0})
  id: DefaultIfEmpty``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)
  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1083
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0},``0)
  id: DefaultIfEmpty``1(IQueryable{``0},``0)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)
  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource), TSource)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)
  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(IQueryable(Of TSource), TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1096
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(IQueryable<TSource> source, TSource defaultValue)
    content.vb: Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource), defaultValue As TSource) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: defaultValue
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.Contains``1(IQueryable{``0},``0)
  id: Contains``1(IQueryable{``0},``0)
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Contains<TSource>(IQueryable<TSource>, TSource)
  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource)
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>, TSource)
  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(IQueryable(Of TSource), TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1110
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static bool Contains<TSource>(IQueryable<TSource> source, TSource item)
    content.vb: Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource) As Boolean
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: item
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
- uid: System.Linq.Queryable.Contains``1(IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)
  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(IQueryable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1124
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static bool Contains<TSource>(IQueryable<TSource> source, TSource item, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: item
      type: '{TSource}'
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
- uid: System.Linq.Queryable.Reverse``1(IQueryable{``0})
  id: Reverse``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Reverse<TSource>(IQueryable<TSource>)
  name.vb: Reverse(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Reverse<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Reverse(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1139
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static IQueryable<TSource> Reverse<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Reverse(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: IQueryable{{TSource}}
- uid: System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1152
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
- uid: System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1168
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source1
      type: IQueryable{{TSource}}
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
- uid: System.Linq.Queryable.Any``1(IQueryable{``0})
  id: Any``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Any<TSource>(IQueryable<TSource>)
  name.vb: Any(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Any(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1189
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static bool Any<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource)) As Boolean
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
- uid: System.Linq.Queryable.Any``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: Any``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Any<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: Any(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.Any(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1202
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static bool Any<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
- uid: System.Linq.Queryable.All``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: All``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: All<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: All(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.All<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.All(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1218
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static bool All<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function All(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
- uid: System.Linq.Queryable.Count``1(IQueryable{``0})
  id: Count``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Count<TSource>(IQueryable<TSource>)
  name.vb: Count(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Count(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1234
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static int Count<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource)) As Integer
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
- uid: System.Linq.Queryable.Count``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: Count``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Count<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: Count(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.Count(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1247
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static int Count<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Integer
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
- uid: System.Linq.Queryable.LongCount``1(IQueryable{``0})
  id: LongCount``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: LongCount<TSource>(IQueryable<TSource>)
  name.vb: LongCount(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1263
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static long LongCount<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource)) As Long
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
- uid: System.Linq.Queryable.LongCount``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  id: LongCount``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)
  name.vb: LongCount(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1276
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static long LongCount<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    content.vb: Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Long
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: predicate
      type: Expression{System.Func{{TSource},System.Boolean}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
- uid: System.Linq.Queryable.Min``1(IQueryable{``0})
  id: Min``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Min<TSource>(IQueryable<TSource>)
  name.vb: Min(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Min<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Min(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1292
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource Min<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Min(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.Min``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  id: Min``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Min<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)
  name.vb: Min(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName: System.Linq.Queryable.Min<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TResult>>)
  fullName.vb: System.Linq.Queryable.Min(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1305
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TResult Min<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)
    content.vb: Public Shared Function Min(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: '{TResult}'
- uid: System.Linq.Queryable.Max``1(IQueryable{``0})
  id: Max``1(IQueryable{``0})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Max<TSource>(IQueryable<TSource>)
  name.vb: Max(Of TSource)(IQueryable(Of TSource))
  fullName: System.Linq.Queryable.Max<TSource>(IQueryable<TSource>)
  fullName.vb: System.Linq.Queryable.Max(Of TSource)(IQueryable(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1321
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource Max<TSource>(IQueryable<TSource> source)
    content.vb: Public Shared Function Max(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.Max``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  id: Max``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Max<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)
  name.vb: Max(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName: System.Linq.Queryable.Max<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TResult>>)
  fullName.vb: System.Linq.Queryable.Max(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1334
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TResult Max<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)
    content.vb: Public Shared Function Max(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: '{TResult}'
- uid: System.Linq.Queryable.Sum(IQueryable{System.Int32})
  id: Sum(IQueryable{System.Int32})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Int32>)
  name.vb: Sum(IQueryable(Of Int32))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Int32>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1350
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static int Sum(IQueryable<int> source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Integer)) As Integer
    parameters:
    - id: source
      type: IQueryable{System.Int32}
    return:
      type: System.Int32
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int32}})
  id: Sum(IQueryable{System.Nullable{System.Int32}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Nullable<Int32>>)
  name.vb: Sum(IQueryable(Of Nullable(Of Int32)))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1363
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static int ? Sum(IQueryable<int ? > source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Int32}}
    return:
      type: System.Nullable{System.Int32}
- uid: System.Linq.Queryable.Sum(IQueryable{System.Int64})
  id: Sum(IQueryable{System.Int64})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Int64>)
  name.vb: Sum(IQueryable(Of Int64))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Int64>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1376
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static long Sum(IQueryable<long> source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Long)) As Long
    parameters:
    - id: source
      type: IQueryable{System.Int64}
    return:
      type: System.Int64
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int64}})
  id: Sum(IQueryable{System.Nullable{System.Int64}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Nullable<Int64>>)
  name.vb: Sum(IQueryable(Of Nullable(Of Int64)))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1389
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static long ? Sum(IQueryable<long ? > source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Long?)) As Long?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Int64}}
    return:
      type: System.Nullable{System.Int64}
- uid: System.Linq.Queryable.Sum(IQueryable{System.Single})
  id: Sum(IQueryable{System.Single})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Single>)
  name.vb: Sum(IQueryable(Of Single))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Single>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1402
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float Sum(IQueryable<float> source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Single)) As Single
    parameters:
    - id: source
      type: IQueryable{System.Single}
    return:
      type: System.Single
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Single}})
  id: Sum(IQueryable{System.Nullable{System.Single}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Nullable<Single>>)
  name.vb: Sum(IQueryable(Of Nullable(Of Single)))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Nullable<System.Single>>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1415
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float ? Sum(IQueryable<float ? > source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Single?)) As Single?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Single}}
    return:
      type: System.Nullable{System.Single}
- uid: System.Linq.Queryable.Sum(IQueryable{System.Double})
  id: Sum(IQueryable{System.Double})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Double>)
  name.vb: Sum(IQueryable(Of Double))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Double>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1428
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Sum(IQueryable<double> source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Double)) As Double
    parameters:
    - id: source
      type: IQueryable{System.Double}
    return:
      type: System.Double
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Double}})
  id: Sum(IQueryable{System.Nullable{System.Double}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Nullable<Double>>)
  name.vb: Sum(IQueryable(Of Nullable(Of Double)))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Nullable<System.Double>>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1441
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Sum(IQueryable<double ? > source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Double?)) As Double?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Sum(IQueryable{System.Decimal})
  id: Sum(IQueryable{System.Decimal})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Decimal>)
  name.vb: Sum(IQueryable(Of Decimal))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Decimal>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1454
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal Sum(IQueryable<decimal> source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: IQueryable{System.Decimal}
    return:
      type: System.Decimal
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Decimal}})
  id: Sum(IQueryable{System.Nullable{System.Decimal}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<Nullable<Decimal>>)
  name.vb: Sum(IQueryable(Of Nullable(Of Decimal)))
  fullName: System.Linq.Queryable.Sum(IQueryable<System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.Queryable.Sum(IQueryable(Of System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1467
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal ? Sum(IQueryable<decimal ? > source)
    content.vb: Public Shared Function Sum(source As IQueryable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Decimal}}
    return:
      type: System.Nullable{System.Decimal}
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1480
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static int Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Integer
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1496
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static int ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer?))) As Integer?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int64>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1512
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static long Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Long
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1528
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static long ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long?))) As Long?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Single>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1544
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Single
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1560
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single?))) As Single?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Single}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Double>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1576
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Double
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1592
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double?))) As Double?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Double}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Decimal>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1608
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Decimal
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1624
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector)
    content.vb: Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?))) As Decimal?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
- uid: System.Linq.Queryable.Average(IQueryable{System.Int32})
  id: Average(IQueryable{System.Int32})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Int32>)
  name.vb: Average(IQueryable(Of Int32))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Int32>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1640
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Average(IQueryable<int> source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Integer)) As Double
    parameters:
    - id: source
      type: IQueryable{System.Int32}
    return:
      type: System.Double
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int32}})
  id: Average(IQueryable{System.Nullable{System.Int32}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Nullable<Int32>>)
  name.vb: Average(IQueryable(Of Nullable(Of Int32)))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Nullable<System.Int32>>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Nullable(Of System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1653
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Average(IQueryable<int ? > source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Integer?)) As Double?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Int32}}
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Average(IQueryable{System.Int64})
  id: Average(IQueryable{System.Int64})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Int64>)
  name.vb: Average(IQueryable(Of Int64))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Int64>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1666
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Average(IQueryable<long> source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Long)) As Double
    parameters:
    - id: source
      type: IQueryable{System.Int64}
    return:
      type: System.Double
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int64}})
  id: Average(IQueryable{System.Nullable{System.Int64}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Nullable<Int64>>)
  name.vb: Average(IQueryable(Of Nullable(Of Int64)))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Nullable<System.Int64>>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Nullable(Of System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1679
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Average(IQueryable<long ? > source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Long?)) As Double?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Int64}}
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Average(IQueryable{System.Single})
  id: Average(IQueryable{System.Single})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Single>)
  name.vb: Average(IQueryable(Of Single))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Single>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Single))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1692
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float Average(IQueryable<float> source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Single)) As Single
    parameters:
    - id: source
      type: IQueryable{System.Single}
    return:
      type: System.Single
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Single}})
  id: Average(IQueryable{System.Nullable{System.Single}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Nullable<Single>>)
  name.vb: Average(IQueryable(Of Nullable(Of Single)))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Nullable<System.Single>>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Nullable(Of System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1705
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float ? Average(IQueryable<float ? > source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Single?)) As Single?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Single}}
    return:
      type: System.Nullable{System.Single}
- uid: System.Linq.Queryable.Average(IQueryable{System.Double})
  id: Average(IQueryable{System.Double})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Double>)
  name.vb: Average(IQueryable(Of Double))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Double>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Double))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1718
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Average(IQueryable<double> source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Double)) As Double
    parameters:
    - id: source
      type: IQueryable{System.Double}
    return:
      type: System.Double
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Double}})
  id: Average(IQueryable{System.Nullable{System.Double}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Nullable<Double>>)
  name.vb: Average(IQueryable(Of Nullable(Of Double)))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Nullable<System.Double>>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Nullable(Of System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1731
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Average(IQueryable<double ? > source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Double?)) As Double?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Average(IQueryable{System.Decimal})
  id: Average(IQueryable{System.Decimal})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Decimal>)
  name.vb: Average(IQueryable(Of Decimal))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Decimal>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Decimal))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1744
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal Average(IQueryable<decimal> source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: IQueryable{System.Decimal}
    return:
      type: System.Decimal
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Decimal}})
  id: Average(IQueryable{System.Nullable{System.Decimal}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<Nullable<Decimal>>)
  name.vb: Average(IQueryable(Of Nullable(Of Decimal)))
  fullName: System.Linq.Queryable.Average(IQueryable<System.Nullable<System.Decimal>>)
  fullName.vb: System.Linq.Queryable.Average(IQueryable(Of System.Nullable(Of System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1757
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal ? Average(IQueryable<decimal ? > source)
    content.vb: Public Shared Function Average(source As IQueryable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: IQueryable{System.Nullable{System.Decimal}}
    return:
      type: System.Nullable{System.Decimal}
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int32>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int32)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1770
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Double
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1786
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer?))) As Double?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Single>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Single)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1802
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Single
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1818
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static float ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single?))) As Single?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Single}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Int64>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Int64)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1834
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Double
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1850
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long?))) As Double?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Double>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Double)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1866
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Double
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1882
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static double ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double?))) As Double?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Double}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Decimal>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Decimal)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1898
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Decimal
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1914
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static decimal ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector)
    content.vb: Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?))) As Decimal?
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: selector
      type: Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
- uid: System.Linq.Queryable.Aggregate``1(IQueryable{``0},Expression{System.Func{``0,``0,``0}})
  id: Aggregate``1(IQueryable{``0},Expression{System.Func{``0,``0,``0}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource, TSource, TSource>>)
  name.vb: Aggregate(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TSource, TSource)))
  fullName: System.Linq.Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, TSource, TSource>>)
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource)(IQueryable(Of TSource), Expression(Of System.Func(Of TSource, TSource, TSource)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1930
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TSource Aggregate<TSource>(IQueryable<TSource> source, Expression<Func<TSource, TSource, TSource>> func)
    content.vb: Public Shared Function Aggregate(Of TSource)(source As IQueryable(Of TSource), func As Expression(Of Func(Of TSource, TSource, TSource))) As TSource
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: func
      type: Expression{System.Func{{TSource},{TSource},{TSource}}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
- uid: System.Linq.Queryable.Aggregate``2(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}})
  id: Aggregate``2(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate, TSource, TAccumulate>>)
  name.vb: Aggregate(Of TSource, TAccumulate)(IQueryable(Of TSource), TAccumulate, Expression(Of Func(Of TAccumulate, TSource, TAccumulate)))
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<System.Func<TAccumulate, TSource, TAccumulate>>)
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate)(IQueryable(Of TSource), TAccumulate, Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1946
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(IQueryable<TSource> source, TAccumulate seed, Expression<Func<TAccumulate, TSource, TAccumulate>> func)
    content.vb: Public Shared Function Aggregate(Of TSource, TAccumulate)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expression(Of Func(Of TAccumulate, TSource, TAccumulate))) As TAccumulate
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    return:
      type: '{TAccumulate}'
- uid: System.Linq.Queryable.Aggregate``3(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}},Expression{System.Func{``1,``2}})
  id: Aggregate``3(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}},Expression{System.Func{``1,``2}})
  parent: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate, TSource, TAccumulate>>, Expression<Func<TAccumulate, TResult>>)
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(IQueryable(Of TSource), TAccumulate, Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), Expression(Of Func(Of TAccumulate, TResult)))
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expression<System.Func<TAccumulate, TSource, TAccumulate>>, Expression<System.Func<TAccumulate, TResult>>)
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate, TResult)(IQueryable(Of TSource), TAccumulate, Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)), Expression(Of System.Func(Of TAccumulate, TResult)))
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1963
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource> source, TAccumulate seed, Expression<Func<TAccumulate, TSource, TAccumulate>> func, Expression<Func<TAccumulate, TResult>> selector)
    content.vb: Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), selector As Expression(Of Func(Of TAccumulate, TResult))) As TResult
    parameters:
    - id: source
      type: IQueryable{{TSource}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
    - id: selector
      type: Expression{System.Func{{TAccumulate},{TResult}}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    - id: TResult
    return:
      type: '{TResult}'
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  name.vb: IEnumerable(Of TElement)
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: IQueryable{{TElement}}
  definition: IQueryable`1
  name: IQueryable<TElement>
  name.vb: IQueryable(Of TElement)
  fullName: IQueryable<TElement>
  fullName.vb: IQueryable(Of TElement)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: IQueryable`1
  isExternal: true
  name: IQueryable<>
  name.vb: IQueryable(Of )
  fullName: IQueryable<>
  fullName.vb: IQueryable(Of )
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: IQueryable
  isExternal: true
  name: IQueryable
  fullName: IQueryable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: IQueryable{{TSource}}
  definition: IQueryable`1
  name: IQueryable<TSource>
  name.vb: IQueryable(Of TSource)
  fullName: IQueryable<TSource>
  fullName.vb: IQueryable(Of TSource)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Boolean}}
  definition: Expression`1
  name: Expression<Func<TSource, Boolean>>
  name.vb: Expression(Of Func(Of TSource, Boolean))
  fullName: Expression<System.Func<TSource, System.Boolean>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression`1
  isExternal: true
  name: Expression<>
  name.vb: Expression(Of )
  fullName: Expression<>
  fullName.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Int32,System.Boolean}}
  definition: Expression`1
  name: Expression<Func<TSource, Int32, Boolean>>
  name.vb: Expression(Of Func(Of TSource, Int32, Boolean))
  fullName: Expression<System.Func<TSource, System.Int32, System.Boolean>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Int32, System.Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: IQueryable{{TResult}}
  definition: IQueryable`1
  name: IQueryable<TResult>
  name.vb: IQueryable(Of TResult)
  fullName: IQueryable<TResult>
  fullName.vb: IQueryable(Of TResult)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TSource, TResult>>
  name.vb: Expression(Of Func(Of TSource, TResult))
  fullName: Expression<System.Func<TSource, TResult>>
  fullName.vb: Expression(Of System.Func(Of TSource, TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Int32,{TResult}}}
  definition: Expression`1
  name: Expression<Func<TSource, Int32, TResult>>
  name.vb: Expression(Of Func(Of TSource, Int32, TResult))
  fullName: Expression<System.Func<TSource, System.Int32, TResult>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Int32, TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
  definition: Expression`1
  name: Expression<Func<TSource, IEnumerable<TResult>>>
  name.vb: Expression(Of Func(Of TSource, IEnumerable(Of TResult)))
  fullName: Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}
  definition: Expression`1
  name: Expression<Func<TSource, Int32, IEnumerable<TResult>>>
  name.vb: Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult)))
  fullName: Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}
  definition: Expression`1
  name: Expression<Func<TSource, Int32, IEnumerable<TCollection>>>
  name.vb: Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection)))
  fullName: Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},{TCollection},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TSource, TCollection, TResult>>
  name.vb: Expression(Of Func(Of TSource, TCollection, TResult))
  fullName: Expression<System.Func<TSource, TCollection, TResult>>
  fullName.vb: Expression(Of System.Func(Of TSource, TCollection, TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}
  definition: Expression`1
  name: Expression<Func<TSource, IEnumerable<TCollection>>>
  name.vb: Expression(Of Func(Of TSource, IEnumerable(Of TCollection)))
  fullName: Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: IQueryable{{TOuter}}
  definition: IQueryable`1
  name: IQueryable<TOuter>
  name.vb: IQueryable(Of TOuter)
  fullName: IQueryable<TOuter>
  fullName.vb: IQueryable(Of TOuter)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TInner>
  name.vb: IEnumerable(Of TInner)
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: Expression{System.Func{{TOuter},{TKey}}}
  definition: Expression`1
  name: Expression<Func<TOuter, TKey>>
  name.vb: Expression(Of Func(Of TOuter, TKey))
  fullName: Expression<System.Func<TOuter, TKey>>
  fullName.vb: Expression(Of System.Func(Of TOuter, TKey))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TInner},{TKey}}}
  definition: Expression`1
  name: Expression<Func<TInner, TKey>>
  name.vb: Expression(Of Func(Of TInner, TKey))
  fullName: Expression<System.Func<TInner, TKey>>
  fullName.vb: Expression(Of System.Func(Of TInner, TKey))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TOuter},{TInner},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TOuter, TInner, TResult>>
  name.vb: Expression(Of Func(Of TOuter, TInner, TResult))
  fullName: Expression<System.Func<TOuter, TInner, TResult>>
  fullName.vb: Expression(Of System.Func(Of TOuter, TInner, TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  name.vb: IEqualityComparer(Of TKey)
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
  name.vb: Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))
  fullName: Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>
  fullName.vb: Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},{TKey}}}
  definition: Expression`1
  name: Expression<Func<TSource, TKey>>
  name.vb: Expression(Of Func(Of TSource, TKey))
  fullName: Expression<System.Func<TSource, TKey>>
  fullName.vb: Expression(Of System.Func(Of TSource, TKey))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: IOrderedQueryable{{TSource}}
  definition: IOrderedQueryable`1
  name: IOrderedQueryable<TSource>
  name.vb: IOrderedQueryable(Of TSource)
  fullName: IOrderedQueryable<TSource>
  fullName.vb: IOrderedQueryable(Of TSource)
  spec.csharp:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<>
  name.vb: IOrderedQueryable(Of )
  fullName: IOrderedQueryable<>
  fullName.vb: IOrderedQueryable(Of )
  spec.csharp:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  name.vb: IComparer(Of TKey)
  fullName: System.Collections.Generic.IComparer<TKey>
  fullName.vb: System.Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: IQueryable{IGrouping{{TKey},{TSource}}}
  definition: IQueryable`1
  name: IQueryable<IGrouping<TKey, TSource>>
  name.vb: IQueryable(Of IGrouping(Of TKey, TSource))
  fullName: IQueryable<IGrouping<TKey, TSource>>
  fullName.vb: IQueryable(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},{TElement}}}
  definition: Expression`1
  name: Expression<Func<TSource, TElement>>
  name.vb: Expression(Of Func(Of TSource, TElement))
  fullName: Expression<System.Func<TSource, TElement>>
  fullName.vb: Expression(Of System.Func(Of TSource, TElement))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: IQueryable{IGrouping{{TKey},{TElement}}}
  definition: IQueryable`1
  name: IQueryable<IGrouping<TKey, TElement>>
  name.vb: IQueryable(Of IGrouping(Of TKey, TElement))
  fullName: IQueryable<IGrouping<TKey, TElement>>
  fullName.vb: IQueryable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: IGrouping`2
    name: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TKey, IEnumerable<TElement>, TResult>>
  name.vb: Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))
  fullName: Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>
  fullName.vb: Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TKey, IEnumerable<TSource>, TResult>>
  name.vb: Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))
  fullName: Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>
  fullName.vb: Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  name.vb: IEqualityComparer(Of TSource)
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  name.vb: IEnumerable(Of TSource)
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: IQueryable{{TFirst}}
  definition: IQueryable`1
  name: IQueryable<TFirst>
  name.vb: IQueryable(Of TFirst)
  fullName: IQueryable<TFirst>
  fullName.vb: IQueryable(Of TFirst)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSecond>
  name.vb: IEnumerable(Of TSecond)
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: Expression{System.Func{{TFirst},{TSecond},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TFirst, TSecond, TResult>>
  name.vb: Expression(Of Func(Of TFirst, TSecond, TResult))
  fullName: Expression<System.Func<TFirst, TSecond, TResult>>
  fullName.vb: Expression(Of System.Func(Of TFirst, TSecond, TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: '{TSource}'
  isExternal: false
  name: TSource
  fullName: TSource
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  fullName: System.Int64
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: IQueryable{System.Int32}
  definition: IQueryable`1
  name: IQueryable<Int32>
  name.vb: IQueryable(Of Int32)
  fullName: IQueryable<System.Int32>
  fullName.vb: IQueryable(Of System.Int32)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: IQueryable{System.Nullable{System.Int32}}
  definition: IQueryable`1
  name: IQueryable<Nullable<Int32>>
  name.vb: IQueryable(Of Nullable(Of Int32))
  fullName: IQueryable<System.Nullable<System.Int32>>
  fullName.vb: IQueryable(Of System.Nullable(Of System.Int32))
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  name.vb: Nullable(Of Int32)
  fullName: System.Nullable<System.Int32>
  fullName.vb: System.Nullable(Of System.Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  name.vb: Nullable(Of T)
  fullName: System.Nullable<T>
  fullName.vb: System.Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: IQueryable{System.Int64}
  definition: IQueryable`1
  name: IQueryable<Int64>
  name.vb: IQueryable(Of Int64)
  fullName: IQueryable<System.Int64>
  fullName.vb: IQueryable(Of System.Int64)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: IQueryable{System.Nullable{System.Int64}}
  definition: IQueryable`1
  name: IQueryable<Nullable<Int64>>
  name.vb: IQueryable(Of Nullable(Of Int64))
  fullName: IQueryable<System.Nullable<System.Int64>>
  fullName.vb: IQueryable(Of System.Nullable(Of System.Int64))
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  name.vb: Nullable(Of Int64)
  fullName: System.Nullable<System.Int64>
  fullName.vb: System.Nullable(Of System.Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: IQueryable{System.Single}
  definition: IQueryable`1
  name: IQueryable<Single>
  name.vb: IQueryable(Of Single)
  fullName: IQueryable<System.Single>
  fullName.vb: IQueryable(Of System.Single)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  fullName: System.Single
- uid: IQueryable{System.Nullable{System.Single}}
  definition: IQueryable`1
  name: IQueryable<Nullable<Single>>
  name.vb: IQueryable(Of Nullable(Of Single))
  fullName: IQueryable<System.Nullable<System.Single>>
  fullName.vb: IQueryable(Of System.Nullable(Of System.Single))
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  name.vb: Nullable(Of Single)
  fullName: System.Nullable<System.Single>
  fullName.vb: System.Nullable(Of System.Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: IQueryable{System.Double}
  definition: IQueryable`1
  name: IQueryable<Double>
  name.vb: IQueryable(Of Double)
  fullName: IQueryable<System.Double>
  fullName.vb: IQueryable(Of System.Double)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  fullName: System.Double
- uid: IQueryable{System.Nullable{System.Double}}
  definition: IQueryable`1
  name: IQueryable<Nullable<Double>>
  name.vb: IQueryable(Of Nullable(Of Double))
  fullName: IQueryable<System.Nullable<System.Double>>
  fullName.vb: IQueryable(Of System.Nullable(Of System.Double))
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  name.vb: Nullable(Of Double)
  fullName: System.Nullable<System.Double>
  fullName.vb: System.Nullable(Of System.Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: IQueryable{System.Decimal}
  definition: IQueryable`1
  name: IQueryable<Decimal>
  name.vb: IQueryable(Of Decimal)
  fullName: IQueryable<System.Decimal>
  fullName.vb: IQueryable(Of System.Decimal)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  fullName: System.Decimal
- uid: IQueryable{System.Nullable{System.Decimal}}
  definition: IQueryable`1
  name: IQueryable<Nullable<Decimal>>
  name.vb: IQueryable(Of Nullable(Of Decimal))
  fullName: IQueryable<System.Nullable<System.Decimal>>
  fullName.vb: IQueryable(Of System.Nullable(Of System.Decimal))
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  name.vb: Nullable(Of Decimal)
  fullName: System.Nullable<System.Decimal>
  fullName.vb: System.Nullable(Of System.Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Int32}}
  definition: Expression`1
  name: Expression<Func<TSource, Int32>>
  name.vb: Expression(Of Func(Of TSource, Int32))
  fullName: Expression<System.Func<TSource, System.Int32>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Int32))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
  definition: Expression`1
  name: Expression<Func<TSource, Nullable<Int32>>>
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Int32)))
  fullName: Expression<System.Func<TSource, System.Nullable<System.Int32>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Int64}}
  definition: Expression`1
  name: Expression<Func<TSource, Int64>>
  name.vb: Expression(Of Func(Of TSource, Int64))
  fullName: Expression<System.Func<TSource, System.Int64>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Int64))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
  definition: Expression`1
  name: Expression<Func<TSource, Nullable<Int64>>>
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Int64)))
  fullName: Expression<System.Func<TSource, System.Nullable<System.Int64>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Single}}
  definition: Expression`1
  name: Expression<Func<TSource, Single>>
  name.vb: Expression(Of Func(Of TSource, Single))
  fullName: Expression<System.Func<TSource, System.Single>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Single))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Nullable{System.Single}}}
  definition: Expression`1
  name: Expression<Func<TSource, Nullable<Single>>>
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Single)))
  fullName: Expression<System.Func<TSource, System.Nullable<System.Single>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Double}}
  definition: Expression`1
  name: Expression<Func<TSource, Double>>
  name.vb: Expression(Of Func(Of TSource, Double))
  fullName: Expression<System.Func<TSource, System.Double>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Double))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Nullable{System.Double}}}
  definition: Expression`1
  name: Expression<Func<TSource, Nullable<Double>>>
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Double)))
  fullName: Expression<System.Func<TSource, System.Nullable<System.Double>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Decimal}}
  definition: Expression`1
  name: Expression<Func<TSource, Decimal>>
  name.vb: Expression(Of Func(Of TSource, Decimal))
  fullName: Expression<System.Func<TSource, System.Decimal>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Decimal))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
  definition: Expression`1
  name: Expression<Func<TSource, Nullable<Decimal>>>
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Decimal)))
  fullName: Expression<System.Func<TSource, System.Nullable<System.Decimal>>>
  fullName.vb: Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TSource},{TSource},{TSource}}}
  definition: Expression`1
  name: Expression<Func<TSource, TSource, TSource>>
  name.vb: Expression(Of Func(Of TSource, TSource, TSource))
  fullName: Expression<System.Func<TSource, TSource, TSource>>
  fullName.vb: Expression(Of System.Func(Of TSource, TSource, TSource))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
  definition: Expression`1
  name: Expression<Func<TAccumulate, TSource, TAccumulate>>
  name.vb: Expression(Of Func(Of TAccumulate, TSource, TAccumulate))
  fullName: Expression<System.Func<TAccumulate, TSource, TAccumulate>>
  fullName.vb: Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Expression{System.Func{{TAccumulate},{TResult}}}
  definition: Expression`1
  name: Expression<Func<TAccumulate, TResult>>
  name.vb: Expression(Of Func(Of TAccumulate, TResult))
  fullName: Expression<System.Func<TAccumulate, TResult>>
  fullName.vb: Expression(Of System.Func(Of TAccumulate, TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
