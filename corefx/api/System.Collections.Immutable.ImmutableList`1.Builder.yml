items:
- uid: System.Collections.Immutable.ImmutableList`1.Builder
  id: ImmutableList`1.Builder
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)
  - System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)
  - System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.Clear
  - System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)
  - System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})
  - System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])
  - System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.Count
  - System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator
  - System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)
  - System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)
  - System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)
  - System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.Reverse
  - System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.Sort
  - System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)
  - System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable
  - System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ImmutableList<T>.Builder
  name.vb: ImmutableList(Of T).Builder
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 31
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    A list that mutates with little or no memory allocations,

    can produce and/or build on immutable list instances very efficiently.
  remarks: >-
    <para>

    While <see cref="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" /> and other bulk change methods

    already provide fast bulk change operations on the collection, this class allows

    multiple combinations of changes to be made to a set with equal efficiency.

    </para>

    <para>

    Instance members of this class are <em>not</em> thread-safe.

    </para>
  syntax:
    content: 'public sealed class Builder : IList<T>, ICollection<T>, IList, ICollection, IOrderedCollection<T>, IImmutableListQueries<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public NotInheritable Class Builder Implements IList(Of T), ICollection(Of T), IList, ICollection, IOrderedCollection(Of T), IImmutableListQueries(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Count
  id: Count
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Count
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 74
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the number of elements in this list.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 83
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether this instance is read-only.
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Item[Int32]
  name.vb: Item(Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Item[System.Int32]
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 132
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the value for a given index into the list.
  syntax:
    content: public T this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
      description: The index of the desired element.
    return:
      type: '{T}'
      description: The value at the specified index.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IndexOf(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.IndexOf(T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.IndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 164
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IList`1]()
  syntax:
    content: public int IndexOf(T item)
    content.vb: Public Function IndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Insert(Int32, T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Insert(System.Int32, T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Insert(System.Int32, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 172
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IList`1]()
  syntax:
    content: public void Insert(int index, T item)
    content.vb: Public Sub Insert(index As Integer, item As T)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: RemoveAt(Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.RemoveAt(System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 180
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IList`1]()
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)
  id: Add(`0)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 188
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IList`1]()
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 196
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IList`1]()
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Contains(T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 204
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IList`1]()
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 212
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IList`1]()
  syntax:
    content: public bool Remove(T item)
    content.vb: Public Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 230
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: public ImmutableList<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As ImmutableList(Of T).Enumerator
    return:
      type: System.Collections.Immutable.ImmutableList`1.Enumerator
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 241
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 252
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})
  id: ForEach(System.Action{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ForEach(Action<T>)
  name.vb: ForEach(Action(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.ForEach(System.Action<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.ForEach(System.Action(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 265
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Performs the specified action on each element of the list.
  syntax:
    content: public void ForEach(Action<T> action)
    content.vb: Public Sub ForEach(action As Action(Of T))
    parameters:
    - id: action
      type: System.Action{{T}}
      description: The System.Action&lt;T&gt; delegate to perform on each element of the list.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: CopyTo(T[])
  name.vb: CopyTo(T())
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.CopyTo(T[])
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.CopyTo(T())
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 284
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Copies the entire ImmutableList&lt;T&gt; to a compatible one-dimensional

    array, starting at the beginning of the target array.
  syntax:
    content: public void CopyTo(T[] array)
    content.vb: Public Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList&lt;T&gt;. The System.Array must have

        zero-based indexing.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 303
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Copies the entire ImmutableList&lt;T&gt; to a compatible one-dimensional

    array, starting at the specified index of the target array.
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList&lt;T&gt;. The System.Array must have

        zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in array at which copying begins.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: CopyTo(Int32, T[], Int32, Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.CopyTo(System.Int32, T(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 326
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Copies a range of elements from the ImmutableList&lt;T&gt; to

    a compatible one-dimensional array, starting at the specified index of the

    target array.
  syntax:
    content: public void CopyTo(int index, T[] array, int arrayIndex, int count)
    content.vb: Public Sub CopyTo(index As Integer, array As T(), arrayIndex As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        The zero-based index in the source ImmutableList&lt;T&gt; at

        which copying begins.
    - id: array
      type: '{T}[]'
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList&lt;T&gt;. The System.Array must have

        zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in array at which copying begins.
    - id: count
      type: System.Int32
      description: The number of elements to copy.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: GetRange(Int32, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.GetRange(System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.GetRange(System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 344
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a shallow copy of a range of elements in the source ImmutableList&lt;T&gt;.
  syntax:
    content: public ImmutableList<T> GetRange(int index, int count)
    content.vb: Public Function GetRange(index As Integer, count As Integer) As ImmutableList(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        The zero-based ImmutableList&lt;T&gt; index at which the range

        starts.
    - id: count
      type: System.Int32
      description: The number of elements in the range.
    return:
      type: System.Collections.Immutable.ImmutableList`1
      description: A shallow copy of a range of elements in the source ImmutableList&lt;T&gt;.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})
  id: ConvertAll``1(System.Func{`0,``0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ConvertAll<TOutput>(Func<T, TOutput>)
  name.vb: ConvertAll(Of TOutput)(Func(Of T, TOutput))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.ConvertAll<TOutput>(System.Func<T, TOutput>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.ConvertAll(Of TOutput)(System.Func(Of T, TOutput))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 367
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Converts the elements in the current ImmutableList&lt;T&gt; to

    another type, and returns a list containing the converted elements.
  syntax:
    content: public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter)
    content.vb: Public Function ConvertAll(Of TOutput)(converter As Func(Of T, TOutput)) As ImmutableList(Of TOutput)
    parameters:
    - id: converter
      type: System.Func{{T},{TOutput}}
      description: >-
        A System.Converter&lt;TInput,TOutput&gt; delegate that converts each element from

        one type to another type.
    typeParameters:
    - id: TOutput
      description: The type of the elements of the target array.
    return:
      type: System.Collections.Immutable.ImmutableList{{TOutput}}
      description: >-
        A ImmutableList&lt;T&gt; of the target type containing the converted

        elements from the current ImmutableList&lt;T&gt;.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})
  id: Exists(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Exists(Predicate<T>)
  name.vb: Exists(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Exists(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Exists(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 386
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Determines whether the ImmutableList&lt;T&gt; contains elements

    that match the conditions defined by the specified predicate.
  syntax:
    content: public bool Exists(Predicate<T> match)
    content.vb: Public Function Exists(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements

        to search for.
    return:
      type: System.Boolean
      description: >-
        true if the ImmutableList&lt;T&gt; contains one or more elements

        that match the conditions defined by the specified predicate; otherwise,

        false.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})
  id: Find(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Find(Predicate<T>)
  name.vb: Find(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Find(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Find(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 404
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the first occurrence within the entire ImmutableList&lt;T&gt;.
  syntax:
    content: public T Find(Predicate<T> match)
    content.vb: Public Function Find(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the element

        to search for.
    return:
      type: '{T}'
      description: >-
        The first element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type T.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})
  id: FindAll(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindAll(Predicate<T>)
  name.vb: FindAll(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindAll(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindAll(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 423
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Retrieves all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content: public ImmutableList<T> FindAll(Predicate<T> match)
    content.vb: Public Function FindAll(match As Predicate(Of T)) As ImmutableList(Of T)
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements

        to search for.
    return:
      type: System.Collections.Immutable.ImmutableList`1
      description: >-
        A ImmutableList&lt;T&gt; containing all the elements that match

        the conditions defined by the specified predicate, if found; otherwise, an

        empty ImmutableList&lt;T&gt;.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})
  id: FindIndex(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindIndex(Predicate<T>)
  name.vb: FindIndex(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindIndex(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindIndex(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 442
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the entire ImmutableList&lt;T&gt;.
  syntax:
    content: public int FindIndex(Predicate<T> match)
    content.vb: Public Function FindIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the element

        to search for.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindIndex(Int32, Predicate<T>)
  name.vb: FindIndex(Int32, Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindIndex(System.Int32, System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindIndex(System.Int32, System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 460
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the ImmutableList&lt;T&gt; that extends

    from the specified index to the last element.
  syntax:
    content: public int FindIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: match
      type: System.Predicate{{T}}
      description: The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindIndex(Int32, Int32, Predicate<T>)
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 481
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the ImmutableList&lt;T&gt; that starts

    at the specified index and contains the specified number of elements.
  syntax:
    content: public int FindIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})
  id: FindLast(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindLast(Predicate<T>)
  name.vb: FindLast(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindLast(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindLast(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 503
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the last occurrence within the entire ImmutableList&lt;T&gt;.
  syntax:
    content: public T FindLast(Predicate<T> match)
    content.vb: Public Function FindLast(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the element

        to search for.
    return:
      type: '{T}'
      description: >-
        The last element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type T.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})
  id: FindLastIndex(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindLastIndex(Predicate<T>)
  name.vb: FindLastIndex(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindLastIndex(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindLastIndex(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 522
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the entire ImmutableList&lt;T&gt;.
  syntax:
    content: public int FindLastIndex(Predicate<T> match)
    content.vb: Public Function FindLastIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the element

        to search for.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindLastIndex(Int32, Predicate<T>)
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindLastIndex(System.Int32, System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindLastIndex(System.Int32, System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 541
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the ImmutableList&lt;T&gt; that extends

    from the first element to the specified index.
  syntax:
    content: public int FindLastIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the element

        to search for.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 565
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the ImmutableList&lt;T&gt; that contains

    the specified number of elements and ends at the specified index.
  syntax:
    content: public int FindLastIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the element

        to search for.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IndexOf(T, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.IndexOf(T, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.IndexOf(T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 593
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the ImmutableList&lt;T&gt;

    that extends from the specified index to the last element.
  syntax:
    content: public int IndexOf(T item, int index)
    content.vb: Public Function IndexOf(item As T, index As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the ImmutableList&lt;T&gt;. The value

        can be null for reference types.
    - id: index
      type: System.Int32
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the ImmutableList&lt;T&gt; that extends from index

        to the last element, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IndexOf(T, Int32, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.IndexOf(T, System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.IndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 620
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the ImmutableList&lt;T&gt;

    that starts at the specified index and contains the specified number of elements.
  syntax:
    content: public int IndexOf(T item, int index, int count)
    content.vb: Public Function IndexOf(item As T, index As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the ImmutableList&lt;T&gt;. The value

        can be null for reference types.
    - id: index
      type: System.Int32
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the ImmutableList&lt;T&gt; that starts at index and

        contains count number of elements, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  name.vb: IndexOf(T, Int32, Int32, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 648
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the ImmutableList&lt;T&gt;

    that starts at the specified index and contains the specified number of elements.
  syntax:
    content: public int IndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)
    content.vb: Public Function IndexOf(item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the ImmutableList&lt;T&gt;. The value

        can be null for reference types.
    - id: index
      type: System.Int32
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the ImmutableList&lt;T&gt; that starts at index and

        contains count number of elements, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: LastIndexOf(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.LastIndexOf(T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.LastIndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 671
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList&lt;T&gt;

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content: public int LastIndexOf(T item)
    content.vb: Public Function LastIndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the ImmutableList&lt;T&gt;. The value

        can be null for reference types.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList&lt;T&gt; that contains count number of elements

        and ends at index, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: LastIndexOf(T, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.LastIndexOf(T, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.LastIndexOf(T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 698
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList&lt;T&gt;

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content: public int LastIndexOf(T item, int startIndex)
    content.vb: Public Function LastIndexOf(item As T, startIndex As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the ImmutableList&lt;T&gt;. The value

        can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList&lt;T&gt; that contains count number of elements

        and ends at index, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.LastIndexOf(T, System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.LastIndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 726
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList&lt;T&gt;

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content: public int LastIndexOf(T item, int startIndex, int count)
    content.vb: Public Function LastIndexOf(item As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the ImmutableList&lt;T&gt;. The value

        can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList&lt;T&gt; that contains count number of elements

        and ends at index, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  name.vb: LastIndexOf(T, Int32, Int32, IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 750
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList&lt;T&gt;

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content: public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)
    content.vb: Public Function LastIndexOf(item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: >-
        The object to locate in the ImmutableList&lt;T&gt;. The value

        can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList&lt;T&gt; that contains count number of elements

        and ends at index, if found; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})
  id: TrueForAll(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: TrueForAll(Predicate<T>)
  name.vb: TrueForAll(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.TrueForAll(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.TrueForAll(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 769
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Determines whether every element in the ImmutableList&lt;T&gt;

    matches the conditions defined by the specified predicate.
  syntax:
    content: public bool TrueForAll(Predicate<T> match)
    content.vb: Public Function TrueForAll(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions to check against

        the elements.
    return:
      type: System.Boolean
      description: >-
        true if every element in the ImmutableList&lt;T&gt; matches the

        conditions defined by the specified predicate; otherwise, false. If the list

        has no elements, the return value is true.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: AddRange(IEnumerable<T>)
  name.vb: AddRange(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.AddRange(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.AddRange(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 787
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the elements of a sequence to the end of this collection.
  syntax:
    content: public void AddRange(IEnumerable<T> items)
    content.vb: Public Sub AddRange(items As IEnumerable(Of T))
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: >-
        The sequence whose elements should be appended to this collection.

        The sequence itself cannot be null, but it can contain elements that are

        null, if type <typeparamref name="T" /> is a reference type.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: InsertRange(Int32, IEnumerable<T>)
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 806
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Inserts the elements of a collection into the ImmutableList&lt;T&gt;

    at the specified index.
  syntax:
    content: public void InsertRange(int index, IEnumerable<T> items)
    content.vb: Public Sub InsertRange(index As Integer, items As IEnumerable(Of T))
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which the new elements should be inserted.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: >-
        The collection whose elements should be inserted into the ImmutableList&lt;T&gt;.

        The collection itself cannot be null, but it can contain elements that are

        null, if type T is a reference type.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})
  id: RemoveAll(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: RemoveAll(Predicate<T>)
  name.vb: RemoveAll(Predicate(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.RemoveAll(System.Predicate<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.RemoveAll(System.Predicate(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 825
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Removes all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content: public int RemoveAll(Predicate<T> match)
    content.vb: Public Function RemoveAll(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: >-
        The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements

        to remove.
    return:
      type: System.Int32
      description: The number of elements removed from the ImmutableList&lt;T&gt;
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Reverse
  id: Reverse
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Reverse()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Reverse()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Reverse()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 837
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Reverses the order of the elements in the entire ImmutableList&lt;T&gt;.
  syntax:
    content: public void Reverse()
    content.vb: Public Sub Reverse
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Reverse(Int32, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Reverse(System.Int32, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Reverse(System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 847
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Reverses the order of the elements in the specified range.
  syntax:
    content: public void Reverse(int index, int count)
    content.vb: Public Sub Reverse(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to reverse.
    - id: count
      type: System.Int32
      description: The number of elements in the range to reverse.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Sort
  id: Sort
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Sort()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Sort()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Sort()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 860
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Sorts the elements in the entire ImmutableList&lt;T&gt; using

    the default comparer.
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})
  id: Sort(System.Comparison{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Sort(Comparison<T>)
  name.vb: Sort(Comparison(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Sort(System.Comparison<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Sort(System.Comparison(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 872
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Sorts the elements in the entire ImmutableList&lt;T&gt; using

    the specified System.Comparison&lt;T&gt;.
  syntax:
    content: public void Sort(Comparison<T> comparison)
    content.vb: Public Sub Sort(comparison As Comparison(Of T))
    parameters:
    - id: comparison
      type: System.Comparison{{T}}
      description: The System.Comparison&lt;T&gt; to use when comparing elements.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Sort(IComparer<T>)
  name.vb: Sort(IComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Sort(System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Sort(System.Collections.Generic.IComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 886
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Sorts the elements in the entire ImmutableList&lt;T&gt; using

    the specified comparer.
  syntax:
    content: public void Sort(IComparer<T> comparer)
    content.vb: Public Sub Sort(comparer As IComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: >-
        The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: Sort(Int32, Int32, IComparer<T>)
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 906
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Sorts the elements in a range of elements in ImmutableList&lt;T&gt;

    using the specified comparer.
  syntax:
    content: public void Sort(int index, int count, IComparer<T> comparer)
    content.vb: Public Sub Sort(index As Integer, count As Integer, comparer As IComparer(Of T))
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to sort.
    - id: count
      type: System.Int32
      description: The length of the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: >-
        The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)
  id: BinarySearch(`0)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: BinarySearch(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.BinarySearch(T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.BinarySearch(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 931
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element

    using the default comparer and returns the zero-based index of the element.
  syntax:
    content: public int BinarySearch(T item)
    content.vb: Public Function BinarySearch(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate. The value can be null for reference types.
    return:
      type: System.Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The default comparer System.Collections.Generic.Comparer<T>.Default cannot

      find an implementation of the System.IComparable<T> generic interface or

      the System.IComparable interface for type T.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: BinarySearch(T, IComparer<T>)
  name.vb: BinarySearch(T, IComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 956
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element

    using the specified comparer and returns the zero-based index of the element.
  syntax:
    content: public int BinarySearch(T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: >-
        The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing

        elements.-or-null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
    return:
      type: System.Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      comparer is null, and the default comparer System.Collections.Generic.Comparer<T>.Default

      cannot find an implementation of the System.IComparable<T> generic interface

      or the System.IComparable interface for type T.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 990
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Searches a range of elements in the sorted System.Collections.Generic.List&lt;T&gt;

    for an element using the specified comparer and returns the zero-based index

    of the element.
  syntax:
    content: public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to search.
    - id: count
      type: System.Int32
      description: The length of the range to search.
    - id: item
      type: '{T}'
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: >-
        The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
    return:
      type: System.Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: index is less than 0.-or-count is less than 0.
  - type: System.ArgumentException
    description: index and count do not denote a valid range in the System.Collections.Generic.List<T>.
  - type: System.InvalidOperationException
    description: >-
      comparer is null, and the default comparer System.Collections.Generic.Comparer<T>.Default

      cannot find an implementation of the System.IComparable<T> generic interface

      or the System.IComparable interface for type T.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable
  id: ToImmutable
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ToImmutable()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.ToImmutable()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.ToImmutable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1003
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable list based on the contents of this instance.
  remarks: >-
    This method is an O(n) operation, and approaches O(1) time as the number of

    actual mutations to the set since the last call to this method approaches 0.
  syntax:
    content: public ImmutableList<T> ToImmutable()
    content.vb: Public Function ToImmutable As ImmutableList(Of T)
    return:
      type: System.Collections.Immutable.ImmutableList`1
      description: An immutable list.
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.Add(Object)
  name.vb: System.Collections.IList.Add(Object)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.Add(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1028
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an item to the [System.Collections.IList]().
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: The object to add to the <see cref="T:System.Collections.IList" />.
    return:
      type: System.Int32
      description: The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.Clear()
  name.vb: System.Collections.IList.Clear()
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1038
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Clears this instance.
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.Contains(Object)
  name.vb: System.Collections.IList.Contains(Object)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.Contains(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1051
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the [System.Collections.IList]() contains a specific value.
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the <see cref="T:System.Collections.IList" />.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.IndexOf(Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.IndexOf(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1064
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines the index of a specific item in the [System.Collections.IList]().
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the <see cref="T:System.Collections.IList" />.
    return:
      type: System.Int32
      description: The index of <paramref name="value" /> if found in the list; otherwise, -1.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.Insert(Int32, Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.Insert(System.Int32, System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1075
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Inserts an item to the [System.Collections.IList]() at the specified index.
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <paramref name="value" /> should be inserted.
    - id: value
      type: System.Object
      description: The object to insert into the <see cref="T:System.Collections.IList" />.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1085
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.IList]() has a fixed size.
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1096
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.Remove(Object)
  name.vb: System.Collections.IList.Remove(Object)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.Remove(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1106
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the first occurrence of a specific object from the [System.Collections.IList]().
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: The object to remove from the <see cref="T:System.Collections.IList" />.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: IList.Item[Int32]
  name.vb: System.Collections.IList.Item(Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.IList.Item[System.Int32]
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.IList.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1120
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the [System.Object]() at the specified index.
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: System.Object
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1136
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
  syntax:
    content: void ICollection.CopyTo(Array array, int arrayIndex)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, arrayIndex As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <paramref name="array" /> at which copying begins.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1146
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether access to the [System.Collections.ICollection]() is synchronized (thread safe).
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1157
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection]().
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
  exceptions:
  - type: System.NotImplementedException
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  name.vb: IList(Of T)
  fullName: System.Collections.Generic.IList<T>
  fullName.vb: System.Collections.Generic.IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableList`1.Enumerator
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableList`1.Enumerator.yml
  name: ImmutableList.Enumerator<>
  name.vb: ImmutableList.Enumerator(Of )
  fullName: System.Collections.Immutable.ImmutableList.Enumerator<>
  fullName.vb: System.Collections.Immutable.ImmutableList.Enumerator(Of )
  type: Struct
  summary: Enumerates the contents of a binary tree.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1.Enumerator
    name: ImmutableList.Enumerator
    fullName: System.Collections.Immutable.ImmutableList.Enumerator
    href: System.Collections.Immutable.ImmutableList`1.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1.Enumerator
    name: ImmutableList.Enumerator
    fullName: System.Collections.Immutable.ImmutableList.Enumerator
    href: System.Collections.Immutable.ImmutableList`1.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Action{{T}}
  parent: System
  definition: System.Action`1
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Action`1
  parent: System
  isExternal: true
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Immutable.ImmutableList`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ImmutableList<T>
  name.vb: ImmutableList(Of T)
  fullName: System.Collections.Immutable.ImmutableList<T>
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T)
  type: Class
  summary: An immutable list implementation.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
    href: System.Collections.Immutable.ImmutableList`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
    href: System.Collections.Immutable.ImmutableList`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func{{T},{TOutput}}
  parent: System
  definition: System.Func`2
  name: Func<T, TOutput>
  name.vb: Func(Of T, TOutput)
  fullName: System.Func<T, TOutput>
  fullName.vb: System.Func(Of T, TOutput)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TOutput
    fullName: TOutput
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TOutput
    fullName: TOutput
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableList{{TOutput}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableList`1
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ImmutableList<TOutput>
  name.vb: ImmutableList(Of TOutput)
  fullName: System.Collections.Immutable.ImmutableList<TOutput>
  fullName.vb: System.Collections.Immutable.ImmutableList(Of TOutput)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
    href: System.Collections.Immutable.ImmutableList`1.yml
  - name: <
    fullName: <
  - name: TOutput
    fullName: TOutput
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
    href: System.Collections.Immutable.ImmutableList`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TOutput
    fullName: TOutput
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  name.vb: Predicate(Of T)
  fullName: System.Predicate<T>
  fullName.vb: System.Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: true
  name: Predicate<T>
  name.vb: Predicate(Of T)
  fullName: System.Predicate<T>
  fullName.vb: System.Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Comparison{{T}}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  name.vb: Comparison(Of T)
  fullName: System.Comparison<T>
  fullName.vb: System.Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Comparison`1
  parent: System
  isExternal: true
  name: Comparison<T>
  name.vb: Comparison(Of T)
  fullName: System.Comparison<T>
  fullName.vb: System.Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  fullName: System.Collections.IList
- uid: System.NotImplementedException
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<T>
  name.vb: ICollection(Of T)
  fullName: System.Collections.Generic.ICollection<T>
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  fullName: System.Array
