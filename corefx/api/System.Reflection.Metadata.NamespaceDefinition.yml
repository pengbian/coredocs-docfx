items:
- uid: System.Reflection.Metadata.NamespaceDefinition
  id: NamespaceDefinition
  parent: System.Reflection.Metadata
  children:
  - System.Reflection.Metadata.NamespaceDefinition.ExportedTypes
  - System.Reflection.Metadata.NamespaceDefinition.Name
  - System.Reflection.Metadata.NamespaceDefinition.NamespaceDefinitions
  - System.Reflection.Metadata.NamespaceDefinition.Parent
  - System.Reflection.Metadata.NamespaceDefinition.TypeDefinitions
  href: System.Reflection.Metadata.NamespaceDefinition.yml
  name: NamespaceDefinition
  fullName: System.Reflection.Metadata.NamespaceDefinition
  type: Struct
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/NamespaceDefinition.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/NamespaceDefinition.cs
    startLine: 9
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  syntax:
    content: public struct NamespaceDefinition
    content.vb: Public Structure NamespaceDefinition
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: System.Reflection.Metadata.NamespaceDefinition.Name
  id: Name
  parent: System.Reflection.Metadata.NamespaceDefinition
  href: System.Reflection.Metadata.NamespaceDefinition.yml
  name: Name
  fullName: System.Reflection.Metadata.NamespaceDefinition.Name
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/NamespaceDefinition.cs
    startLine: 22
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Gets the unqualified name of the NamespaceDefinition.
  syntax:
    content: public StringHandle Name { get; }
    content.vb: Public ReadOnly Property Name As StringHandle
    parameters: []
    return:
      type: System.Reflection.Metadata.StringHandle
- uid: System.Reflection.Metadata.NamespaceDefinition.Parent
  id: Parent
  parent: System.Reflection.Metadata.NamespaceDefinition
  href: System.Reflection.Metadata.NamespaceDefinition.yml
  name: Parent
  fullName: System.Reflection.Metadata.NamespaceDefinition.Parent
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/NamespaceDefinition.cs
    startLine: 30
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Gets the parent namespace.
  syntax:
    content: public NamespaceDefinitionHandle Parent { get; }
    content.vb: Public ReadOnly Property Parent As NamespaceDefinitionHandle
    parameters: []
    return:
      type: System.Reflection.Metadata.NamespaceDefinitionHandle
- uid: System.Reflection.Metadata.NamespaceDefinition.NamespaceDefinitions
  id: NamespaceDefinitions
  parent: System.Reflection.Metadata.NamespaceDefinition
  href: System.Reflection.Metadata.NamespaceDefinition.yml
  name: NamespaceDefinitions
  fullName: System.Reflection.Metadata.NamespaceDefinition.NamespaceDefinitions
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/NamespaceDefinition.cs
    startLine: 43
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: >-
    Gets the namespace definitions that are direct children of the current

    namespace definition.



    System.Collections and System.Linq are direct children of System.

    System.Collections.Generic is a direct child of System.Collections.

    System.Collections.Generic is *not* a direct child of System.
  syntax:
    content: public ImmutableArray<NamespaceDefinitionHandle> NamespaceDefinitions { get; }
    content.vb: Public ReadOnly Property NamespaceDefinitions As ImmutableArray(Of NamespaceDefinitionHandle)
    parameters: []
    return:
      type: ImmutableArray{System.Reflection.Metadata.NamespaceDefinitionHandle}
- uid: System.Reflection.Metadata.NamespaceDefinition.TypeDefinitions
  id: TypeDefinitions
  parent: System.Reflection.Metadata.NamespaceDefinition
  href: System.Reflection.Metadata.NamespaceDefinition.yml
  name: TypeDefinitions
  fullName: System.Reflection.Metadata.NamespaceDefinition.TypeDefinitions
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/NamespaceDefinition.cs
    startLine: 51
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Gets all type definitions that reside directly in a namespace.
  syntax:
    content: public ImmutableArray<TypeDefinitionHandle> TypeDefinitions { get; }
    content.vb: Public ReadOnly Property TypeDefinitions As ImmutableArray(Of TypeDefinitionHandle)
    parameters: []
    return:
      type: ImmutableArray{System.Reflection.Metadata.TypeDefinitionHandle}
- uid: System.Reflection.Metadata.NamespaceDefinition.ExportedTypes
  id: ExportedTypes
  parent: System.Reflection.Metadata.NamespaceDefinition
  href: System.Reflection.Metadata.NamespaceDefinition.yml
  name: ExportedTypes
  fullName: System.Reflection.Metadata.NamespaceDefinition.ExportedTypes
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/NamespaceDefinition.cs
    startLine: 59
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Gets all exported types that reside directly in a namespace.
  syntax:
    content: public ImmutableArray<ExportedTypeHandle> ExportedTypes { get; }
    content.vb: Public ReadOnly Property ExportedTypes As ImmutableArray(Of ExportedTypeHandle)
    parameters: []
    return:
      type: ImmutableArray{System.Reflection.Metadata.ExportedTypeHandle}
references:
- uid: System.Reflection.Metadata
  isExternal: false
  name: System.Reflection.Metadata
  fullName: System.Reflection.Metadata
  type: Namespace
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Reflection.Metadata.StringHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.StringHandle.yml
  name: StringHandle
  fullName: System.Reflection.Metadata.StringHandle
  type: Struct
- uid: System.Reflection.Metadata.NamespaceDefinitionHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.NamespaceDefinitionHandle.yml
  name: NamespaceDefinitionHandle
  fullName: System.Reflection.Metadata.NamespaceDefinitionHandle
  type: Struct
  summary: A handle that represents a namespace definition.
- uid: ImmutableArray{System.Reflection.Metadata.NamespaceDefinitionHandle}
  definition: ImmutableArray`1
  href: System.Reflection.Metadata.NamespaceDefinitionHandle.yml
  name: ImmutableArray<NamespaceDefinitionHandle>
  name.vb: ImmutableArray(Of NamespaceDefinitionHandle)
  fullName: ImmutableArray<System.Reflection.Metadata.NamespaceDefinitionHandle>
  fullName.vb: ImmutableArray(Of System.Reflection.Metadata.NamespaceDefinitionHandle)
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.Metadata.NamespaceDefinitionHandle
    name: NamespaceDefinitionHandle
    fullName: System.Reflection.Metadata.NamespaceDefinitionHandle
    href: System.Reflection.Metadata.NamespaceDefinitionHandle.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Metadata.NamespaceDefinitionHandle
    name: NamespaceDefinitionHandle
    fullName: System.Reflection.Metadata.NamespaceDefinitionHandle
    href: System.Reflection.Metadata.NamespaceDefinitionHandle.yml
  - name: )
    fullName: )
- uid: ImmutableArray`1
  isExternal: true
  name: ImmutableArray<>
  name.vb: ImmutableArray(Of )
  fullName: ImmutableArray<>
  fullName.vb: ImmutableArray(Of )
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: ImmutableArray{System.Reflection.Metadata.TypeDefinitionHandle}
  definition: ImmutableArray`1
  href: System.Reflection.Metadata.TypeDefinitionHandle.yml
  name: ImmutableArray<TypeDefinitionHandle>
  name.vb: ImmutableArray(Of TypeDefinitionHandle)
  fullName: ImmutableArray<System.Reflection.Metadata.TypeDefinitionHandle>
  fullName.vb: ImmutableArray(Of System.Reflection.Metadata.TypeDefinitionHandle)
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.Metadata.TypeDefinitionHandle
    name: TypeDefinitionHandle
    fullName: System.Reflection.Metadata.TypeDefinitionHandle
    href: System.Reflection.Metadata.TypeDefinitionHandle.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Metadata.TypeDefinitionHandle
    name: TypeDefinitionHandle
    fullName: System.Reflection.Metadata.TypeDefinitionHandle
    href: System.Reflection.Metadata.TypeDefinitionHandle.yml
  - name: )
    fullName: )
- uid: ImmutableArray{System.Reflection.Metadata.ExportedTypeHandle}
  definition: ImmutableArray`1
  href: System.Reflection.Metadata.ExportedTypeHandle.yml
  name: ImmutableArray<ExportedTypeHandle>
  name.vb: ImmutableArray(Of ExportedTypeHandle)
  fullName: ImmutableArray<System.Reflection.Metadata.ExportedTypeHandle>
  fullName.vb: ImmutableArray(Of System.Reflection.Metadata.ExportedTypeHandle)
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.Metadata.ExportedTypeHandle
    name: ExportedTypeHandle
    fullName: System.Reflection.Metadata.ExportedTypeHandle
    href: System.Reflection.Metadata.ExportedTypeHandle.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Metadata.ExportedTypeHandle
    name: ExportedTypeHandle
    fullName: System.Reflection.Metadata.ExportedTypeHandle
    href: System.Reflection.Metadata.ExportedTypeHandle.yml
  - name: )
    fullName: )
