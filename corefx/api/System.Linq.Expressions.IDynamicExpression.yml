items:
- uid: System.Linq.Expressions.IDynamicExpression
  id: IDynamicExpression
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.IDynamicExpression.CreateCallSite
  - System.Linq.Expressions.IDynamicExpression.DelegateType
  - System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])
  href: System.Linq.Expressions.IDynamicExpression.yml
  name: IDynamicExpression
  fullName: System.Linq.Expressions.IDynamicExpression
  type: Interface
  source:
    remote: &o0
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/IDynamicExpression.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IDynamicExpression.cs
    startLine: 5
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: 'public interface IDynamicExpression : IArgumentProvider'
    content.vb: Public Interface IDynamicExpression Inherits IArgumentProvider
  inheritedMembers:
  - System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)
  - System.Linq.Expressions.IArgumentProvider.ArgumentCount
- uid: System.Linq.Expressions.IDynamicExpression.DelegateType
  id: DelegateType
  parent: System.Linq.Expressions.IDynamicExpression
  href: System.Linq.Expressions.IDynamicExpression.yml
  name: DelegateType
  fullName: System.Linq.Expressions.IDynamicExpression.DelegateType
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IDynamicExpression.cs
    startLine: 10
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Gets the type of the delegate used by the CallSite /&gt;.
  syntax:
    content: Type DelegateType { get; }
    content.vb: ReadOnly Property DelegateType As Type
    parameters: []
    return:
      type: System.Type
- uid: System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])
  id: Rewrite(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.IDynamicExpression
  href: System.Linq.Expressions.IDynamicExpression.yml
  name: Rewrite(Expression[])
  name.vb: Rewrite(Expression())
  fullName: System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IDynamicExpression.cs
    startLine: 19
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: >-
    Rewrite this node replacing the args with the provided values.  The

    number of the args needs to match the number of the current block.



    This helper is provided to allow re-writing of nodes to not depend on the specific

    class of DynamicExpression which is being used.
  syntax:
    content: Expression Rewrite(Expression[] args)
    content.vb: Function Rewrite(args As Expression()) As Expression
    parameters:
    - id: args
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.IDynamicExpression.CreateCallSite
  id: CreateCallSite
  parent: System.Linq.Expressions.IDynamicExpression
  href: System.Linq.Expressions.IDynamicExpression.yml
  name: CreateCallSite()
  fullName: System.Linq.Expressions.IDynamicExpression.CreateCallSite()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IDynamicExpression.cs
    startLine: 24
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a CallSite for the node.
  syntax:
    content: object CreateCallSite()
    content.vb: Function CreateCallSite As Object
    return:
      type: System.Object
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
  type: Namespace
- uid: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)
  parent: System.Linq.Expressions.IArgumentProvider
  isExternal: true
  href: System.Linq.Expressions.IArgumentProvider.yml
  name: GetArgument(Int32)
  fullName: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)
  spec.csharp:
  - uid: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)
    name: GetArgument
    fullName: System.Linq.Expressions.IArgumentProvider.GetArgument
    href: System.Linq.Expressions.IArgumentProvider.yml
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)
    name: GetArgument
    fullName: System.Linq.Expressions.IArgumentProvider.GetArgument
    href: System.Linq.Expressions.IArgumentProvider.yml
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.Expressions.IArgumentProvider.ArgumentCount
  parent: System.Linq.Expressions.IArgumentProvider
  isExternal: false
  href: System.Linq.Expressions.IArgumentProvider.yml
  name: ArgumentCount
  fullName: System.Linq.Expressions.IArgumentProvider.ArgumentCount
- uid: System.Linq.Expressions.IArgumentProvider
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.IArgumentProvider.yml
  name: IArgumentProvider
  fullName: System.Linq.Expressions.IArgumentProvider
  type: Interface
  summary: >-
    Provides an internal interface for accessing the arguments that multiple tree

    nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression,

    and InexExpression).



    This enables two optimizations which reduce the size of the trees.  The first is it enables

    the nodes to hold onto an IList of T instead of a ReadOnlyCollection.  This saves the cost

    of allocating the ReadOnlyCollection for each node.  The second is that it enables specialized

    subclasses to be created which hold onto a specific number of arguments.  For example Block2,

    Block3, Block4.  These nodes can therefore avoid allocating both a ReadOnlyCollection and an

    array for storing their elements saving 32 bytes per node.



    Meanwhile the nodes can continue to expose the original LINQ properties of ReadOnlyCollections.  They

    do this by re-using 1 field for storing both the array or an element that would normally be stored

    in the array.



    For the array case the collection is typed to IList of T instead of ReadOnlyCollection of T.

    When the node is initially constructed it is an array.  When the compiler accesses the members it

    uses this interface.  If a user accesses the members the array is promoted to a ReadOnlyCollection.



    For the object case we store the 1st argument in a field typed to object and when the node is initially

    constructed this holds directly onto the Expression.  When the compiler accesses the members

    it again uses this interface and the accessor for the 1st argument uses Expression.ReturnObject to

    return the object which handles the Expression or ReadOnlyCollection case.  When the user accesses

    the ReadOnlyCollection then the object field is updated to hold directly onto the ReadOnlyCollection.



    It is important that the Expressions consistently return the same ReadOnlyCollection otherwise the

    re-writer will be broken and it would be a breaking change from LINQ v1.  The problem is that currently

    users can rely on object identity to tell if the node has changed.  Storing the readonly collection in

    an overloaded field enables us to both reduce memory usage as well as maintain compatibility and an

    easy to use external API.
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Linq.Expressions.Expression[]
  isExternal: false
  href: System.Linq.Expressions.Expression.yml
  name: Expression[]
  name.vb: Expression()
  fullName: System.Linq.Expressions.Expression[]
  fullName.vb: System.Linq.Expressions.Expression()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.Expression.yml
  name: Expression
  fullName: System.Linq.Expressions.Expression
  type: Class
  summary: The base type for all nodes in Expression Trees.
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
