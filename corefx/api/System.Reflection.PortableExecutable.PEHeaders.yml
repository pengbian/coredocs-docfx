items:
- uid: System.Reflection.PortableExecutable.PEHeaders
  id: PEHeaders
  parent: System.Reflection.PortableExecutable
  children:
  - System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream)
  - System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32)
  - System.Reflection.PortableExecutable.PEHeaders.CoffHeader
  - System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset
  - System.Reflection.PortableExecutable.PEHeaders.CorHeader
  - System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset
  - System.Reflection.PortableExecutable.PEHeaders.GetContainingSectionIndex(System.Int32)
  - System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly
  - System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication
  - System.Reflection.PortableExecutable.PEHeaders.IsDll
  - System.Reflection.PortableExecutable.PEHeaders.IsExe
  - System.Reflection.PortableExecutable.PEHeaders.MetadataSize
  - System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset
  - System.Reflection.PortableExecutable.PEHeaders.PEHeader
  - System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset
  - System.Reflection.PortableExecutable.PEHeaders.SectionHeaders
  - System.Reflection.PortableExecutable.PEHeaders.TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry,System.Int32@)
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: PEHeaders
  fullName: System.Reflection.PortableExecutable.PEHeaders
  type: Class
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 13
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: An object used to read PE (Portable Executable) and COFF (Common Object File Format) headers from a stream.
  syntax:
    content: public sealed class PEHeaders
    content.vb: Public NotInheritable Class PEHeaders
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: PEHeaders(Stream)
  fullName: System.Reflection.PortableExecutable.PEHeaders.PEHeaders(System.IO.Stream)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 33
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Reads PE headers from the current location in the stream.
  syntax:
    content: public PEHeaders(Stream peStream)
    content.vb: Public Sub New(peStream As Stream)
    parameters:
    - id: peStream
      type: System.IO.Stream
      description: Stream containing PE image starting at the stream's current position and ending at the end of the stream.
  exceptions:
  - type: System.BadImageFormatException
    description: The data read from stream have invalid format.
  - type: System.IO.IOException
    description: Error reading from the stream.
  - type: System.ArgumentException
    description: The stream doesn't support seek operations.
  - type: System.ArgumentNullException
    description: is null.
- uid: System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32)
  id: '#ctor(System.IO.Stream,System.Int32)'
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: PEHeaders(Stream, Int32)
  fullName: System.Reflection.PortableExecutable.PEHeaders.PEHeaders(System.IO.Stream, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 48
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Reads PE headers from the current location in the stream.
  syntax:
    content: public PEHeaders(Stream peStream, int size)
    content.vb: Public Sub New(peStream As Stream, size As Integer)
    parameters:
    - id: peStream
      type: System.IO.Stream
      description: Stream containing PE image of the given size starting at its current position.
    - id: size
      type: System.Int32
      description: Size of the PE image.
  exceptions:
  - type: System.BadImageFormatException
    description: The data read from stream have invalid format.
  - type: System.IO.IOException
    description: Error reading from the stream.
  - type: System.ArgumentException
    description: The stream doesn't support seek operations.
  - type: System.ArgumentNullException
    description: is null.
  - type: System.ArgumentOutOfRangeException
    description: Size is negative or extends past the end of the stream.
- uid: System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset
  id: MetadataStartOffset
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: MetadataStartOffset
  fullName: System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 100
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    Gets the offset (in bytes) from the start of the PE image to the start of the CLI metadata.

    or -1 if the image does not contain metadata.
  syntax:
    content: public int MetadataStartOffset { get; }
    content.vb: Public ReadOnly Property MetadataStartOffset As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.PEHeaders.MetadataSize
  id: MetadataSize
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: MetadataSize
  fullName: System.Reflection.PortableExecutable.PEHeaders.MetadataSize
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 108
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the size of the CLI metadata 0 if the image does not contain metadata.)
  syntax:
    content: public int MetadataSize { get; }
    content.vb: Public ReadOnly Property MetadataSize As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.PEHeaders.CoffHeader
  id: CoffHeader
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: CoffHeader
  fullName: System.Reflection.PortableExecutable.PEHeaders.CoffHeader
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 116
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the COFF header of the image.
  syntax:
    content: public CoffHeader CoffHeader { get; }
    content.vb: Public ReadOnly Property CoffHeader As CoffHeader
    parameters: []
    return:
      type: System.Reflection.PortableExecutable.CoffHeader
- uid: System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset
  id: CoffHeaderStartOffset
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: CoffHeaderStartOffset
  fullName: System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 124
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the byte offset from the start of the PE image to the start of the COFF header.
  syntax:
    content: public int CoffHeaderStartOffset { get; }
    content.vb: Public ReadOnly Property CoffHeaderStartOffset As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly
  id: IsCoffOnly
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: IsCoffOnly
  fullName: System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 132
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Determines if the image is Coff only.
  syntax:
    content: public bool IsCoffOnly { get; }
    content.vb: Public ReadOnly Property IsCoffOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.PortableExecutable.PEHeaders.PEHeader
  id: PEHeader
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: PEHeader
  fullName: System.Reflection.PortableExecutable.PEHeaders.PEHeader
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 140
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the PE header of the image or null if the image is COFF only.
  syntax:
    content: public PEHeader PEHeader { get; }
    content.vb: Public ReadOnly Property PEHeader As PEHeader
    parameters: []
    return:
      type: System.Reflection.PortableExecutable.PEHeader
- uid: System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset
  id: PEHeaderStartOffset
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: PEHeaderStartOffset
  fullName: System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 148
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the byte offset from the start of the image to
  syntax:
    content: public int PEHeaderStartOffset { get; }
    content.vb: Public ReadOnly Property PEHeaderStartOffset As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.PEHeaders.SectionHeaders
  id: SectionHeaders
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: SectionHeaders
  fullName: System.Reflection.PortableExecutable.PEHeaders.SectionHeaders
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 156
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the PE section headers.
  syntax:
    content: public ImmutableArray<SectionHeader> SectionHeaders { get; }
    content.vb: Public ReadOnly Property SectionHeaders As ImmutableArray(Of SectionHeader)
    parameters: []
    return:
      type: ImmutableArray{System.Reflection.PortableExecutable.SectionHeader}
- uid: System.Reflection.PortableExecutable.PEHeaders.CorHeader
  id: CorHeader
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: CorHeader
  fullName: System.Reflection.PortableExecutable.PEHeaders.CorHeader
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 164
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the CLI header or null if the image does not have one.
  syntax:
    content: public CorHeader CorHeader { get; }
    content.vb: Public ReadOnly Property CorHeader As CorHeader
    parameters: []
    return:
      type: System.Reflection.PortableExecutable.CorHeader
- uid: System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset
  id: CorHeaderStartOffset
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: CorHeaderStartOffset
  fullName: System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 172
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the byte offset from the start of the image to the COR header or -1 if the image does not have one.
  syntax:
    content: public int CorHeaderStartOffset { get; }
    content.vb: Public ReadOnly Property CorHeaderStartOffset As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication
  id: IsConsoleApplication
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: IsConsoleApplication
  fullName: System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 180
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Determines if the image represents a Windows console application.
  syntax:
    content: public bool IsConsoleApplication { get; }
    content.vb: Public ReadOnly Property IsConsoleApplication As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.PortableExecutable.PEHeaders.IsDll
  id: IsDll
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: IsDll
  fullName: System.Reflection.PortableExecutable.PEHeaders.IsDll
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 191
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Determines if the image represents a dynamically linked library.
  syntax:
    content: public bool IsDll { get; }
    content.vb: Public ReadOnly Property IsDll As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.PortableExecutable.PEHeaders.IsExe
  id: IsExe
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: IsExe
  fullName: System.Reflection.PortableExecutable.PEHeaders.IsExe
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 202
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Determines if the image represents an executable.
  syntax:
    content: public bool IsExe { get; }
    content.vb: Public ReadOnly Property IsExe As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.PortableExecutable.PEHeaders.TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry,System.Int32@)
  id: TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry,System.Int32@)
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: TryGetDirectoryOffset(DirectoryEntry, out Int32)
  name.vb: TryGetDirectoryOffset(DirectoryEntry, ByRef Int32)
  fullName: System.Reflection.PortableExecutable.PEHeaders.TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry, out System.Int32)
  fullName.vb: System.Reflection.PortableExecutable.PEHeaders.TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry, ByRef System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 296
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the offset (in bytes) from the start of the image to the given directory entry.
  syntax:
    content: public bool TryGetDirectoryOffset(DirectoryEntry directory, out int offset)
    content.vb: Public Function TryGetDirectoryOffset(directory As DirectoryEntry, ByRef offset As Integer) As Boolean
    parameters:
    - id: directory
      type: System.Reflection.PortableExecutable.DirectoryEntry
    - id: offset
      type: System.Int32
    return:
      type: System.Boolean
      description: The section containing the directory could not be found.
  exceptions:
  - type: System.BadImageFormatException
    description: The section containing the
- uid: System.Reflection.PortableExecutable.PEHeaders.GetContainingSectionIndex(System.Int32)
  id: GetContainingSectionIndex(System.Int32)
  parent: System.Reflection.PortableExecutable.PEHeaders
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: GetContainingSectionIndex(Int32)
  fullName: System.Reflection.PortableExecutable.PEHeaders.GetContainingSectionIndex(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEHeaders.cs
    startLine: 323
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Searches sections of the PE image for the one that contains specified Relative Virtual Address.
  syntax:
    content: public int GetContainingSectionIndex(int relativeVirtualAddress)
    content.vb: Public Function GetContainingSectionIndex(relativeVirtualAddress As Integer) As Integer
    parameters:
    - id: relativeVirtualAddress
      type: System.Int32
      description: Address.
    return:
      type: System.Int32
      description: >-
        Index of the section that contains <paramref name="relativeVirtualAddress" />,

        or -1 if there is none.
references:
- uid: System.Reflection.PortableExecutable
  isExternal: false
  name: System.Reflection.PortableExecutable
  fullName: System.Reflection.PortableExecutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.BadImageFormatException
- uid: System.IO.IOException
- uid: System.ArgumentException
- uid: System.ArgumentNullException
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  type: Namespace
- uid: System.ArgumentOutOfRangeException
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.PortableExecutable.CoffHeader
  isExternal: false
  href: System.Reflection.PortableExecutable.CoffHeader.yml
  name: CoffHeader
  fullName: System.Reflection.PortableExecutable.CoffHeader
  type: Class
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.PortableExecutable.PEHeader
  isExternal: false
  href: System.Reflection.PortableExecutable.PEHeader.yml
  name: PEHeader
  fullName: System.Reflection.PortableExecutable.PEHeader
  type: Class
- uid: ImmutableArray{System.Reflection.PortableExecutable.SectionHeader}
  definition: ImmutableArray`1
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: ImmutableArray<SectionHeader>
  name.vb: ImmutableArray(Of SectionHeader)
  fullName: ImmutableArray<System.Reflection.PortableExecutable.SectionHeader>
  fullName.vb: ImmutableArray(Of System.Reflection.PortableExecutable.SectionHeader)
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.PortableExecutable.SectionHeader
    name: SectionHeader
    fullName: System.Reflection.PortableExecutable.SectionHeader
    href: System.Reflection.PortableExecutable.SectionHeader.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PortableExecutable.SectionHeader
    name: SectionHeader
    fullName: System.Reflection.PortableExecutable.SectionHeader
    href: System.Reflection.PortableExecutable.SectionHeader.yml
  - name: )
    fullName: )
- uid: ImmutableArray`1
  isExternal: true
  name: ImmutableArray<>
  name.vb: ImmutableArray(Of )
  fullName: ImmutableArray<>
  fullName.vb: ImmutableArray(Of )
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Reflection.PortableExecutable.CorHeader
  isExternal: false
  href: System.Reflection.PortableExecutable.CorHeader.yml
  name: CorHeader
  fullName: System.Reflection.PortableExecutable.CorHeader
  type: Class
- uid: System.Reflection.PortableExecutable.DirectoryEntry
  parent: System.Reflection.PortableExecutable
  isExternal: false
  href: System.Reflection.PortableExecutable.DirectoryEntry.yml
  name: DirectoryEntry
  fullName: System.Reflection.PortableExecutable.DirectoryEntry
  type: Struct
