items:
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder
  id: ImmutableDictionary`2.Builder
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Count
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer
  - System.Collections.Immutable.ImmutableDictionary`2.Builder.Values
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ImmutableDictionary<TKey, TValue>.Builder
  name.vb: ImmutableDictionary(Of TKey, TValue).Builder
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 31
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    A dictionary that mutates with little or no memory allocations,

    can produce and/or build on immutable dictionary instances very efficiently.
  remarks: >-
    <para>

    While <see cref="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />

    and other bulk change methods already provide fast bulk change operations on the collection, this class allows

    multiple combinations of changes to be made to a set with equal efficiency.

    </para>

    <para>

    Instance members of this class are <em>not</em> thread-safe.

    </para>
  syntax:
    content: 'public sealed class Builder : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable'
    content.vb: Public NotInheritable Class Builder Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IDictionary, ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer
  id: KeyComparer
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.KeyComparer
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 87
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the key comparer.
  syntax:
    content: public IEqualityComparer<TKey> KeyComparer { get; set; }
    content.vb: Public Property KeyComparer As IEqualityComparer(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer
  id: ValueComparer
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ValueComparer
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.ValueComparer
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.ValueComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 117
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the value comparer.
  syntax:
    content: public IEqualityComparer<TValue> ValueComparer { get; set; }
    content.vb: Public Property ValueComparer As IEqualityComparer(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{TValue}}
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Count
  id: Count
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Count
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 144
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the number of elements contained in the [System.Collections.Generic.ICollection`1]().
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 153
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys
  id: Keys
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Keys
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Keys
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 161
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IReadOnlyDictionary`2]()
  syntax:
    content: public IEnumerable<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As IEnumerable(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TKey}}
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary<TKey, TValue>.Keys
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 176
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an [System.Collections.Generic.ICollection`1]() containing the keys of the [System.Collections.Generic.IDictionary`2]().
  syntax:
    content: ICollection<TKey> IDictionary<TKey, TValue>.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<TKey,TValue>.Keys As ICollection(Of TKey) Implements IDictionary(Of TKey, TValue).Keys
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
      description: An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Values
  id: Values
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Values
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Values
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 184
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.Generic.IReadOnlyDictionary`2]()
  syntax:
    content: public IEnumerable<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As IEnumerable(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Values
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary<TKey, TValue>.Values
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Values
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.Generic.IDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.Generic.IDictionary<TKey,TValue>.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 199
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an [System.Collections.Generic.ICollection`1]() containing the values in the [System.Collections.Generic.IDictionary`2]().
  syntax:
    content: ICollection<TValue> IDictionary<TKey, TValue>.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<TKey,TValue>.Values As ICollection(Of TValue) Implements IDictionary(Of TKey, TValue).Values
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
      description: An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 212
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.IDictionary]() object has a fixed size.
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 222
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content: bool IDictionary.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 233
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an [System.Collections.Generic.ICollection`1]() containing the keys of the [System.Collections.Generic.IDictionary`2]().
  syntax:
    content: ICollection IDictionary.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 244
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an [System.Collections.Generic.ICollection`1]() containing the values in the [System.Collections.Generic.IDictionary`2]().
  syntax:
    content: ICollection IDictionary.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 257
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection]().
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 275
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether access to the [System.Collections.ICollection]() is synchronized (thread safe).
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.Add(Object, Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.Add(System.Object, System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 290
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an element with the provided key and value to the [System.Collections.IDictionary]() object.
  syntax:
    content: void IDictionary.Add(object key, object value)
    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add
    parameters:
    - id: key
      type: System.Object
      description: The [System.Object]() to use as the key of the element to add.
    - id: value
      type: System.Object
      description: The <see cref="T:System.Object" /> to use as the value of the element to add.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.Contains(Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.Contains(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 302
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the [System.Collections.IDictionary]() object contains an element with the specified key.
  syntax:
    content: bool IDictionary.Contains(object key)
    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains
    parameters:
    - id: key
      type: System.Object
      description: The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator
  id: System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 314
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an [System.Collections.IDictionaryEnumerator]() object for the [System.Collections.IDictionary]() object.
  syntax:
    content: IDictionaryEnumerator IDictionary.GetEnumerator()
    content.vb: Function System.Collections.IDictionary.GetEnumerator As IDictionaryEnumerator Implements IDictionary.GetEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
  exceptions:
  - type: System.NotImplementedException
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.Remove(Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.Remove(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 323
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the element with the specified key from the [System.Collections.IDictionary]() object.
  syntax:
    content: void IDictionary.Remove(object key)
    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to remove.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IDictionary.Item[Object]
  name.vb: System.Collections.IDictionary.Item(Object)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IDictionary.Item[System.Object]
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IDictionary.Item(System.Object)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 333
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the element with the specified key.
  syntax:
    content: object IDictionary.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this
    parameters:
    - id: key
      type: System.Object
      description: The key.
    return:
      type: System.Object
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 348
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
  syntax:
    content: void ICollection.CopyTo(Array array, int arrayIndex)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, arrayIndex As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <paramref name="array" /> at which copying begins.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)
  id: Item(`0)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Item[TKey]
  name.vb: Item(TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Item[TKey]
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Item(TKey)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 412
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the element with the specified key.
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
      description: The element with the specified key.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
  - type: System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and  is not found.
  - type: System.NotSupportedException
    description: The property is set and the  is read-only.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: AddRange(IEnumerable<KeyValuePair<TKey, TValue>>)
  name.vb: AddRange(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.AddRange(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 438
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds a sequence of values to this collection.
  syntax:
    content: public void AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items)
    content.vb: Public Sub AddRange(items As IEnumerable(Of KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The items.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  id: RemoveRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: RemoveRange(IEnumerable<TKey>)
  name.vb: RemoveRange(IEnumerable(Of TKey))
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.RemoveRange(System.Collections.Generic.IEnumerable(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 449
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes any entries from the dictionaries with keys that match those found in the specified sequence.
  syntax:
    content: public void RemoveRange(IEnumerable<TKey> keys)
    content.vb: Public Sub RemoveRange(keys As IEnumerable(Of TKey))
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{{TKey}}
      description: The keys for entries to remove from the dictionary.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 465
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: public ImmutableDictionary<TKey, TValue>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As ImmutableDictionary(Of TKey, TValue).Enumerator
    return:
      type: System.Collections.Immutable.ImmutableDictionary`2.Enumerator
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)
  id: GetValueOrDefault(`0)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: GetValueOrDefault(TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.GetValueOrDefault(TKey)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.GetValueOrDefault(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 475
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the value for a given key if a matching key exists in the dictionary.
  syntax:
    content: public TValue GetValueOrDefault(TKey key)
    content.vb: Public Function GetValueOrDefault(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to search for.
    return:
      type: '{TValue}'
      description: The value for the key, or the default value of type <typeparamref name="TValue" /> if no matching key was found.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)
  id: GetValueOrDefault(`0,`1)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: GetValueOrDefault(TKey, TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.GetValueOrDefault(TKey, TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.GetValueOrDefault(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 489
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the value for a given key if a matching key exists in the dictionary.
  syntax:
    content: public TValue GetValueOrDefault(TKey key, TValue defaultValue)
    content.vb: Public Function GetValueOrDefault(key As TKey, defaultValue As TValue) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to search for.
    - id: defaultValue
      type: '{TValue}'
      description: The default value to return if no matching key is found in the dictionary.
    return:
      type: '{TValue}'
      description: The value for the key, or <paramref name="defaultValue" /> if no matching key was found.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable
  id: ToImmutable
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ToImmutable()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.ToImmutable()
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.ToImmutable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 511
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable dictionary based on the contents of this instance.
  remarks: >-
    This method is an O(n) operation, and approaches O(1) time as the number of

    actual mutations to the set since the last call to this method approaches 0.
  syntax:
    content: public ImmutableDictionary<TKey, TValue> ToImmutable()
    content.vb: Public Function ToImmutable As ImmutableDictionary(Of TKey, TValue)
    return:
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: An immutable map.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Add(TKey, TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Add(TKey, TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Add(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 536
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an element with the provided key and value to the [System.Collections.Generic.IDictionary`2]().
  syntax:
    content: public void Add(TKey key, TValue value)
    content.vb: Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: The object to use as the key of the element to add.
    - id: value
      type: '{TValue}'
      description: The object to use as the value of the element to add.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
  - type: System.ArgumentException
    description: An element with the same key already exists in the .
  - type: System.NotSupportedException
    description: The  is read-only.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ContainsKey(TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.ContainsKey(TKey)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.ContainsKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 550
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the [System.Collections.Generic.IDictionary`2]() contains an element with the specified key.
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ContainsValue(TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.ContainsValue(TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.ContainsValue(TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 567
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Determines whether the [System.Collections.Immutable.ImmutableDictionary`2](System.Collections.Immutable.ImmutableDictionary`2.yml)

    contains an element with the specified value.
  syntax:
    content: public bool ContainsValue(TValue value)
    content.vb: Public Function ContainsValue(value As TValue) As Boolean
    parameters:
    - id: value
      type: '{TValue}'
      description: >-
        The value to locate in the <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.

        The value can be null for reference types.
    return:
      type: System.Boolean
      description: >-
        true if the <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> contains

        an element with the specified value; otherwise, false.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Remove(TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Remove(TKey)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Remove(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 590
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the element with the specified key from the [System.Collections.Generic.IDictionary`2]().
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
  - type: System.NotSupportedException
    description: The  is read-only.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: TryGetValue(TKey, out TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.TryGetValue(TKey, out TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.TryGetValue(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 605
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the value associated with the specified key.
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value to get.
    - id: value
      type: '{TValue}'
      description: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value of the type <typeparamref name="TValue" />. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if the object that implements [System.Collections.Generic.IDictionary`2]() contains an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)
  id: TryGetKey(`0,`0@)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: TryGetKey(TKey, out TKey)
  name.vb: TryGetKey(TKey, ByRef TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.TryGetKey(TKey, out TKey)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.TryGetKey(TKey, ByRef TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 613
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content: public bool TryGetKey(TKey equalKey, out TKey actualKey)
    content.vb: Public Function TryGetKey(equalKey As TKey, ByRef actualKey As TKey) As Boolean
    parameters:
    - id: equalKey
      type: '{TKey}'
    - id: actualKey
      type: '{TKey}'
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Add(KeyValuePair<TKey, TValue>)
  name.vb: Add(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 623
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an item to the [System.Collections.Generic.ICollection`1]().
  syntax:
    content: public void Add(KeyValuePair<TKey, TValue> item)
    content.vb: Public Sub Add(item As KeyValuePair(Of TKey, TValue))
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
  exceptions:
  - type: System.NotSupportedException
    description: The  is read-only.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 632
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes all items from the [System.Collections.Generic.ICollection`1]().
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.NotSupportedException
    description: The  is read-only.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Contains(KeyValuePair<TKey, TValue>)
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 645
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the [System.Collections.Generic.ICollection`1]() contains a specific value.
  syntax:
    content: public bool Contains(KeyValuePair<TKey, TValue> item)
    content.vb: Public Function Contains(item As KeyValuePair(Of TKey, TValue)) As Boolean
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
    return:
      type: System.Boolean
      description: true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 653
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
    - id: arrayIndex
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: Remove(KeyValuePair<TKey, TValue>)
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 675
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the first occurrence of a specific object from the [System.Collections.Generic.ICollection`1]().
  syntax:
    content: public bool Remove(KeyValuePair<TKey, TValue> item)
    content.vb: Public Function Remove(item As KeyValuePair(Of TKey, TValue)) As Boolean
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
    return:
      type: System.Boolean
      description: true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
  exceptions:
  - type: System.NotSupportedException
    description: The  is read-only.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 696
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Builder.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue).Builder.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 707
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An [System.Collections.IEnumerator]() object that can be used to iterate through the collection.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  name.vb: IEqualityComparer(Of TKey)
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEqualityComparer{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TValue>
  name.vb: IEqualityComparer(Of TValue)
  fullName: System.Collections.Generic.IEqualityComparer<TValue>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<T>
  name.vb: ICollection(Of T)
  fullName: System.Collections.Generic.ICollection<T>
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TKey>
  name.vb: IEnumerable(Of TKey)
  fullName: System.Collections.Generic.IEnumerable<TKey>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<TKey, TValue>
  name.vb: IDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  name.vb: ICollection(Of TKey)
  fullName: System.Collections.Generic.ICollection<TKey>
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TValue>
  name.vb: IEnumerable(Of TValue)
  fullName: System.Collections.Generic.IEnumerable<TValue>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TValue>
  name.vb: ICollection(Of TValue)
  fullName: System.Collections.Generic.ICollection<TValue>
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.NotImplementedException
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  fullName: System.Array
- uid: System.ArgumentNullException
- uid: System.Collections.Generic.KeyNotFoundException
- uid: System.NotSupportedException
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableDictionary`2.Enumerator
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableDictionary`2.Enumerator.yml
  name: ImmutableDictionary.Enumerator<>
  name.vb: ImmutableDictionary.Enumerator(Of )
  fullName: System.Collections.Immutable.ImmutableDictionary.Enumerator<>
  fullName.vb: System.Collections.Immutable.ImmutableDictionary.Enumerator(Of )
  type: Struct
  summary: Enumerates the contents of the collection in an allocation-free manner.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableDictionary`2.Enumerator
    name: ImmutableDictionary.Enumerator
    fullName: System.Collections.Immutable.ImmutableDictionary.Enumerator
    href: System.Collections.Immutable.ImmutableDictionary`2.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableDictionary`2.Enumerator
    name: ImmutableDictionary.Enumerator
    fullName: System.Collections.Immutable.ImmutableDictionary.Enumerator
    href: System.Collections.Immutable.ImmutableDictionary`2.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableDictionary`2
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: ImmutableDictionary<TKey, TValue>
  name.vb: ImmutableDictionary(Of TKey, TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue)
  type: Class
  summary: An immutable unordered dictionary implementation.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    fullName: System.Collections.Immutable.ImmutableDictionary
    href: System.Collections.Immutable.ImmutableDictionary`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    fullName: System.Collections.Immutable.ImmutableDictionary
    href: System.Collections.Immutable.ImmutableDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.ArgumentException
- uid: System.Collections.Immutable.IImmutableDictionary`2
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: IImmutableDictionary<TKey, TValue>
  name.vb: IImmutableDictionary(Of TKey, TValue)
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue)
  type: Interface
  summary: An immutable key-value dictionary.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableDictionary`2
    name: IImmutableDictionary
    fullName: System.Collections.Immutable.IImmutableDictionary
    href: System.Collections.Immutable.IImmutableDictionary`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableDictionary`2
    name: IImmutableDictionary
    fullName: System.Collections.Immutable.IImmutableDictionary
    href: System.Collections.Immutable.IImmutableDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  name.vb: KeyValuePair(Of TKey, TValue)()
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
