items:
- uid: System.IO.Compression.ZipFile
  id: ZipFile
  parent: System.IO.Compression
  children:
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,CompressionLevel,System.Boolean)
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,CompressionLevel,System.Boolean,System.Text.Encoding)
  - System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  - System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  - System.IO.Compression.ZipFile.Open(System.String,ZipArchiveMode)
  - System.IO.Compression.ZipFile.Open(System.String,ZipArchiveMode,System.Text.Encoding)
  - System.IO.Compression.ZipFile.OpenRead(System.String)
  href: System.IO.Compression.ZipFile.yml
  name: ZipFile
  fullName: System.IO.Compression.ZipFile
  type: Class
  source:
    remote: &o0
      path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 8
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  syntax:
    content: public class ZipFile
    content.vb: Public Class ZipFile
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.IO.Compression.ZipFile.OpenRead(System.String)
  id: OpenRead(System.String)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: OpenRead(String)
  fullName: System.IO.Compression.ZipFile.OpenRead(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 33
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Opens a <code>ZipArchive</code> on the specified path for reading. The specified file is opened with <code>FileMode.Open</code>.
  syntax:
    content: public static ZipArchive OpenRead(string archiveFileName)
    content.vb: Public Shared Function OpenRead(archiveFileName As String) As ZipArchive
    parameters:
    - id: archiveFileName
      type: System.String
      description: >-
        A string specifying the path on the filesystem to open the archive on. The path is permitted

        to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory.
    return:
      type: ZipArchive
  exceptions:
  - type: System.ArgumentException
    description: >-
      archiveFileName is a zero-length string, contains only white space, or contains one

      or more invalid characters as defined by InvalidPathChars.
  - type: System.ArgumentNullException
    description: archiveFileName is null.
  - type: System.IO.PathTooLongException
    description: >-
      The specified archiveFileName exceeds the system-defined maximum length.

      For example, on Windows-based platforms, paths must be less than 248 characters,

      and file names must be less than 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: The specified archiveFileName is invalid, (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: An unspecified I/O error occurred while opening the file.
  - type: System.UnauthorizedAccessException
    description: >-
      archiveFileName specified a directory.

      -OR- The caller does not have the required permission.
  - type: System.IO.FileNotFoundException
    description: The file specified in archiveFileName was not found.
  - type: System.NotSupportedException
    description: archiveFileName is in an invalid format.
- uid: System.IO.Compression.ZipFile.Open(System.String,ZipArchiveMode)
  id: Open(System.String,ZipArchiveMode)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: Open(String, ZipArchiveMode)
  fullName: System.IO.Compression.ZipFile.Open(System.String, ZipArchiveMode)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 74
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Opens a <code>ZipArchive</code> on the specified <code>archiveFileName</code> in the specified <code>ZipArchiveMode</code> mode.
  syntax:
    content: public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode)
    content.vb: Public Shared Function Open(archiveFileName As String, mode As ZipArchiveMode) As ZipArchive
    parameters:
    - id: archiveFileName
      type: System.String
      description: >-
        A string specifying the path on the filesystem to open the archive on.

        The path is permitted to specify relative or absolute path information.

        Relative path information is interpreted as relative to the current working directory.
    - id: mode
      type: ZipArchiveMode
      description: >-
        See the description of the <code>ZipArchiveMode</code> enum.

        If <code>Read</code> is specified, the file is opened with <code>System.IO.FileMode.Open</code>, and will throw

        a <code>FileNotFoundException</code> if the file does not exist.

        If <code>Create</code> is specified, the file is opened with <code>System.IO.FileMode.CreateNew</code>, and will throw

        a <code>System.IO.IOException</code> if the file already exists.

        If <code>Update</code> is specified, the file is opened with <code>System.IO.FileMode.OpenOrCreate</code>.

        If the file exists and is a Zip file, its entries will become accessible, and may be modified, and new entries may be created.

        If the file exists and is not a Zip file, a <code>ZipArchiveException</code> will be thrown.

        If the file exists and is empty or does not exist, a new Zip file will be created.

        Note that creating a Zip file with the <code>ZipArchiveMode.Create</code> mode is more efficient when creating a new Zip file.
    return:
      type: ZipArchive
  exceptions:
  - type: System.ArgumentException
    description: >-
      archiveFileName is a zero-length string, contains only white space,

      or contains one or more invalid characters as defined by InvalidPathChars.
  - type: System.ArgumentNullException
    description: path is null.
  - type: System.IO.PathTooLongException
    description: >-
      The specified archiveFileName exceeds the system-defined maximum length.

      For example, on Windows-based platforms, paths must be less than 248 characters,

      and file names must be less than 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: The specified archiveFileName is invalid, (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: An unspecified I/O error occurred while opening the file.
  - type: System.UnauthorizedAccessException
    description: >-
      archiveFileName specified a directory.

      -OR- The caller does not have the required permission.
  - type: System.ArgumentOutOfRangeException
    description: mode specified an invalid value.
  - type: System.IO.FileNotFoundException
    description: The file specified in archiveFileName was not found.
  - type: System.NotSupportedException
    description: archiveFileName is in an invalid format.
- uid: System.IO.Compression.ZipFile.Open(System.String,ZipArchiveMode,System.Text.Encoding)
  id: Open(System.String,ZipArchiveMode,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: Open(String, ZipArchiveMode, Encoding)
  fullName: System.IO.Compression.ZipFile.Open(System.String, ZipArchiveMode, System.Text.Encoding)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 155
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Opens a <code>ZipArchive</code> on the specified <code>archiveFileName</code> in the specified <code>ZipArchiveMode</code> mode.
  syntax:
    content: public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode, Encoding entryNameEncoding)
    content.vb: Public Shared Function Open(archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive
    parameters:
    - id: archiveFileName
      type: System.String
      description: >-
        A string specifying the path on the filesystem to open the archive on.

        The path is permitted to specify relative or absolute path information.

        Relative path information is interpreted as relative to the current working directory.
    - id: mode
      type: ZipArchiveMode
      description: >-
        See the description of the <code>ZipArchiveMode</code> enum.

        If <code>Read</code> is specified, the file is opened with <code>System.IO.FileMode.Open</code>, and will throw

        a <code>FileNotFoundException</code> if the file does not exist.

        If <code>Create</code> is specified, the file is opened with <code>System.IO.FileMode.CreateNew</code>, and will throw

        a <code>System.IO.IOException</code> if the file already exists.

        If <code>Update</code> is specified, the file is opened with <code>System.IO.FileMode.OpenOrCreate</code>.

        If the file exists and is a Zip file, its entries will become accessible, and may be modified, and new entries may be created.

        If the file exists and is not a Zip file, a <code>ZipArchiveException</code> will be thrown.

        If the file exists and is empty or does not exist, a new Zip file will be created.

        Note that creating a Zip file with the <code>ZipArchiveMode.Create</code> mode is more efficient when creating a new Zip file.
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: >-
        The encoding to use when reading or writing entry names in this ZipArchive.

        ///     <para>NOTE: Specifying this parameter to values other than <c>null</c> is discouraged.

        However, this may be necessary for interoperability with ZIP archive tools and libraries that do not correctly support

        UTF-8 encoding for entry names.<br />

        This value is used as follows:</para><para><strong>Reading (opening) ZIP archive files:</strong></para><para>If <c>entryNameEncoding</c> is not specified (<c>== null</c>):</para><list><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set,

        use the current system default code page (<c>Encoding.Default</c>) in order to decode the entry name.</item><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set,

        use UTF-8 (<c>Encoding.UTF8</c>) in order to decode the entry name.</item></list><para>If <c>entryNameEncoding</c> is specified (<c>!= null</c>):</para><list><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set,

        use the specified <c>entryNameEncoding</c> in order to decode the entry name.</item><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set,

        use UTF-8 (<c>Encoding.UTF8</c>) in order to decode the entry name.</item></list><para><strong>Writing (saving) ZIP archive files:</strong></para><para>If <c>entryNameEncoding</c> is not specified (<c>== null</c>):</para><list><item>For entry names that contain characters outside the ASCII range,

        the language encoding flag (EFS) will be set in the general purpose bit flag of the local file header,

        and UTF-8 (<c>Encoding.UTF8</c>) will be used in order to encode the entry name into bytes.</item><item>For entry names that do not contain characters outside the ASCII range,

        the language encoding flag (EFS) will not be set in the general purpose bit flag of the local file header,

        and the current system default code page (<c>Encoding.Default</c>) will be used to encode the entry names into bytes.</item></list><para>If <c>entryNameEncoding</c> is specified (<c>!= null</c>):</para><list><item>The specified <c>entryNameEncoding</c> will always be used to encode the entry names into bytes.

        The language encoding flag (EFS) in the general purpose bit flag of the local file header will be set if and only

        if the specified <c>entryNameEncoding</c> is a UTF-8 encoding.</item></list><para>Note that Unicode encodings other than UTF-8 may not be currently used for the <c>entryNameEncoding</c>,

        otherwise an <see cref="T:System.ArgumentException" /> is thrown.</para>
    return:
      type: ZipArchive
  exceptions:
  - type: System.ArgumentException
    description: >-
      archiveFileName is a zero-length string, contains only white space,

      or contains one or more invalid characters as defined by InvalidPathChars.
  - type: System.ArgumentNullException
    description: path is null.
  - type: System.IO.PathTooLongException
    description: >-
      The specified archiveFileName exceeds the system-defined maximum length.

      For example, on Windows-based platforms, paths must be less than 248 characters,

      and file names must be less than 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: The specified archiveFileName is invalid, (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: An unspecified I/O error occurred while opening the file.
  - type: System.UnauthorizedAccessException
    description: >-
      archiveFileName specified a directory.

      -OR- The caller does not have the required permission.
  - type: System.ArgumentOutOfRangeException
    description: mode specified an invalid value.
  - type: System.IO.FileNotFoundException
    description: The file specified in archiveFileName was not found.
  - type: System.NotSupportedException
    description: archiveFileName is in an invalid format.
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  id: CreateFromDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: CreateFromDirectory(String, String)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 246
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: >-
    <p>Creates a Zip archive at the path <code>destinationArchiveFileName</code> that contains the files and directories from

    the directory specified by <code>sourceDirectoryName</code>. The directory structure is preserved in the archive, and a

    recursive search is done for files to be archived. The archive must not exist. If the directory is empty, an empty

    archive will be created. If a file in the directory cannot be added to the archive, the archive will be left incomplete

    and invalid and the method will throw an exception. This method does not include the base directory into the archive.

    If an error is encountered while adding files to the archive, this method will stop adding files and leave the archive

    in an invalid state. The paths are permitted to specify relative or absolute path information. Relative path information

    is interpreted as relative to the current working directory. If a file in the archive has data in the last write time

    field that is not a valid Zip timestamp, an indicator value of 1980 January 1 at midnight will be used for the file's

    last modified time.</p>

    <p>If an entry with the specified name already exists in the archive, a second entry will be created that has an identical name.</p>

    <p>Since no <code>CompressionLevel</code> is specified, the default provided by the implementation of the underlying compression

    algorithm will be used; the <code>ZipArchive</code> will not impose its own default.

    (Currently, the underlying compression algorithm is provided by the <code>System.IO.Compression.DeflateStream</code> class.)</p>
  syntax:
    content: public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName)
    content.vb: Public Shared Sub CreateFromDirectory(sourceDirectoryName As String, destinationArchiveFileName As String)
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: The path to the directory on the file system to be archived.
    - id: destinationArchiveFileName
      type: System.String
      description: The name of the archive to be created.
  exceptions:
  - type: System.ArgumentException
    description: >-
      sourceDirectoryName or destinationArchiveFileName is a zero-length

      string, contains only white space, or contains one or more invalid characters as defined by

      InvalidPathChars.
  - type: System.ArgumentNullException
    description: sourceDirectoryName or destinationArchiveFileName is null.
  - type: System.IO.PathTooLongException
    description: >-
      In sourceDirectoryName or destinationArchiveFileName, the specified

      path, file name, or both exceed the system-defined maximum length.

      For example, on Windows-based platforms, paths must be less than 248 characters, and file

      names must be less than 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: >-
      The path specified in sourceDirectoryName or destinationArchiveFileName

      is invalid, (for example, it is on an unmapped drive).

      -OR- The directory specified by sourceDirectoryName does not exist.
  - type: System.IO.IOException
    description: >-
      destinationArchiveFileName already exists.

      -OR- An I/O error occurred while opening a file to be archived.
  - type: System.UnauthorizedAccessException
    description: >-
      destinationArchiveFileName specified a directory.

      -OR- The caller does not have the required permission.
  - type: System.NotSupportedException
    description: >-
      sourceDirectoryName or destinationArchiveFileName is

      in an invalid format.
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,CompressionLevel,System.Boolean)
  id: CreateFromDirectory(System.String,System.String,CompressionLevel,System.Boolean)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: CreateFromDirectory(String, String, CompressionLevel, Boolean)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(System.String, System.String, CompressionLevel, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 296
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  syntax:
    content: public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory)
    content.vb: Public Shared Sub CreateFromDirectory(sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean)
    parameters:
    - id: sourceDirectoryName
      type: System.String
    - id: destinationArchiveFileName
      type: System.String
    - id: compressionLevel
      type: CompressionLevel
    - id: includeBaseDirectory
      type: System.Boolean
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,CompressionLevel,System.Boolean,System.Text.Encoding)
  id: CreateFromDirectory(System.String,System.String,CompressionLevel,System.Boolean,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: CreateFromDirectory(String, String, CompressionLevel, Boolean, Encoding)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(System.String, System.String, CompressionLevel, System.Boolean, System.Text.Encoding)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 369
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  syntax:
    content: public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding)
    content.vb: Public Shared Sub CreateFromDirectory(sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, entryNameEncoding As Encoding)
    parameters:
    - id: sourceDirectoryName
      type: System.String
    - id: destinationArchiveFileName
      type: System.String
    - id: compressionLevel
      type: CompressionLevel
    - id: includeBaseDirectory
      type: System.Boolean
    - id: entryNameEncoding
      type: System.Text.Encoding
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  id: ExtractToDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: ExtractToDirectory(String, String)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 407
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: >-
    Extracts all of the files in the specified archive to a directory on the file system.

    The specified directory must not exist. This method will create all subdirectories and the specified directory.

    If there is an error while extracting the archive, the archive will remain partially extracted. Each entry will

    be extracted such that the extracted file has the same relative path to the destinationDirectoryName as the entry

    has to the archive. The path is permitted to specify relative or absolute path information. Relative path information

    is interpreted as relative to the current working directory. If a file to be archived has an invalid last modified

    time, the first datetime representable in the Zip timestamp format (midnight on January 1, 1980) will be used.
  syntax:
    content: public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName)
    content.vb: Public Shared Sub ExtractToDirectory(sourceArchiveFileName As String, destinationDirectoryName As String)
    parameters:
    - id: sourceArchiveFileName
      type: System.String
    - id: destinationDirectoryName
      type: System.String
      description: The path to the directory on the file system. The directory specified must not exist, but the directory that it is contained in must exist.
  exceptions:
  - type: System.ArgumentException
    description: >-
      sourceArchive or destinationDirectoryName is a zero-length string, contains only white space,

      or contains one or more invalid characters as defined by InvalidPathChars.
  - type: System.ArgumentNullException
    description: sourceArchive or destinationDirectoryName is null.
  - type: System.IO.PathTooLongException
    description: >-
      sourceArchive or destinationDirectoryName specifies a path, file name,

      or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,

      and file names must be less than 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: >-
      The path specified by sourceArchive or destinationDirectoryName is invalid,

      (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: "The directory specified by destinationDirectoryName already exists.\r\n-or- An I/O error has occurred. -or- An archive entry’s name is zero-length, contains only white space, or contains one or\r\nmore invalid characters as defined by InvalidPathChars. -or- Extracting an archive entry would result in a file destination that is outside the destination directory (for example, because of parent directory accessors). -or- An archive entry has the same name as an already extracted entry from the same archive."
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission.
  - type: System.NotSupportedException
    description: sourceArchive or destinationDirectoryName is in an invalid format.
  - type: System.IO.FileNotFoundException
    description: sourceArchive was not found.
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  id: ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  href: System.IO.Compression.ZipFile.yml
  name: ExtractToDirectory(String, String, Encoding)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(System.String, System.String, System.Text.Encoding)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 465
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: >-
    Extracts all of the files in the specified archive to a directory on the file system.

    The specified directory must not exist. This method will create all subdirectories and the specified directory.

    If there is an error while extracting the archive, the archive will remain partially extracted. Each entry will

    be extracted such that the extracted file has the same relative path to the destinationDirectoryName as the entry

    has to the archive. The path is permitted to specify relative or absolute path information. Relative path information

    is interpreted as relative to the current working directory. If a file to be archived has an invalid last modified

    time, the first datetime representable in the Zip timestamp format (midnight on January 1, 1980) will be used.
  syntax:
    content: public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding)
    content.vb: Public Shared Sub ExtractToDirectory(sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)
    parameters:
    - id: sourceArchiveFileName
      type: System.String
    - id: destinationDirectoryName
      type: System.String
      description: The path to the directory on the file system. The directory specified must not exist, but the directory that it is contained in must exist.
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: >-
        The encoding to use when reading or writing entry names in this ZipArchive.

        ///     <para>NOTE: Specifying this parameter to values other than <c>null</c> is discouraged.

        However, this may be necessary for interoperability with ZIP archive tools and libraries that do not correctly support

        UTF-8 encoding for entry names.<br />

        This value is used as follows:</para><para>If <c>entryNameEncoding</c> is not specified (<c>== null</c>):</para><list><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set,

        use the current system default code page (<c>Encoding.Default</c>) in order to decode the entry name.</item><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set,

        use UTF-8 (<c>Encoding.UTF8</c>) in order to decode the entry name.</item></list><para>If <c>entryNameEncoding</c> is specified (<c>!= null</c>):</para><list><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set,

        use the specified <c>entryNameEncoding</c> in order to decode the entry name.</item><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set,

        use UTF-8 (<c>Encoding.UTF8</c>) in order to decode the entry name.</item></list><para>Note that Unicode encodings other than UTF-8 may not be currently used for the <c>entryNameEncoding</c>,

        otherwise an <see cref="T:System.ArgumentException" /> is thrown.</para>
  exceptions:
  - type: System.ArgumentException
    description: >-
      sourceArchive or destinationDirectoryName is a zero-length string, contains only white space,

      or contains one or more invalid characters as defined by InvalidPathChars.
  - type: System.ArgumentNullException
    description: sourceArchive or destinationDirectoryName is null.
  - type: System.IO.PathTooLongException
    description: >-
      sourceArchive or destinationDirectoryName specifies a path, file name,

      or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,

      and file names must be less than 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: >-
      The path specified by sourceArchive or destinationDirectoryName is invalid,

      (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: "The directory specified by destinationDirectoryName already exists.\r\n-or- An I/O error has occurred. -or- An archive entry’s name is zero-length, contains only white space, or contains one or\r\nmore invalid characters as defined by InvalidPathChars. -or- Extracting an archive entry would result in a file destination that is outside the destination directory (for example, because of parent directory accessors). -or- An archive entry has the same name as an already extracted entry from the same archive."
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission.
  - type: System.NotSupportedException
    description: sourceArchive or destinationDirectoryName is in an invalid format.
  - type: System.IO.FileNotFoundException
    description: sourceArchive was not found.
references:
- uid: System.IO.Compression
  isExternal: false
  name: System.IO.Compression
  fullName: System.IO.Compression
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.ArgumentException
- uid: System.ArgumentNullException
- uid: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
- uid: System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
- uid: System.NotSupportedException
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: ZipArchive
  isExternal: true
  name: ZipArchive
  fullName: ZipArchive
- uid: System.ArgumentOutOfRangeException
- uid: ZipArchiveMode
  isExternal: true
  name: ZipArchiveMode
  fullName: ZipArchiveMode
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: CompressionLevel
  isExternal: true
  name: CompressionLevel
  fullName: CompressionLevel
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
