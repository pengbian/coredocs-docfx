items:
- uid: System.Collections.Immutable.ImmutableHashSet`1
  id: ImmutableHashSet`1
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableHashSet`1.Add(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.Clear
  - System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.Count
  - System.Collections.Immutable.ImmutableHashSet`1.Empty
  - System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator
  - System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsEmpty
  - System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.KeyComparer
  - System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.ToBuilder
  - System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)
  - System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ImmutableHashSet<T>
  name.vb: ImmutableHashSet(Of T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 16
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An immutable unordered hash set implementation.
  syntax:
    content: 'public sealed class ImmutableHashSet<T> : IImmutableSet<T>, IHashKeyCollection<T>, IReadOnlyCollection<T>, ICollection<T>, IEnumerable<T>, ISet<T>, ICollection, IEnumerable, IStrongEnumerable<T, ImmutableHashSet<T>.Enumerator>'
    content.vb: Public NotInheritable Class ImmutableHashSet(Of T) Implements IImmutableSet(Of T), IHashKeyCollection(Of T), IReadOnlyCollection(Of T), ICollection(Of T), IEnumerable(Of T), ISet(Of T), ICollection, IEnumerable, IStrongEnumerable(Of T, ImmutableHashSet(Of T).Enumerator)
    typeParameters:
    - id: T
      description: The type of elements in the set.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Immutable.IImmutableSet{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - ISet{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableHashSet`1.Empty
  id: Empty
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Empty
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 24
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An empty immutable hash set with the default comparer for <typeparamref name="T" />.
  syntax:
    content: public static readonly ImmutableHashSet<T> Empty
    content.vb: Public Shared ReadOnly Empty As ImmutableHashSet(Of T)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 75
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableHashSet<T> Clear()
    content.vb: Public Function Clear As ImmutableHashSet(Of T)
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
- uid: System.Collections.Immutable.ImmutableHashSet`1.Count
  id: Count
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Count
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 85
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsEmpty
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 93
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableHashSet`1.KeyComparer
  id: KeyComparer
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.KeyComparer
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 103
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public IEqualityComparer<T> KeyComparer { get; }
    content.vb: Public ReadOnly Property KeyComparer As IEqualityComparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear
  id: System#Collections#Immutable#IImmutableSet{T}#Clear
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IImmutableSet<T>.Clear()
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Immutable.IImmutableSet<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 115
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Clear()
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Clear As IImmutableSet(Of T) Implements IImmutableSet(Of T).Clear
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 128
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.ICollection]().
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 137
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.ICollection]() interface.
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableHashSet`1.ToBuilder
  id: ToBuilder
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ToBuilder()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.ToBuilder()
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).ToBuilder()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 176
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Creates a collection with the same contents as this collection that

    can be efficiently mutated across multiple operations using standard

    mutable interfaces.
  remarks: >-
    This is an O(1) operation and results in only a single (small) memory allocation.

    The mutable collection that is returned is *not* thread-safe.
  syntax:
    content: public ImmutableHashSet<T>.Builder ToBuilder()
    content.vb: Public Function ToBuilder As ImmutableHashSet(Of T).Builder
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1.Builder
- uid: System.Collections.Immutable.ImmutableHashSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 188
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableHashSet<T> Add(T item)
    content.vb: Public Function Add(item As T) As ImmutableHashSet(Of T)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
- uid: System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 201
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableHashSet<T> Remove(T item)
    content.vb: Public Function Remove(item As T) As ImmutableHashSet(Of T)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
- uid: System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)
  id: TryGetValue(`0,`0@)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: TryGetValue(T, out T)
  name.vb: TryGetValue(T, ByRef T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.TryGetValue(T, out T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).TryGetValue(T, ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 222
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the set for a given value and returns the equal value it finds, if any.
  remarks: >-
    This can be useful when you want to reuse a previously stored reference instead of

    a newly constructed one (so that more sharing of references can occur) or to look up

    a value that has more complete data than the value you currently have, although their

    comparer functions indicate they are equal.
  syntax:
    content: public bool TryGetValue(T equalValue, out T actualValue)
    content.vb: Public Function TryGetValue(equalValue As T, ByRef actualValue As T) As Boolean
    parameters:
    - id: equalValue
      type: '{T}'
      description: The value to search for.
    - id: actualValue
      type: '{T}'
      description: The value from the set that the search found, or the original value if the search yielded no match.
    return:
      type: System.Boolean
      description: A value indicating whether the search was successful.
- uid: System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  id: Union(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Union(IEnumerable<T>)
  name.vb: Union(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Union(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Union(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 241
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableHashSet<T> Union(IEnumerable<T> other)
    content.vb: Public Function Union(other As IEnumerable(Of T)) As ImmutableHashSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
- uid: System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  id: Intersect(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Intersect(IEnumerable<T>)
  name.vb: Intersect(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Intersect(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Intersect(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 253
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableHashSet<T> Intersect(IEnumerable<T> other)
    content.vb: Public Function Intersect(other As IEnumerable(Of T)) As ImmutableHashSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
- uid: System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  id: Except(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Except(IEnumerable<T>)
  name.vb: Except(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Except(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Except(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 266
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableHashSet<T> Except(IEnumerable<T> other)
    content.vb: Public Function Except(other As IEnumerable(Of T)) As ImmutableHashSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
- uid: System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: SymmetricExcept(IEnumerable<T>)
  name.vb: SymmetricExcept(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).SymmetricExcept(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 279
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Produces a set that contains elements either in this set or a given sequence, but not both.
  syntax:
    content: public ImmutableHashSet<T> SymmetricExcept(IEnumerable<T> other)
    content.vb: Public Function SymmetricExcept(other As IEnumerable(Of T)) As ImmutableHashSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The other sequence of items.
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
      description: The new set.
- uid: System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: SetEquals(IEnumerable<T>)
  name.vb: SetEquals(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 294
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Checks whether a given sequence of items entirely describe the contents of this set.
  syntax:
    content: public bool SetEquals(IEnumerable<T> other)
    content.vb: Public Function SetEquals(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence of items to check against this set.
    return:
      type: System.Boolean
      description: A value indicating whether the sets are equal.
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 312
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set is a property (strict) subset of a specified collection.
  syntax:
    content: public bool IsProperSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a correct subset of <paramref name="other" />; otherwise, false.
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 325
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set is a correct superset of a specified collection.
  syntax:
    content: public bool IsProperSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a correct superset of <paramref name="other" />; otherwise, false.
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  name.vb: IsSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 338
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether a set is a subset of a specified collection.
  syntax:
    content: public bool IsSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a subset of <paramref name="other" />; otherwise, false.
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  name.vb: IsSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 351
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content: public bool IsSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a superset of <paramref name="other" />; otherwise, false.
- uid: System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Overlaps(IEnumerable<T>)
  name.vb: Overlaps(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 364
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content: public bool Overlaps(IEnumerable<T> other)
    content.vb: Public Function Overlaps(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)
  id: System#Collections#Immutable#IImmutableSet{T}#Add(`0)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IImmutableSet<T>.Add(T)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Immutable.IImmutableSet<T>.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 379
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Add(T item)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Add(item As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Add
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)
  id: System#Collections#Immutable#IImmutableSet{T}#Remove(`0)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IImmutableSet<T>.Remove(T)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Remove(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Immutable.IImmutableSet<T>.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 388
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Remove(T item)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Remove(item As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Remove
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IImmutableSet<T>.Union(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Union(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Immutable.IImmutableSet<T>.Union(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Union(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 397
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Union(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Union(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Union
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IImmutableSet<T>.Intersect(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Intersect(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Immutable.IImmutableSet<T>.Intersect(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Intersect(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 406
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Intersect(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Intersect(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Intersect
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IImmutableSet<T>.Except(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Except(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Immutable.IImmutableSet<T>.Except(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Except(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 415
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Except(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Except(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Except
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IImmutableSet<T>.SymmetricExcept(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 426
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Produces a set that contains elements either in this set or a given sequence, but not both.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.SymmetricExcept(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).SymmetricExcept
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The other sequence of items.
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
      description: The new set.
- uid: System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Contains(T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 435
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})
  id: WithComparer(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: WithComparer(IEqualityComparer<T>)
  name.vb: WithComparer(IEqualityComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.WithComparer(System.Collections.Generic.IEqualityComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).WithComparer(System.Collections.Generic.IEqualityComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 444
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableHashSet<T> WithComparer(IEqualityComparer<T> equalityComparer)
    content.vb: Public Function WithComparer(equalityComparer As IEqualityComparer(Of T)) As ImmutableHashSet(Of T)
    parameters:
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 516
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection<T>.CopyTo(T[], Int32)
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 524
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 539
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.IList`1]() interface.
  syntax:
    content: void ICollection<T>.Add(T item)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
    parameters:
    - id: item
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 547
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 555
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.IList`1]() interface.
  syntax:
    content: bool ICollection<T>.Remove(T item)
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 569
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
  syntax:
    content: void ICollection.CopyTo(Array array, int arrayIndex)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, arrayIndex As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <paramref name="array" /> at which copying begins.
- uid: System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 591
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: public ImmutableHashSet<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As ImmutableHashSet(Of T).Enumerator
    return:
      type: System.Collections.Immutable.ImmutableHashSet`1.Enumerator
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 599
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
- uid: System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 614
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An [System.Collections.IEnumerator]() object that can be used to iterate through the collection.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Immutable.IImmutableSet`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IImmutableSet<T>
  name.vb: IImmutableSet(Of T)
  fullName: System.Collections.Immutable.IImmutableSet<T>
  fullName.vb: System.Collections.Immutable.IImmutableSet(Of T)
  type: Interface
  summary: A set of elements that can only be modified by creating a new instance of the set.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableHashSet`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ImmutableHashSet<T>
  name.vb: ImmutableHashSet(Of T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T)
  type: Class
  summary: An immutable unordered hash set implementation.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableHashSet`1
    name: ImmutableHashSet
    fullName: System.Collections.Immutable.ImmutableHashSet
    href: System.Collections.Immutable.ImmutableHashSet`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableHashSet`1
    name: ImmutableHashSet
    fullName: System.Collections.Immutable.ImmutableHashSet
    href: System.Collections.Immutable.ImmutableHashSet`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Immutable.IImmutableSet{{T}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableSet`1
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IImmutableSet<T>
  name.vb: IImmutableSet(Of T)
  fullName: System.Collections.Immutable.IImmutableSet<T>
  fullName.vb: System.Collections.Immutable.IImmutableSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: ImmutableHashSet.Builder<>
  name.vb: ImmutableHashSet.Builder(Of )
  fullName: System.Collections.Immutable.ImmutableHashSet.Builder<>
  fullName.vb: System.Collections.Immutable.ImmutableHashSet.Builder(Of )
  type: Class
  summary: >-
    A hash set that mutates with little or no memory allocations,

    can produce and/or build on immutable hash set instances very efficiently.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableHashSet`1.Builder
    name: ImmutableHashSet.Builder
    fullName: System.Collections.Immutable.ImmutableHashSet.Builder
    href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableHashSet`1.Builder
    name: ImmutableHashSet.Builder
    fullName: System.Collections.Immutable.ImmutableHashSet.Builder
    href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<T>
  name.vb: ICollection(Of T)
  fullName: System.Collections.Generic.ICollection<T>
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  name.vb: IList(Of T)
  fullName: System.Collections.Generic.IList<T>
  fullName.vb: System.Collections.Generic.IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  fullName: System.Array
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableHashSet`1.Enumerator
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableHashSet`1.Enumerator.yml
  name: ImmutableHashSet.Enumerator<>
  name.vb: ImmutableHashSet.Enumerator(Of )
  fullName: System.Collections.Immutable.ImmutableHashSet.Enumerator<>
  fullName.vb: System.Collections.Immutable.ImmutableHashSet.Enumerator(Of )
  type: Struct
  summary: Enumerates the contents of the collection in an allocation-free manner.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableHashSet`1.Enumerator
    name: ImmutableHashSet.Enumerator
    fullName: System.Collections.Immutable.ImmutableHashSet.Enumerator
    href: System.Collections.Immutable.ImmutableHashSet`1.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableHashSet`1.Enumerator
    name: ImmutableHashSet.Enumerator
    fullName: System.Collections.Immutable.ImmutableHashSet.Enumerator
    href: System.Collections.Immutable.ImmutableHashSet`1.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
