items:
- uid: System.Collections.Immutable.ImmutableStack`1
  id: ImmutableStack`1
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableStack`1.Clear
  - System.Collections.Immutable.ImmutableStack`1.Empty
  - System.Collections.Immutable.ImmutableStack`1.GetEnumerator
  - System.Collections.Immutable.ImmutableStack`1.IsEmpty
  - System.Collections.Immutable.ImmutableStack`1.Peek
  - System.Collections.Immutable.ImmutableStack`1.Pop
  - System.Collections.Immutable.ImmutableStack`1.Pop(`0@)
  - System.Collections.Immutable.ImmutableStack`1.Push(`0)
  - System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear
  - System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop
  - System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: ImmutableStack<T>
  name.vb: ImmutableStack(Of T)
  fullName: System.Collections.Immutable.ImmutableStack<T>
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 17
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An immutable stack.
  syntax:
    content: 'public sealed class ImmutableStack<T> : IImmutableStack<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public NotInheritable Class ImmutableStack(Of T) Implements IImmutableStack(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: The type of element stored by the stack.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Immutable.IImmutableStack{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableStack`1.Empty
  id: Empty
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableStack<T>.Empty
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).Empty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 64
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the empty stack, upon which all stacks are built.
  syntax:
    content: public static ImmutableStack<T> Empty { get; }
    content.vb: Public Shared ReadOnly Property Empty As ImmutableStack(Of T)
    parameters: []
    return:
      type: System.Collections.Immutable.ImmutableStack`1
- uid: System.Collections.Immutable.ImmutableStack`1.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableStack<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 78
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the empty stack, upon which all stacks are built.
  syntax:
    content: public ImmutableStack<T> Clear()
    content.vb: Public Function Clear As ImmutableStack(Of T)
    return:
      type: System.Collections.Immutable.ImmutableStack`1
- uid: System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear
  id: System#Collections#Immutable#IImmutableStack{T}#Clear
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: IImmutableStack<T>.Clear()
  name.vb: System.Collections.Immutable.IImmutableStack<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableStack<T>.System.Collections.Immutable.IImmutableStack<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).System.Collections.Immutable.IImmutableStack<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 89
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an empty stack.
  syntax:
    content: IImmutableStack<T> IImmutableStack<T>.Clear()
    content.vb: Function System.Collections.Immutable.IImmutableStack<T>.Clear As IImmutableStack(Of T) Implements IImmutableStack(Of T).Clear
    return:
      type: System.Collections.Immutable.IImmutableStack{{T}}
- uid: System.Collections.Immutable.ImmutableStack`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableStack<T>.IsEmpty
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 100
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether this instance is empty.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableStack`1.Peek
  id: Peek
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: Peek()
  fullName: System.Collections.Immutable.ImmutableStack<T>.Peek()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).Peek()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 112
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the element on the top of the stack.
  syntax:
    content: public T Peek()
    content.vb: Public Function Peek As T
    return:
      type: '{T}'
      description: The element on the top of the stack.
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.ImmutableStack`1.Push(`0)
  id: Push(`0)
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: Push(T)
  fullName: System.Collections.Immutable.ImmutableStack<T>.Push(T)
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).Push(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 128
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Pushes an element onto a stack and returns the new stack.
  syntax:
    content: public ImmutableStack<T> Push(T value)
    content.vb: Public Function Push(value As T) As ImmutableStack(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: The element to push onto the stack.
    return:
      type: System.Collections.Immutable.ImmutableStack`1
      description: The new stack.
- uid: System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)
  id: System#Collections#Immutable#IImmutableStack{T}#Push(`0)
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: IImmutableStack<T>.Push(T)
  name.vb: System.Collections.Immutable.IImmutableStack<T>.Push(T)
  fullName: System.Collections.Immutable.ImmutableStack<T>.System.Collections.Immutable.IImmutableStack<T>.Push(T)
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).System.Collections.Immutable.IImmutableStack<T>.Push(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 141
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Pushes an element onto a stack and returns the new stack.
  syntax:
    content: IImmutableStack<T> IImmutableStack<T>.Push(T value)
    content.vb: Function System.Collections.Immutable.IImmutableStack<T>.Push(value As T) As IImmutableStack(Of T) Implements IImmutableStack(Of T).Push
    parameters:
    - id: value
      type: '{T}'
      description: The element to push onto the stack.
    return:
      type: System.Collections.Immutable.IImmutableStack{{T}}
      description: The new stack.
- uid: System.Collections.Immutable.ImmutableStack`1.Pop
  id: Pop
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: Pop()
  fullName: System.Collections.Immutable.ImmutableStack<T>.Pop()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).Pop()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 152
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a stack that lacks the top element on this stack.
  syntax:
    content: public ImmutableStack<T> Pop()
    content.vb: Public Function Pop As ImmutableStack(Of T)
    return:
      type: System.Collections.Immutable.ImmutableStack`1
      description: A stack; never <c>null</c>
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.ImmutableStack`1.Pop(`0@)
  id: Pop(`0@)
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: Pop(out T)
  name.vb: Pop(ByRef T)
  fullName: System.Collections.Immutable.ImmutableStack<T>.Pop(out T)
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).Pop(ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 171
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Pops the top element off the stack.
  syntax:
    content: public ImmutableStack<T> Pop(out T value)
    content.vb: Public Function Pop(ByRef value As T) As ImmutableStack(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: The value that was removed from the stack.
    return:
      type: System.Collections.Immutable.ImmutableStack`1
      description: A stack; never <c>null</c>
- uid: System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop
  id: System#Collections#Immutable#IImmutableStack{T}#Pop
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: IImmutableStack<T>.Pop()
  name.vb: System.Collections.Immutable.IImmutableStack<T>.Pop()
  fullName: System.Collections.Immutable.ImmutableStack<T>.System.Collections.Immutable.IImmutableStack<T>.Pop()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).System.Collections.Immutable.IImmutableStack<T>.Pop()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 184
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a stack that lacks the top element on this stack.
  syntax:
    content: IImmutableStack<T> IImmutableStack<T>.Pop()
    content.vb: Function System.Collections.Immutable.IImmutableStack<T>.Pop As IImmutableStack(Of T) Implements IImmutableStack(Of T).Pop
    return:
      type: System.Collections.Immutable.IImmutableStack{{T}}
      description: A stack; never <c>null</c>
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.ImmutableStack`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableStack<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 196
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: public ImmutableStack<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As ImmutableStack(Of T).Enumerator
    return:
      type: System.Collections.Immutable.ImmutableStack`1.Enumerator
      description: An [System.Collections.Immutable.ImmutableStack`1.Enumerator](System.Collections.Immutable.ImmutableStack`1.Enumerator.yml) that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableStack<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 208
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableStack`1
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableStack<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 220
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An [System.Collections.IEnumerator]() object that can be used to iterate through the collection.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Immutable.ImmutableStack`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableStack`1.yml
  name: ImmutableStack<T>
  name.vb: ImmutableStack(Of T)
  fullName: System.Collections.Immutable.ImmutableStack<T>
  fullName.vb: System.Collections.Immutable.ImmutableStack(Of T)
  type: Class
  summary: An immutable stack.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableStack`1
    name: ImmutableStack
    fullName: System.Collections.Immutable.ImmutableStack
    href: System.Collections.Immutable.ImmutableStack`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableStack`1
    name: ImmutableStack
    fullName: System.Collections.Immutable.ImmutableStack
    href: System.Collections.Immutable.ImmutableStack`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableStack{{T}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableStack`1
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: IImmutableStack<T>
  name.vb: IImmutableStack(Of T)
  fullName: System.Collections.Immutable.IImmutableStack<T>
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableStack`1
    name: IImmutableStack
    fullName: System.Collections.Immutable.IImmutableStack
    href: System.Collections.Immutable.IImmutableStack`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableStack`1
    name: IImmutableStack
    fullName: System.Collections.Immutable.IImmutableStack
    href: System.Collections.Immutable.IImmutableStack`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableStack`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: IImmutableStack<T>
  name.vb: IImmutableStack(Of T)
  fullName: System.Collections.Immutable.IImmutableStack<T>
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T)
  type: Interface
  summary: An immutable stack.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableStack`1
    name: IImmutableStack
    fullName: System.Collections.Immutable.IImmutableStack
    href: System.Collections.Immutable.IImmutableStack`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableStack`1
    name: IImmutableStack
    fullName: System.Collections.Immutable.IImmutableStack
    href: System.Collections.Immutable.IImmutableStack`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableStack`1.Enumerator
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableStack`1.Enumerator.yml
  name: ImmutableStack.Enumerator<>
  name.vb: ImmutableStack.Enumerator(Of )
  fullName: System.Collections.Immutable.ImmutableStack.Enumerator<>
  fullName.vb: System.Collections.Immutable.ImmutableStack.Enumerator(Of )
  type: Struct
  summary: Enumerates a stack with no memory allocations.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableStack`1.Enumerator
    name: ImmutableStack.Enumerator
    fullName: System.Collections.Immutable.ImmutableStack.Enumerator
    href: System.Collections.Immutable.ImmutableStack`1.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableStack`1.Enumerator
    name: ImmutableStack.Enumerator
    fullName: System.Collections.Immutable.ImmutableStack.Enumerator
    href: System.Collections.Immutable.ImmutableStack`1.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
