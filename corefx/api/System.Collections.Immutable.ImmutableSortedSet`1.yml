items:
- uid: System.Collections.Immutable.ImmutableSortedSet`1
  id: ImmutableSortedSet`1
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Clear
  - System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Count
  - System.Collections.Immutable.ImmutableSortedSet`1.Empty
  - System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator
  - System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty
  - System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer
  - System.Collections.Immutable.ImmutableSortedSet`1.Max
  - System.Collections.Immutable.ImmutableSortedSet`1.Min
  - System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Reverse
  - System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder
  - System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)
  - System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ImmutableSortedSet<T>
  name.vb: ImmutableSortedSet(Of T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 21
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An immutable sorted set implementation.
  syntax:
    content: 'public sealed class ImmutableSortedSet<T> : IImmutableSet<T>, ISortKeyCollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, ISet<T>, IList, ICollection, IEnumerable, IStrongEnumerable<T, ImmutableSortedSet<T>.Enumerator>'
    content.vb: Public NotInheritable Class ImmutableSortedSet(Of T) Implements IImmutableSet(Of T), ISortKeyCollection(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IList(Of T), ICollection(Of T), IEnumerable(Of T), ISet(Of T), IList, ICollection, IEnumerable, IStrongEnumerable(Of T, ImmutableSortedSet(Of T).Enumerator)
    typeParameters:
    - id: T
      description: The type of elements in the set.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Immutable.IImmutableSet{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - ISet{{T}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Empty
  id: Empty
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Empty
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 36
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An empty sorted set with the default sort comparer.
  syntax:
    content: public static readonly ImmutableSortedSet<T> Empty
    content.vb: Public Shared ReadOnly Empty As ImmutableSortedSet(Of T)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 76
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableSortedSet<T> Clear()
    content.vb: Public Function Clear As ImmutableSortedSet(Of T)
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Max
  id: Max
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Max
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Max
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Max
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 87
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the maximum value in the collection, as defined by the comparer.
  syntax:
    content: public T Max { get; }
    content.vb: Public ReadOnly Property Max As T
    parameters: []
    return:
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Min
  id: Min
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Min
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Min
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Min
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 96
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the minimum value in the collection, as defined by the comparer.
  syntax:
    content: public T Min { get; }
    content.vb: Public ReadOnly Property Min As T
    parameters: []
    return:
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.IsEmpty
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 106
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Count
  id: Count
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Count
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 114
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer
  id: KeyComparer
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.KeyComparer
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 126
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ISortKeyCollection`1]() interface.
  syntax:
    content: public IComparer<T> KeyComparer { get; }
    content.vb: Public ReadOnly Property KeyComparer As IComparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IComparer{{T}}
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Item[Int32]
  name.vb: Item(Int32)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Item[System.Int32]
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 148
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the element of the set at the given index.
  syntax:
    content: public T this[int index] { get; }
    content.vb: Public ReadOnly Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
      description: The 0-based index of the element in the set to return.
    return:
      type: '{T}'
      description: The element at the given position.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder
  id: ToBuilder
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ToBuilder()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.ToBuilder()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).ToBuilder()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 169
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Creates a collection with the same contents as this collection that

    can be efficiently mutated across multiple operations using standard

    mutable interfaces.
  remarks: >-
    This is an O(1) operation and results in only a single (small) memory allocation.

    The mutable collection that is returned is *not* thread-safe.
  syntax:
    content: public ImmutableSortedSet<T>.Builder ToBuilder()
    content.vb: Public Function ToBuilder As ImmutableSortedSet(Of T).Builder
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1.Builder
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 181
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableSortedSet<T> Add(T value)
    content.vb: Public Function Add(value As T) As ImmutableSortedSet(Of T)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 193
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableSortedSet<T> Remove(T value)
    content.vb: Public Function Remove(value As T) As ImmutableSortedSet(Of T)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
- uid: System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)
  id: TryGetValue(`0,`0@)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: TryGetValue(T, out T)
  name.vb: TryGetValue(T, ByRef T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.TryGetValue(T, out T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).TryGetValue(T, ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 214
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the set for a given value and returns the equal value it finds, if any.
  remarks: >-
    This can be useful when you want to reuse a previously stored reference instead of

    a newly constructed one (so that more sharing of references can occur) or to look up

    a value that has more complete data than the value you currently have, although their

    comparer functions indicate they are equal.
  syntax:
    content: public bool TryGetValue(T equalValue, out T actualValue)
    content.vb: Public Function TryGetValue(equalValue As T, ByRef actualValue As T) As Boolean
    parameters:
    - id: equalValue
      type: '{T}'
      description: The value to search for.
    - id: actualValue
      type: '{T}'
      description: The value from the set that the search found, or the original value if the search yielded no match.
    return:
      type: System.Boolean
      description: A value indicating whether the search was successful.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  id: Intersect(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Intersect(IEnumerable<T>)
  name.vb: Intersect(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Intersect(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Intersect(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 235
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableSortedSet<T> Intersect(IEnumerable<T> other)
    content.vb: Public Function Intersect(other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  id: Except(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Except(IEnumerable<T>)
  name.vb: Except(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Except(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Except(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 255
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableSortedSet<T> Except(IEnumerable<T> other)
    content.vb: Public Function Except(other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
- uid: System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: SymmetricExcept(IEnumerable<T>)
  name.vb: SymmetricExcept(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).SymmetricExcept(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 275
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Produces a set that contains elements either in this set or a given sequence, but not both.
  syntax:
    content: public ImmutableSortedSet<T> SymmetricExcept(IEnumerable<T> other)
    content.vb: Public Function SymmetricExcept(other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The other sequence of items.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: The new set.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  id: Union(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Union(IEnumerable<T>)
  name.vb: Union(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Union(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Union(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 305
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableSortedSet<T> Union(IEnumerable<T> other)
    content.vb: Public Function Union(other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
- uid: System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})
  id: WithComparer(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: WithComparer(IComparer<T>)
  name.vb: WithComparer(IComparer(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.WithComparer(System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).WithComparer(System.Collections.Generic.IComparer(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 347
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public ImmutableSortedSet<T> WithComparer(IComparer<T> comparer)
    content.vb: Public Function WithComparer(comparer As IComparer(Of T)) As ImmutableSortedSet(Of T)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
- uid: System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: SetEquals(IEnumerable<T>)
  name.vb: SetEquals(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 373
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Checks whether a given sequence of items entirely describe the contents of this set.
  syntax:
    content: public bool SetEquals(IEnumerable<T> other)
    content.vb: Public Function SetEquals(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence of items to check against this set.
    return:
      type: System.Boolean
      description: A value indicating whether the sets are equal.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 408
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set is a property (strict) subset of a specified collection.
  syntax:
    content: public bool IsProperSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a correct subset of other; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 459
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set is a correct superset of a specified collection.
  syntax:
    content: public bool IsProperSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a correct superset of other; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  name.vb: IsSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 487
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether a set is a subset of a specified collection.
  syntax:
    content: public bool IsSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a subset of other; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  name.vb: IsSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 523
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content: public bool IsSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set is a superset of other; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Overlaps(IEnumerable<T>)
  name.vb: Overlaps(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 544
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content: public bool Overlaps(IEnumerable<T> other)
    content.vb: Public Function Overlaps(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: true if the current set and other share at least one common element; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Reverse
  id: Reverse
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Reverse()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Reverse()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Reverse()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 573
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Returns an [System.Collections.Generic.IEnumerable`1]() that iterates over this

    collection in reverse order.
  syntax:
    content: public IEnumerable<T> Reverse()
    content.vb: Public Function Reverse As IEnumerable(Of T)
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: >-
        An enumerator that iterates over the [System.Collections.Immutable.ImmutableSortedSet`1](System.Collections.Immutable.ImmutableSortedSet`1.yml)

        in reverse order.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IndexOf(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.IndexOf(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).IndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 593
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the position within this set that the specified value does or would appear.
  syntax:
    content: public int IndexOf(T item)
    content.vb: Public Function IndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The value whose position is being sought.
    return:
      type: System.Int32
      description: >-
        The index of the specified <paramref name="item" /> in the sorted set,

        if <paramref name="item" /> is found.  If <paramref name="item" /> is not

        found and <paramref name="item" /> is less than one or more elements in this set,

        a negative number which is the bitwise complement of the index of the first

        element that is larger than value. If <paramref name="item" /> is not found

        and <paramref name="item" /> is greater than any of the elements in the set,

        a negative number which is the bitwise complement of (the index of the last

        element plus 1).
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Contains(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 606
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: public bool Contains(T value)
    content.vb: Public Function Contains(value As T) As Boolean
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear
  id: System#Collections#Immutable#IImmutableSet{T}#Clear
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IImmutableSet<T>.Clear()
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Immutable.IImmutableSet<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 615
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Clear()
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Clear As IImmutableSet(Of T) Implements IImmutableSet(Of T).Clear
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)
  id: System#Collections#Immutable#IImmutableSet{T}#Add(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IImmutableSet<T>.Add(T)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Immutable.IImmutableSet<T>.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 624
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Add(T value)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Add(value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Add
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)
  id: System#Collections#Immutable#IImmutableSet{T}#Remove(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IImmutableSet<T>.Remove(T)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Remove(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Immutable.IImmutableSet<T>.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 633
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Remove(T value)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Remove(value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Remove
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IImmutableSet<T>.Intersect(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Intersect(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Immutable.IImmutableSet<T>.Intersect(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Intersect(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 642
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Intersect(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Intersect(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Intersect
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IImmutableSet<T>.Except(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Except(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Immutable.IImmutableSet<T>.Except(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Except(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 651
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Except(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Except(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Except
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IImmutableSet<T>.SymmetricExcept(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 662
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Produces a set that contains elements either in this set or a given sequence, but not both.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.SymmetricExcept(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).SymmetricExcept
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The other sequence of items.
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
      description: The new set.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IImmutableSet<T>.Union(IEnumerable<T>)
  name.vb: System.Collections.Immutable.IImmutableSet<T>.Union(IEnumerable(Of T))
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Immutable.IImmutableSet<T>.Union(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Immutable.IImmutableSet<T>.Union(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 671
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content: IImmutableSet<T> IImmutableSet<T>.Union(IEnumerable<T> other)
    content.vb: Function System.Collections.Immutable.IImmutableSet<T>.Union(other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Union
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Immutable.IImmutableSet{{T}}
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 728
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection<T>.CopyTo(T[], Int32)
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 736
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 744
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.IList`1]() interface.
  syntax:
    content: void ICollection<T>.Add(T item)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
    parameters:
    - id: item
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 752
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 760
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.IList`1]() interface.
  syntax:
    content: bool ICollection<T>.Remove(T item)
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList<T>.Item[Int32]
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 772
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.IList`1]() interface.
  syntax:
    content: T IList<T>.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList<T>.Insert(Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 781
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.IList`1]() interface.
  syntax:
    content: void IList<T>.Insert(int index, T item)
    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, item As T) Implements IList(Of T).Insert
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList<T>.RemoveAt(Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 789
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.Generic.IList`1]() interface.
  syntax:
    content: void IList<T>.RemoveAt(int index)
    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt
    parameters:
    - id: index
      type: System.Int32
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 802
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.IList]() has a fixed size.
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 812
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 824
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See [System.Collections.ICollection]().
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 833
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: See the [System.Collections.ICollection]() interface.
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.Add(Object)
  name.vb: System.Collections.IList.Add(Object)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.Add(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 855
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an item to the [System.Collections.IList]().
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: The object to add to the <see cref="T:System.Collections.IList" />.
    return:
      type: System.Int32
      description: The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
  exceptions:
  - type: System.NotSupportedException
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.Clear()
  name.vb: System.Collections.IList.Clear()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 864
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Clears this instance.
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  exceptions:
  - type: System.NotSupportedException
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.Contains(Object)
  name.vb: System.Collections.IList.Contains(Object)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.Contains(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 876
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether the [System.Collections.IList]() contains a specific value.
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the <see cref="T:System.Collections.IList" />.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.IndexOf(Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.IndexOf(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 888
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines the index of a specific item in the [System.Collections.IList]().
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the <see cref="T:System.Collections.IList" />.
    return:
      type: System.Int32
      description: The index of <paramref name="value" /> if found in the list; otherwise, -1.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.Insert(Int32, Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 899
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Inserts an item to the [System.Collections.IList]() at the specified index.
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <paramref name="value" /> should be inserted.
    - id: value
      type: System.Object
      description: The object to insert into the <see cref="T:System.Collections.IList" />.
  exceptions:
  - type: System.NotSupportedException
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.Remove(Object)
  name.vb: System.Collections.IList.Remove(Object)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.Remove(System.Object)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 909
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the first occurrence of a specific object from the [System.Collections.IList]().
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: The object to remove from the <see cref="T:System.Collections.IList" />.
  exceptions:
  - type: System.NotSupportedException
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.RemoveAt(Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.RemoveAt(System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 919
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes at.
  syntax:
    content: void IList.RemoveAt(int index)
    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt
    parameters:
    - id: index
      type: System.Int32
      description: The index.
  exceptions:
  - type: System.NotSupportedException
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IList.Item[Int32]
  name.vb: System.Collections.IList.Item(Int32)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IList.Item[System.Int32]
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IList.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 932
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets or sets the [System.Object]() at the specified index.
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 947
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <paramref name="array" /> at which copying begins.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 962
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 978
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An [System.Collections.IEnumerator]() object that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 999
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  remarks: >-
    CAUTION: when this enumerator is actually used as a valuetype (not boxed) do NOT copy it by assigning to a second variable

    or by passing it to another method.  When this enumerator is disposed of it returns a mutable reference type stack to a resource pool,

    and if the value type enumerator is copied (which can easily happen unintentionally if you pass the value around) there is a risk

    that a stack that has already been returned to the resource pool may still be in use by one of the enumerator copies, leading to data

    corruption and/or exceptions.
  syntax:
    content: public ImmutableSortedSet<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As ImmutableSortedSet(Of T).Enumerator
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Immutable.IImmutableSet`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IImmutableSet<T>
  name.vb: IImmutableSet(Of T)
  fullName: System.Collections.Immutable.IImmutableSet<T>
  fullName.vb: System.Collections.Immutable.IImmutableSet(Of T)
  type: Interface
  summary: A set of elements that can only be modified by creating a new instance of the set.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.ImmutableSortedSet`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  name: ImmutableSortedSet<T>
  name.vb: ImmutableSortedSet(Of T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T)
  type: Class
  summary: An immutable sorted set implementation.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    fullName: System.Collections.Immutable.ImmutableSortedSet
    href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    fullName: System.Collections.Immutable.ImmutableSortedSet
    href: System.Collections.Immutable.ImmutableSortedSet`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ISortKeyCollection`1
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: true
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ImmutableSortedSet.Builder<>
  name.vb: ImmutableSortedSet.Builder(Of )
  fullName: System.Collections.Immutable.ImmutableSortedSet.Builder<>
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Builder(Of )
  type: Class
  summary: >-
    A sorted set that mutates with little or no memory allocations,

    can produce and/or build on immutable sorted set instances very efficiently.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder
    name: ImmutableSortedSet.Builder
    fullName: System.Collections.Immutable.ImmutableSortedSet.Builder
    href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder
    name: ImmutableSortedSet.Builder
    fullName: System.Collections.Immutable.ImmutableSortedSet.Builder
    href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableSet{{T}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableSet`1
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IImmutableSet<T>
  name.vb: IImmutableSet(Of T)
  fullName: System.Collections.Immutable.IImmutableSet<T>
  fullName.vb: System.Collections.Immutable.IImmutableSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    href: System.Collections.Immutable.IImmutableSet`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<T>
  name.vb: ICollection(Of T)
  fullName: System.Collections.Generic.ICollection<T>
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  name.vb: IList(Of T)
  fullName: System.Collections.Generic.IList<T>
  fullName.vb: System.Collections.Generic.IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  fullName: System.Collections.IList
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.NotSupportedException
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  fullName: System.Array
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.yml
  name: ImmutableSortedSet.Enumerator<>
  name.vb: ImmutableSortedSet.Enumerator(Of )
  fullName: System.Collections.Immutable.ImmutableSortedSet.Enumerator<>
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Enumerator(Of )
  type: Struct
  summary: Enumerates the contents of a binary tree.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator
    name: ImmutableSortedSet.Enumerator
    fullName: System.Collections.Immutable.ImmutableSortedSet.Enumerator
    href: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator
    name: ImmutableSortedSet.Enumerator
    fullName: System.Collections.Immutable.ImmutableSortedSet.Enumerator
    href: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
