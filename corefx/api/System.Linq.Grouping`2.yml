items:
- uid: System.Linq.Grouping`2
  id: Grouping`2
  parent: System.Linq
  children:
  - System.Linq.Grouping`2.GetEnumerator
  - System.Linq.Grouping`2.Key
  - System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Add(`1)
  - System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Clear
  - System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Contains(`1)
  - System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#CopyTo(`1[],System.Int32)
  - System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Count
  - System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#IsReadOnly
  - System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Remove(`1)
  - System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#IndexOf(`1)
  - System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#Insert(System.Int32,`1)
  - System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#Item(System.Int32)
  - System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#RemoveAt(System.Int32)
  - System.Linq.Grouping`2.System#Collections#IEnumerable#GetEnumerator
  href: System.Linq.Grouping`2.yml
  name: Grouping<TKey, TElement>
  name.vb: Grouping(Of TKey, TElement)
  fullName: System.Linq.Grouping<TKey, TElement>
  fullName.vb: System.Linq.Grouping(Of TKey, TElement)
  type: Class
  source:
    remote: &o0
      path: src/System.Linq/src/System/Linq/Enumerable.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2678
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: 'public class Grouping<TKey, TElement> : IGrouping<TKey, TElement>, IList<TElement>, ICollection<TElement>, IEnumerable<TElement>, IEnumerable'
    content.vb: Public Class Grouping(Of TKey, TElement) Implements IGrouping(Of TKey, TElement), IList(Of TElement), ICollection(Of TElement), IEnumerable(Of TElement), IEnumerable
    typeParameters:
    - id: TKey
    - id: TElement
  inheritance:
  - System.Object
  implements:
  - System.Linq.IGrouping{{TKey},{TElement}}
  - System.Collections.Generic.IList{{TElement}}
  - System.Collections.Generic.ICollection{{TElement}}
  - System.Collections.Generic.IEnumerable{{TElement}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Linq.Grouping`2.GetEnumerator
  id: GetEnumerator
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: GetEnumerator()
  fullName: System.Linq.Grouping<TKey, TElement>.GetEnumerator()
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2698
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public IEnumerator<TElement> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of TElement)
    return:
      type: System.Collections.Generic.IEnumerator{{TElement}}
- uid: System.Linq.Grouping`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2703
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
- uid: System.Linq.Grouping`2.Key
  id: Key
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: Key
  fullName: System.Linq.Grouping<TKey, TElement>.Key
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).Key
  type: Property
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2710
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public TKey Key { get; }
    content.vb: Public ReadOnly Property Key As TKey
    parameters: []
    return:
      type: '{TKey}'
- uid: System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Count
  id: System#Collections#Generic#ICollection{TElement}#Count
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: ICollection<TElement>.Count
  name.vb: System.Collections.Generic.ICollection<TElement>.Count
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.ICollection<TElement>.Count
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.ICollection<TElement>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2715
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: int ICollection<TElement>.Count { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<TElement>.Count As Integer Implements ICollection(Of TElement).Count
    parameters: []
    return:
      type: System.Int32
- uid: System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#IsReadOnly
  id: System#Collections#Generic#ICollection{TElement}#IsReadOnly
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: ICollection<TElement>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<TElement>.IsReadOnly
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.ICollection<TElement>.IsReadOnly
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.ICollection<TElement>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2720
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: bool ICollection<TElement>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<TElement>.IsReadOnly As Boolean Implements ICollection(Of TElement).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Add(`1)
  id: System#Collections#Generic#ICollection{TElement}#Add(`1)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: ICollection<TElement>.Add(TElement)
  name.vb: System.Collections.Generic.ICollection<TElement>.Add(TElement)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.ICollection<TElement>.Add(TElement)
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.ICollection<TElement>.Add(TElement)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2725
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: void ICollection<TElement>.Add(TElement item)
    content.vb: Sub System.Collections.Generic.ICollection<TElement>.Add(item As TElement) Implements ICollection(Of TElement).Add
    parameters:
    - id: item
      type: '{TElement}'
- uid: System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Clear
  id: System#Collections#Generic#ICollection{TElement}#Clear
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: ICollection<TElement>.Clear()
  name.vb: System.Collections.Generic.ICollection<TElement>.Clear()
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.ICollection<TElement>.Clear()
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.ICollection<TElement>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2730
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: void ICollection<TElement>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<TElement>.Clear Implements ICollection(Of TElement).Clear
- uid: System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Contains(`1)
  id: System#Collections#Generic#ICollection{TElement}#Contains(`1)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: ICollection<TElement>.Contains(TElement)
  name.vb: System.Collections.Generic.ICollection<TElement>.Contains(TElement)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.ICollection<TElement>.Contains(TElement)
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.ICollection<TElement>.Contains(TElement)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2735
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: bool ICollection<TElement>.Contains(TElement item)
    content.vb: Function System.Collections.Generic.ICollection<TElement>.Contains(item As TElement) As Boolean Implements ICollection(Of TElement).Contains
    parameters:
    - id: item
      type: '{TElement}'
    return:
      type: System.Boolean
- uid: System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#CopyTo(`1[],System.Int32)
  id: System#Collections#Generic#ICollection{TElement}#CopyTo(`1[],System.Int32)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: ICollection<TElement>.CopyTo(TElement[], Int32)
  name.vb: System.Collections.Generic.ICollection<TElement>.CopyTo(TElement(), Int32)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[], System.Int32)
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.ICollection<TElement>.CopyTo(TElement(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2740
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: void ICollection<TElement>.CopyTo(TElement[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<TElement>.CopyTo(array As TElement(), arrayIndex As Integer) Implements ICollection(Of TElement).CopyTo
    parameters:
    - id: array
      type: '{TElement}[]'
    - id: arrayIndex
      type: System.Int32
- uid: System.Linq.Grouping`2.System#Collections#Generic#ICollection{TElement}#Remove(`1)
  id: System#Collections#Generic#ICollection{TElement}#Remove(`1)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: ICollection<TElement>.Remove(TElement)
  name.vb: System.Collections.Generic.ICollection<TElement>.Remove(TElement)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.ICollection<TElement>.Remove(TElement)
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.ICollection<TElement>.Remove(TElement)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2745
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: bool ICollection<TElement>.Remove(TElement item)
    content.vb: Function System.Collections.Generic.ICollection<TElement>.Remove(item As TElement) As Boolean Implements ICollection(Of TElement).Remove
    parameters:
    - id: item
      type: '{TElement}'
    return:
      type: System.Boolean
- uid: System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#IndexOf(`1)
  id: System#Collections#Generic#IList{TElement}#IndexOf(`1)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: IList<TElement>.IndexOf(TElement)
  name.vb: System.Collections.Generic.IList<TElement>.IndexOf(TElement)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.IList<TElement>.IndexOf(TElement)
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.IList<TElement>.IndexOf(TElement)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2750
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: int IList<TElement>.IndexOf(TElement item)
    content.vb: Function System.Collections.Generic.IList<TElement>.IndexOf(item As TElement) As Integer Implements IList(Of TElement).IndexOf
    parameters:
    - id: item
      type: '{TElement}'
    return:
      type: System.Int32
- uid: System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#Insert(System.Int32,`1)
  id: System#Collections#Generic#IList{TElement}#Insert(System.Int32,`1)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: IList<TElement>.Insert(Int32, TElement)
  name.vb: System.Collections.Generic.IList<TElement>.Insert(Int32, TElement)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.IList<TElement>.Insert(System.Int32, TElement)
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.IList<TElement>.Insert(System.Int32, TElement)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2755
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: void IList<TElement>.Insert(int index, TElement item)
    content.vb: Sub System.Collections.Generic.IList<TElement>.Insert(index As Integer, item As TElement) Implements IList(Of TElement).Insert
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{TElement}'
- uid: System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{TElement}#RemoveAt(System.Int32)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: IList<TElement>.RemoveAt(Int32)
  name.vb: System.Collections.Generic.IList<TElement>.RemoveAt(Int32)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.IList<TElement>.RemoveAt(System.Int32)
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.IList<TElement>.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2760
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: void IList<TElement>.RemoveAt(int index)
    content.vb: Sub System.Collections.Generic.IList<TElement>.RemoveAt(index As Integer) Implements IList(Of TElement).RemoveAt
    parameters:
    - id: index
      type: System.Int32
- uid: System.Linq.Grouping`2.System#Collections#Generic#IList{TElement}#Item(System.Int32)
  id: System#Collections#Generic#IList{TElement}#Item(System.Int32)
  parent: System.Linq.Grouping`2
  href: System.Linq.Grouping`2.yml
  name: IList<TElement>.Item[Int32]
  name.vb: System.Collections.Generic.IList<TElement>.Item(Int32)
  fullName: System.Linq.Grouping<TKey, TElement>.System.Collections.Generic.IList<TElement>.Item[System.Int32]
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).System.Collections.Generic.IList<TElement>.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 2765
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: TElement IList<TElement>.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<TElement>.Item(index As Integer) As TElement Implements IList(Of TElement).this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{TElement}'
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Generic.IEnumerator{{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TElement>
  name.vb: IEnumerator(Of TElement)
  fullName: System.Collections.Generic.IEnumerator<TElement>
  fullName.vb: System.Collections.Generic.IEnumerator(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: '{TElement}'
  isExternal: false
  name: TElement
  fullName: TElement
- uid: '{TElement}[]'
  isExternal: false
  name: TElement[]
  name.vb: TElement()
  fullName: TElement[]
  fullName.vb: TElement()
  spec.csharp:
  - name: TElement
    fullName: TElement
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TElement
    fullName: TElement
  - name: ()
    fullName: ()
