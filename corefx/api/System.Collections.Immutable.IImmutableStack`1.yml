items:
- uid: System.Collections.Immutable.IImmutableStack`1
  id: IImmutableStack`1
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.IImmutableStack`1.Clear
  - System.Collections.Immutable.IImmutableStack`1.IsEmpty
  - System.Collections.Immutable.IImmutableStack`1.Peek
  - System.Collections.Immutable.IImmutableStack`1.Pop
  - System.Collections.Immutable.IImmutableStack`1.Push(`0)
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: IImmutableStack<T>
  name.vb: IImmutableStack(Of T)
  fullName: System.Collections.Immutable.IImmutableStack<T>
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T)
  type: Interface
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 13
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An immutable stack.
  syntax:
    content: 'public interface IImmutableStack<T> : IEnumerable<T>, IEnumerable'
    content.vb: Public Interface IImmutableStack(Of T) Inherits IEnumerable(Of T)
    typeParameters:
    - id: T
      description: The type of elements stored in the stack.
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
- uid: System.Collections.Immutable.IImmutableStack`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Immutable.IImmutableStack`1
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.IImmutableStack<T>.IsEmpty
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 23
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether this is the empty stack.
  syntax:
    content: bool IsEmpty { get; }
    content.vb: ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.IImmutableStack`1.Clear
  id: Clear
  parent: System.Collections.Immutable.IImmutableStack`1
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.IImmutableStack<T>.Clear()
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 29
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an empty stack.
  syntax:
    content: IImmutableStack<T> Clear()
    content.vb: Function Clear As IImmutableStack(Of T)
    return:
      type: System.Collections.Immutable.IImmutableStack`1
- uid: System.Collections.Immutable.IImmutableStack`1.Push(`0)
  id: Push(`0)
  parent: System.Collections.Immutable.IImmutableStack`1
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: Push(T)
  fullName: System.Collections.Immutable.IImmutableStack<T>.Push(T)
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T).Push(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 37
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Pushes an element onto a stack and returns the new stack.
  syntax:
    content: IImmutableStack<T> Push(T value)
    content.vb: Function Push(value As T) As IImmutableStack(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: The element to push onto the stack.
    return:
      type: System.Collections.Immutable.IImmutableStack`1
      description: The new stack.
- uid: System.Collections.Immutable.IImmutableStack`1.Pop
  id: Pop
  parent: System.Collections.Immutable.IImmutableStack`1
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: Pop()
  fullName: System.Collections.Immutable.IImmutableStack<T>.Pop()
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T).Pop()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 45
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Pops the top element off the stack.
  syntax:
    content: IImmutableStack<T> Pop()
    content.vb: Function Pop As IImmutableStack(Of T)
    return:
      type: System.Collections.Immutable.IImmutableStack`1
      description: The new stack; never <c>null</c>
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.IImmutableStack`1.Peek
  id: Peek
  parent: System.Collections.Immutable.IImmutableStack`1
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: Peek()
  fullName: System.Collections.Immutable.IImmutableStack<T>.Peek()
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T).Peek()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 52
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the element on the top of the stack.
  syntax:
    content: T Peek()
    content.vb: Function Peek As T
    return:
      type: '{T}'
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Immutable.IImmutableStack`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableStack`1.yml
  name: IImmutableStack<T>
  name.vb: IImmutableStack(Of T)
  fullName: System.Collections.Immutable.IImmutableStack<T>
  fullName.vb: System.Collections.Immutable.IImmutableStack(Of T)
  type: Interface
  summary: An immutable stack.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableStack`1
    name: IImmutableStack
    fullName: System.Collections.Immutable.IImmutableStack
    href: System.Collections.Immutable.IImmutableStack`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableStack`1
    name: IImmutableStack
    fullName: System.Collections.Immutable.IImmutableStack
    href: System.Collections.Immutable.IImmutableStack`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
