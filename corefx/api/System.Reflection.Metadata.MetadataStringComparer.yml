items:
- uid: System.Reflection.Metadata.MetadataStringComparer
  id: MetadataStringComparer
  parent: System.Reflection.Metadata
  children:
  - System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.NamespaceDefinitionHandle,System.String)
  - System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.StringHandle,System.String)
  - System.Reflection.Metadata.MetadataStringComparer.StartsWith(System.Reflection.Metadata.StringHandle,System.String)
  href: System.Reflection.Metadata.MetadataStringComparer.yml
  name: MetadataStringComparer
  fullName: System.Reflection.Metadata.MetadataStringComparer
  type: Struct
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringComparer.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringComparer.cs
    startLine: 47
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: >-
    Provides string comparison helpers to query strings in metadata while

    avoiding allocation where possible.
  remarks: >-
    No allocation is performed unless both the handle argument and the

    value argument contain non-ascii text.



    Obtain instances using [System.Reflection.Metadata.MetadataReader.StringComparer](System.Reflection.Metadata.MetadataReader.yml).



    A default-initialized instance is useless and behaves as a null reference.



    The code is optimized such that there is no additional overhead in

    re-obtaining a a comparer over hoisting it in to a local.



    That is to say that a construct like:



    <code>

    if (reader.StringComparer.Equals(typeDef.Namespace, "System") &amp;&amp;

    reader.StringComparer.Equals(typeDef.Name, "Object")

    {

    // found System.Object

    }

    </code>



    is no less efficient than:



    <code>

    var comparer = reader.StringComparer;

    if (comparer.Equals(typeDef.Namespace, "System") &amp;&amp;

    comparer.Equals(typeDef.Name, "Object")

    {

    // found System.Object

    }

    </code>



    The choice between them is therefore one of style and not performance.
  syntax:
    content: public struct MetadataStringComparer
    content.vb: Public Structure MetadataStringComparer
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.StringHandle,System.String)
  id: Equals(System.Reflection.Metadata.StringHandle,System.String)
  parent: System.Reflection.Metadata.MetadataStringComparer
  href: System.Reflection.Metadata.MetadataStringComparer.yml
  name: Equals(StringHandle, String)
  fullName: System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.StringHandle, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringComparer.cs
    startLine: 57
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  syntax:
    content: public bool Equals(StringHandle handle, string value)
    content.vb: Public Function Equals(handle As StringHandle, value As String) As Boolean
    parameters:
    - id: handle
      type: System.Reflection.Metadata.StringHandle
    - id: value
      type: System.String
    return:
      type: System.Boolean
- uid: System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.NamespaceDefinitionHandle,System.String)
  id: Equals(System.Reflection.Metadata.NamespaceDefinitionHandle,System.String)
  parent: System.Reflection.Metadata.MetadataStringComparer
  href: System.Reflection.Metadata.MetadataStringComparer.yml
  name: Equals(NamespaceDefinitionHandle, String)
  fullName: System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.NamespaceDefinitionHandle, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringComparer.cs
    startLine: 67
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  syntax:
    content: public bool Equals(NamespaceDefinitionHandle handle, string value)
    content.vb: Public Function Equals(handle As NamespaceDefinitionHandle, value As String) As Boolean
    parameters:
    - id: handle
      type: System.Reflection.Metadata.NamespaceDefinitionHandle
    - id: value
      type: System.String
    return:
      type: System.Boolean
- uid: System.Reflection.Metadata.MetadataStringComparer.StartsWith(System.Reflection.Metadata.StringHandle,System.String)
  id: StartsWith(System.Reflection.Metadata.StringHandle,System.String)
  parent: System.Reflection.Metadata.MetadataStringComparer
  href: System.Reflection.Metadata.MetadataStringComparer.yml
  name: StartsWith(StringHandle, String)
  fullName: System.Reflection.Metadata.MetadataStringComparer.StartsWith(System.Reflection.Metadata.StringHandle, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringComparer.cs
    startLine: 82
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  syntax:
    content: public bool StartsWith(StringHandle handle, string value)
    content.vb: Public Function StartsWith(handle As StringHandle, value As String) As Boolean
    parameters:
    - id: handle
      type: System.Reflection.Metadata.StringHandle
    - id: value
      type: System.String
    return:
      type: System.Boolean
references:
- uid: System.Reflection.Metadata.MetadataReader.StringComparer
- uid: System.Reflection.Metadata
  isExternal: false
  name: System.Reflection.Metadata
  fullName: System.Reflection.Metadata
  type: Namespace
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Reflection.Metadata.StringHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.StringHandle.yml
  name: StringHandle
  fullName: System.Reflection.Metadata.StringHandle
  type: Struct
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Metadata.NamespaceDefinitionHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.NamespaceDefinitionHandle.yml
  name: NamespaceDefinitionHandle
  fullName: System.Reflection.Metadata.NamespaceDefinitionHandle
  type: Struct
  summary: A handle that represents a namespace definition.
