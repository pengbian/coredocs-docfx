items:
- uid: System.Collections.Immutable.ImmutableQueue`1
  id: ImmutableQueue`1
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableQueue`1.Clear
  - System.Collections.Immutable.ImmutableQueue`1.Dequeue
  - System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)
  - System.Collections.Immutable.ImmutableQueue`1.Empty
  - System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)
  - System.Collections.Immutable.ImmutableQueue`1.GetEnumerator
  - System.Collections.Immutable.ImmutableQueue`1.IsEmpty
  - System.Collections.Immutable.ImmutableQueue`1.Peek
  - System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear
  - System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue
  - System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: ImmutableQueue<T>
  name.vb: ImmutableQueue(Of T)
  fullName: System.Collections.Immutable.ImmutableQueue<T>
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 17
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An immutable queue.
  syntax:
    content: 'public sealed class ImmutableQueue<T> : IImmutableQueue<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public NotInheritable Class ImmutableQueue(Of T) Implements IImmutableQueue(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: The type of elements stored in the queue.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Immutable.IImmutableQueue{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableQueue`1.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 65
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the empty queue.
  syntax:
    content: public ImmutableQueue<T> Clear()
    content.vb: Public Function Clear As ImmutableQueue(Of T)
    return:
      type: System.Collections.Immutable.ImmutableQueue`1
- uid: System.Collections.Immutable.ImmutableQueue`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableQueue<T>.IsEmpty
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 78
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets a value indicating whether this instance is empty.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Immutable.ImmutableQueue`1.Empty
  id: Empty
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Empty
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).Empty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 86
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the empty queue.
  syntax:
    content: public static ImmutableQueue<T> Empty { get; }
    content.vb: Public Shared ReadOnly Property Empty As ImmutableQueue(Of T)
    parameters: []
    return:
      type: System.Collections.Immutable.ImmutableQueue`1
- uid: System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear
  id: System#Collections#Immutable#IImmutableQueue{T}#Clear
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: IImmutableQueue<T>.Clear()
  name.vb: System.Collections.Immutable.IImmutableQueue<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.System.Collections.Immutable.IImmutableQueue<T>.Clear()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).System.Collections.Immutable.IImmutableQueue<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 99
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an empty queue.
  syntax:
    content: IImmutableQueue<T> IImmutableQueue<T>.Clear()
    content.vb: Function System.Collections.Immutable.IImmutableQueue<T>.Clear As IImmutableQueue(Of T) Implements IImmutableQueue(Of T).Clear
    return:
      type: System.Collections.Immutable.IImmutableQueue{{T}}
- uid: System.Collections.Immutable.ImmutableQueue`1.Peek
  id: Peek
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Peek()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Peek()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).Peek()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 130
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the element at the front of the queue.
  syntax:
    content: public T Peek()
    content.vb: Public Function Peek As T
    return:
      type: '{T}'
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Enqueue(T)
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Enqueue(T)
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).Enqueue(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 148
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an element to the back of the queue.
  syntax:
    content: public ImmutableQueue<T> Enqueue(T value)
    content.vb: Public Function Enqueue(value As T) As ImmutableQueue(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: The value.
    return:
      type: System.Collections.Immutable.ImmutableQueue`1
      description: The new queue.
- uid: System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)
  id: System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: IImmutableQueue<T>.Enqueue(T)
  name.vb: System.Collections.Immutable.IImmutableQueue<T>.Enqueue(T)
  fullName: System.Collections.Immutable.ImmutableQueue<T>.System.Collections.Immutable.IImmutableQueue<T>.Enqueue(T)
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).System.Collections.Immutable.IImmutableQueue<T>.Enqueue(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 170
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds an element to the back of the queue.
  syntax:
    content: IImmutableQueue<T> IImmutableQueue<T>.Enqueue(T value)
    content.vb: Function System.Collections.Immutable.IImmutableQueue<T>.Enqueue(value As T) As IImmutableQueue(Of T) Implements IImmutableQueue(Of T).Enqueue
    parameters:
    - id: value
      type: '{T}'
      description: The value.
    return:
      type: System.Collections.Immutable.IImmutableQueue{{T}}
      description: The new queue.
- uid: System.Collections.Immutable.ImmutableQueue`1.Dequeue
  id: Dequeue
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Dequeue()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Dequeue()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).Dequeue()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 181
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a queue that is missing the front element.
  syntax:
    content: public ImmutableQueue<T> Dequeue()
    content.vb: Public Function Dequeue As ImmutableQueue(Of T)
    return:
      type: System.Collections.Immutable.ImmutableQueue`1
      description: A queue; never <c>null</c>.
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)
  id: Dequeue(`0@)
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Dequeue(out T)
  name.vb: Dequeue(ByRef T)
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Dequeue(out T)
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).Dequeue(ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 210
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Retrieves the item at the head of the queue, and returns a queue with the head element removed.
  syntax:
    content: public ImmutableQueue<T> Dequeue(out T value)
    content.vb: Public Function Dequeue(ByRef value As T) As ImmutableQueue(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: Receives the value from the head of the queue.
    return:
      type: System.Collections.Immutable.ImmutableQueue`1
      description: The new queue with the head element removed.
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue
  id: System#Collections#Immutable#IImmutableQueue{T}#Dequeue
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: IImmutableQueue<T>.Dequeue()
  name.vb: System.Collections.Immutable.IImmutableQueue<T>.Dequeue()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.System.Collections.Immutable.IImmutableQueue<T>.Dequeue()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).System.Collections.Immutable.IImmutableQueue<T>.Dequeue()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 223
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a queue that is missing the front element.
  syntax:
    content: IImmutableQueue<T> IImmutableQueue<T>.Dequeue()
    content.vb: Function System.Collections.Immutable.IImmutableQueue<T>.Dequeue As IImmutableQueue(Of T) Implements IImmutableQueue(Of T).Dequeue
    return:
      type: System.Collections.Immutable.IImmutableQueue{{T}}
      description: A queue; never <c>null</c>.
  exceptions:
  - type: System.InvalidOperationException
    description: Thrown when the stack is empty.
- uid: System.Collections.Immutable.ImmutableQueue`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 235
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: public ImmutableQueue<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As ImmutableQueue(Of T).Enumerator
    return:
      type: System.Collections.Immutable.ImmutableQueue`1.Enumerator
      description: An [System.Collections.Immutable.ImmutableQueue`1.Enumerator](System.Collections.Immutable.ImmutableQueue`1.Enumerator.yml) that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 247
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
- uid: System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 259
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An [System.Collections.IEnumerator]() object that can be used to iterate through the collection.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Immutable.ImmutableQueue`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: ImmutableQueue<T>
  name.vb: ImmutableQueue(Of T)
  fullName: System.Collections.Immutable.ImmutableQueue<T>
  fullName.vb: System.Collections.Immutable.ImmutableQueue(Of T)
  type: Class
  summary: An immutable queue.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableQueue`1
    name: ImmutableQueue
    fullName: System.Collections.Immutable.ImmutableQueue
    href: System.Collections.Immutable.ImmutableQueue`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableQueue`1
    name: ImmutableQueue
    fullName: System.Collections.Immutable.ImmutableQueue
    href: System.Collections.Immutable.ImmutableQueue`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Immutable.IImmutableQueue{{T}}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableQueue`1
  href: System.Collections.Immutable.IImmutableQueue`1.yml
  name: IImmutableQueue<T>
  name.vb: IImmutableQueue(Of T)
  fullName: System.Collections.Immutable.IImmutableQueue<T>
  fullName.vb: System.Collections.Immutable.IImmutableQueue(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableQueue`1
    name: IImmutableQueue
    fullName: System.Collections.Immutable.IImmutableQueue
    href: System.Collections.Immutable.IImmutableQueue`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableQueue`1
    name: IImmutableQueue
    fullName: System.Collections.Immutable.IImmutableQueue
    href: System.Collections.Immutable.IImmutableQueue`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableQueue`1
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableQueue`1.yml
  name: IImmutableQueue<T>
  name.vb: IImmutableQueue(Of T)
  fullName: System.Collections.Immutable.IImmutableQueue<T>
  fullName.vb: System.Collections.Immutable.IImmutableQueue(Of T)
  type: Interface
  summary: An immutable queue.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableQueue`1
    name: IImmutableQueue
    fullName: System.Collections.Immutable.IImmutableQueue
    href: System.Collections.Immutable.IImmutableQueue`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableQueue`1
    name: IImmutableQueue
    fullName: System.Collections.Immutable.IImmutableQueue
    href: System.Collections.Immutable.IImmutableQueue`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableQueue`1.Enumerator
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.ImmutableQueue`1.Enumerator.yml
  name: ImmutableQueue.Enumerator<>
  name.vb: ImmutableQueue.Enumerator(Of )
  fullName: System.Collections.Immutable.ImmutableQueue.Enumerator<>
  fullName.vb: System.Collections.Immutable.ImmutableQueue.Enumerator(Of )
  type: Struct
  summary: A memory allocation-free enumerator of @'System.Collections.Immutable.ImmutableQueue`1'.
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableQueue`1.Enumerator
    name: ImmutableQueue.Enumerator
    fullName: System.Collections.Immutable.ImmutableQueue.Enumerator
    href: System.Collections.Immutable.ImmutableQueue`1.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableQueue`1.Enumerator
    name: ImmutableQueue.Enumerator
    fullName: System.Collections.Immutable.ImmutableQueue.Enumerator
    href: System.Collections.Immutable.ImmutableQueue`1.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
