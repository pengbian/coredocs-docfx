items:
- uid: System.Lazy`2
  id: Lazy`2
  parent: System
  children:
  - System.Lazy`2.#ctor(`1)
  - System.Lazy`2.#ctor(`1,System.Boolean)
  - System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)
  - System.Lazy`2.#ctor(System.Func{`0},`1)
  - System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)
  - System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)
  - System.Lazy`2.Metadata
  href: System.Lazy`2.yml
  name: Lazy<T, TMetadata>
  name.vb: Lazy(Of T, TMetadata)
  fullName: System.Lazy<T, TMetadata>
  fullName.vb: System.Lazy(Of T, TMetadata)
  type: Class
  source:
    remote: &o0
      path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 9
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: 'public class Lazy<T, TMetadata> : Lazy<T>'
    content.vb: Public Class Lazy(Of T, TMetadata) Inherits Lazy(Of T)
    typeParameters:
    - id: T
    - id: TMetadata
  inheritance:
  - System.Object
  - System.Lazy{{T}}
  inheritedMembers:
  - System.Lazy{{T}}.ToString
  - System.Lazy{{T}}.IsValueCreated
  - System.Lazy{{T}}.Value
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Lazy`2.#ctor(System.Func{`0},`1)
  id: '#ctor(System.Func{`0},`1)'
  parent: System.Lazy`2
  href: System.Lazy`2.yml
  name: Lazy(Func<T>, TMetadata)
  name.vb: Lazy(Func(Of T), TMetadata)
  fullName: System.Lazy<T, TMetadata>.Lazy(System.Func<T>, TMetadata)
  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(System.Func(Of T), TMetadata)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 13
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public Lazy(Func<T> valueFactory, TMetadata metadata)
    content.vb: Public Sub New(valueFactory As Func(Of T), metadata As TMetadata)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
    - id: metadata
      type: '{TMetadata}'
- uid: System.Lazy`2.#ctor(`1)
  id: '#ctor(`1)'
  parent: System.Lazy`2
  href: System.Lazy`2.yml
  name: Lazy(TMetadata)
  fullName: System.Lazy<T, TMetadata>.Lazy(TMetadata)
  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(TMetadata)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 19
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public Lazy(TMetadata metadata)
    content.vb: Public Sub New(metadata As TMetadata)
    parameters:
    - id: metadata
      type: '{TMetadata}'
- uid: System.Lazy`2.#ctor(`1,System.Boolean)
  id: '#ctor(`1,System.Boolean)'
  parent: System.Lazy`2
  href: System.Lazy`2.yml
  name: Lazy(TMetadata, Boolean)
  fullName: System.Lazy<T, TMetadata>.Lazy(TMetadata, System.Boolean)
  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(TMetadata, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 26
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public Lazy(TMetadata metadata, bool isThreadSafe)
    content.vb: Public Sub New(metadata As TMetadata, isThreadSafe As Boolean)
    parameters:
    - id: metadata
      type: '{TMetadata}'
    - id: isThreadSafe
      type: System.Boolean
- uid: System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)
  id: '#ctor(System.Func{`0},`1,System.Boolean)'
  parent: System.Lazy`2
  href: System.Lazy`2.yml
  name: Lazy(Func<T>, TMetadata, Boolean)
  name.vb: Lazy(Func(Of T), TMetadata, Boolean)
  fullName: System.Lazy<T, TMetadata>.Lazy(System.Func<T>, TMetadata, System.Boolean)
  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(System.Func(Of T), TMetadata, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 32
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public Lazy(Func<T> valueFactory, TMetadata metadata, bool isThreadSafe)
    content.vb: Public Sub New(valueFactory As Func(Of T), metadata As TMetadata, isThreadSafe As Boolean)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
    - id: metadata
      type: '{TMetadata}'
    - id: isThreadSafe
      type: System.Boolean
- uid: System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)
  id: '#ctor(`1,System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`2
  href: System.Lazy`2.yml
  name: Lazy(TMetadata, LazyThreadSafetyMode)
  fullName: System.Lazy<T, TMetadata>.Lazy(TMetadata, System.Threading.LazyThreadSafetyMode)
  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(TMetadata, System.Threading.LazyThreadSafetyMode)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 38
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public Lazy(TMetadata metadata, LazyThreadSafetyMode mode)
    content.vb: Public Sub New(metadata As TMetadata, mode As LazyThreadSafetyMode)
    parameters:
    - id: metadata
      type: '{TMetadata}'
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
- uid: System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)
  id: '#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`2
  href: System.Lazy`2.yml
  name: Lazy(Func<T>, TMetadata, LazyThreadSafetyMode)
  name.vb: Lazy(Func(Of T), TMetadata, LazyThreadSafetyMode)
  fullName: System.Lazy<T, TMetadata>.Lazy(System.Func<T>, TMetadata, System.Threading.LazyThreadSafetyMode)
  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(System.Func(Of T), TMetadata, System.Threading.LazyThreadSafetyMode)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public Lazy(Func<T> valueFactory, TMetadata metadata, LazyThreadSafetyMode mode)
    content.vb: Public Sub New(valueFactory As Func(Of T), metadata As TMetadata, mode As LazyThreadSafetyMode)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
    - id: metadata
      type: '{TMetadata}'
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
- uid: System.Lazy`2.Metadata
  id: Metadata
  parent: System.Lazy`2
  href: System.Lazy`2.yml
  name: Metadata
  fullName: System.Lazy<T, TMetadata>.Metadata
  fullName.vb: System.Lazy(Of T, TMetadata).Metadata
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime/src/System/LazyOfTTMetadata.cs
    startLine: 50
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public TMetadata Metadata { get; }
    content.vb: Public ReadOnly Property Metadata As TMetadata
    parameters: []
    return:
      type: '{TMetadata}'
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Lazy{{T}}
  parent: System
  definition: System.Lazy`1
  name: Lazy<T>
  name.vb: Lazy(Of T)
  fullName: System.Lazy<T>
  fullName.vb: System.Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Lazy{{T}}.ToString
  parent: System.Lazy{{T}}
  definition: System.Lazy`1.ToString
  name: ToString()
  fullName: System.Lazy<T>.ToString()
  fullName.vb: System.Lazy(Of T).ToString()
  spec.csharp:
  - uid: System.Lazy`1.ToString
    name: ToString
    fullName: System.Lazy<T>.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Lazy`1.ToString
    name: ToString
    fullName: System.Lazy(Of T).ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Lazy{{T}}.IsValueCreated
  parent: System.Lazy{{T}}
  definition: System.Lazy`1.IsValueCreated
  name: IsValueCreated
  fullName: System.Lazy<T>.IsValueCreated
  fullName.vb: System.Lazy(Of T).IsValueCreated
- uid: System.Lazy{{T}}.Value
  parent: System.Lazy{{T}}
  definition: System.Lazy`1.Value
  name: Value
  fullName: System.Lazy<T>.Value
  fullName.vb: System.Lazy(Of T).Value
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Lazy`1
  parent: System
  isExternal: true
  name: Lazy<T>
  name.vb: Lazy(Of T)
  fullName: System.Lazy<T>
  fullName.vb: System.Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Lazy`1.ToString
  parent: System.Lazy`1
  isExternal: true
  name: ToString()
  fullName: System.Lazy<T>.ToString()
  fullName.vb: System.Lazy(Of T).ToString()
  spec.csharp:
  - uid: System.Lazy`1.ToString
    name: ToString
    fullName: System.Lazy<T>.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Lazy`1.ToString
    name: ToString
    fullName: System.Lazy(Of T).ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Lazy`1.IsValueCreated
  parent: System.Lazy`1
  isExternal: true
  name: IsValueCreated
  fullName: System.Lazy<T>.IsValueCreated
  fullName.vb: System.Lazy(Of T).IsValueCreated
- uid: System.Lazy`1.Value
  parent: System.Lazy`1
  isExternal: true
  name: Value
  fullName: System.Lazy<T>.Value
  fullName.vb: System.Lazy(Of T).Value
- uid: System.Func{{T}}
  parent: System
  definition: System.Func`1
  name: Func<T>
  name.vb: Func(Of T)
  fullName: System.Func<T>
  fullName.vb: System.Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{TMetadata}'
  isExternal: false
  name: TMetadata
  fullName: TMetadata
- uid: System.Func`1
  parent: System
  isExternal: true
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: true
  name: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
