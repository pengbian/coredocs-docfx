items:
- uid: System.Collections.Immutable.IImmutableDictionary`2
  id: IImmutableDictionary`2
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)
  - System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Immutable.IImmutableDictionary`2.Clear
  - System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)
  - System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)
  - System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: IImmutableDictionary<TKey, TValue>
  name.vb: IImmutableDictionary(Of TKey, TValue)
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue)
  type: Interface
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 14
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: An immutable key-value dictionary.
  syntax:
    content: 'public interface IImmutableDictionary<TKey, TValue> : IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable'
    content.vb: Public Interface IImmutableDictionary(Of TKey, TValue) Inherits IReadOnlyDictionary(Of TKey, TValue)
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
  inheritedMembers:
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Item({TKey})
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Keys
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Values
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  - System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Immutable.IImmutableDictionary`2.Clear
  id: Clear
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: Clear()
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.Clear()
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 21
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets an empty dictionary with equivalent ordering and key/value comparison rules.
  syntax:
    content: IImmutableDictionary<TKey, TValue> Clear()
    content.vb: Function Clear As IImmutableDictionary(Of TKey, TValue)
    return:
      type: System.Collections.Immutable.IImmutableDictionary`2
- uid: System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: Add(TKey, TValue)
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).Add(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 34
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified key and value to the dictionary.
  remarks: If the given key-value pair are already in the dictionary, the existing instance is returned.
  syntax:
    content: IImmutableDictionary<TKey, TValue> Add(TKey key, TValue value)
    content.vb: Function Add(key As TKey, value As TValue) As IImmutableDictionary(Of TKey, TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the entry to add.
    - id: value
      type: '{TValue}'
      description: The value of the entry to add.
    return:
      type: System.Collections.Immutable.IImmutableDictionary`2
      description: The new dictionary containing the additional key-value pair.
  exceptions:
  - type: System.ArgumentException
    description: Thrown when the given key already exists in the dictionary but has a different value.
- uid: System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: AddRange(IEnumerable<KeyValuePair<TKey, TValue>>)
  name.vb: AddRange(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).AddRange(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 43
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified key-value pairs to the dictionary.
  syntax:
    content: IImmutableDictionary<TKey, TValue> AddRange(IEnumerable<KeyValuePair<TKey, TValue>> pairs)
    content.vb: Function AddRange(pairs As IEnumerable(Of KeyValuePair(Of TKey, TValue))) As IImmutableDictionary(Of TKey, TValue)
    parameters:
    - id: pairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The pairs.
    return:
      type: System.Collections.Immutable.IImmutableDictionary`2
      description: The new dictionary containing the additional key-value pairs.
  exceptions:
  - type: System.ArgumentException
    description: Thrown when one of the given keys already exists in the dictionary but has a different value.
- uid: System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)
  id: SetItem(`0,`1)
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: SetItem(TKey, TValue)
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.SetItem(TKey, TValue)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).SetItem(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 57
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Sets the specified key and value to the dictionary, possibly overwriting an existing value for the given key.
  remarks: >-
    If the given key-value pair are already in the dictionary, the existing instance is returned.

    If the key already exists but with a different value, a new instance with the overwritten value will be returned.
  syntax:
    content: IImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value)
    content.vb: Function SetItem(key As TKey, value As TValue) As IImmutableDictionary(Of TKey, TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the entry to add.
    - id: value
      type: '{TValue}'
      description: The value of the entry to add.
    return:
      type: System.Collections.Immutable.IImmutableDictionary`2
      description: The new dictionary containing the additional key-value pair.
- uid: System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: SetItems(IEnumerable<KeyValuePair<TKey, TValue>>)
  name.vb: SetItems(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.SetItems(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).SetItems(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 65
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Applies a given set of key=value pairs to an immutable dictionary, replacing any conflicting keys in the resulting dictionary.
  syntax:
    content: IImmutableDictionary<TKey, TValue> SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items)
    content.vb: Function SetItems(items As IEnumerable(Of KeyValuePair(Of TKey, TValue))) As IImmutableDictionary(Of TKey, TValue)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The key=value pairs to set on the dictionary.  Any keys that conflict with existing keys will overwrite the previous values.
    return:
      type: System.Collections.Immutable.IImmutableDictionary`2
      description: An immutable dictionary.
- uid: System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  id: RemoveRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: RemoveRange(IEnumerable<TKey>)
  name.vb: RemoveRange(IEnumerable(Of TKey))
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).RemoveRange(System.Collections.Generic.IEnumerable(Of TKey))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 74
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified keys from the dictionary with their associated values.
  syntax:
    content: IImmutableDictionary<TKey, TValue> RemoveRange(IEnumerable<TKey> keys)
    content.vb: Function RemoveRange(keys As IEnumerable(Of TKey)) As IImmutableDictionary(Of TKey, TValue)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{{TKey}}
      description: The keys to remove.
    return:
      type: System.Collections.Immutable.IImmutableDictionary`2
      description: A new dictionary with those keys removed; or this instance if those keys are not in the dictionary.
- uid: System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: Remove(TKey)
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.Remove(TKey)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).Remove(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 82
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified key from the dictionary with its associated value.
  syntax:
    content: IImmutableDictionary<TKey, TValue> Remove(TKey key)
    content.vb: Function Remove(key As TKey) As IImmutableDictionary(Of TKey, TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to remove.
    return:
      type: System.Collections.Immutable.IImmutableDictionary`2
      description: A new dictionary with the matching entry removed; or this instance if the key is not in the dictionary.
- uid: System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: Contains(KeyValuePair<TKey, TValue>)
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 92
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Determines whether this dictionary contains the specified key-value pair.
  syntax:
    content: bool Contains(KeyValuePair<TKey, TValue> pair)
    content.vb: Function Contains(pair As KeyValuePair(Of TKey, TValue)) As Boolean
    parameters:
    - id: pair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The key value pair.
    return:
      type: System.Boolean
      description: <c>true</c> if this dictionary contains the key-value pair; otherwise, <c>false</c>.
- uid: System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)
  id: TryGetKey(`0,`0@)
  parent: System.Collections.Immutable.IImmutableDictionary`2
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: TryGetKey(TKey, out TKey)
  name.vb: TryGetKey(TKey, ByRef TKey)
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>.TryGetKey(TKey, out TKey)
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue).TryGetKey(TKey, ByRef TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableDictionary.cs
    startLine: 107
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the dictionary for a given key and returns the equal key it finds, if any.
  remarks: >-
    This can be useful when you want to reuse a previously stored reference instead of

    a newly constructed one (so that more sharing of references can occur) or to look up

    the canonical value, or a value that has more complete data than the value you currently have,

    although their comparer functions indicate they are equal.
  syntax:
    content: bool TryGetKey(TKey equalKey, out TKey actualKey)
    content.vb: Function TryGetKey(equalKey As TKey, ByRef actualKey As TKey) As Boolean
    parameters:
    - id: equalKey
      type: '{TKey}'
      description: The key to search for.
    - id: actualKey
      type: '{TKey}'
      description: The key from the dictionary that the search found, or <paramref name="equalKey" /> if the search yielded no match.
    return:
      type: System.Boolean
      description: A value indicating whether the search was successful.
references:
- uid: System.Collections.Immutable
  isExternal: false
  name: System.Collections.Immutable
  fullName: System.Collections.Immutable
  type: Namespace
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey({TKey})
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue({TKey},{TValue}@)
  name: TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Item({TKey})
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.Item({TKey})
  name: Item[TKey]
  name.vb: Item(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey]
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Keys
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.Keys
  name: Keys
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Values
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.Values
  name: Values
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey({TKey})
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<TKey, TValue>
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue({TKey},{TValue}@)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Item({TKey})
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: Item[TKey]
  name.vb: Item(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey]
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Keys
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: Keys
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Values
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: Values
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<KeyValuePair<TKey, TValue>>
  name.vb: IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyCollection<T>
  name.vb: IReadOnlyCollection(Of T)
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Immutable.IImmutableDictionary`2
  parent: System.Collections.Immutable
  isExternal: false
  href: System.Collections.Immutable.IImmutableDictionary`2.yml
  name: IImmutableDictionary<TKey, TValue>
  name.vb: IImmutableDictionary(Of TKey, TValue)
  fullName: System.Collections.Immutable.IImmutableDictionary<TKey, TValue>
  fullName.vb: System.Collections.Immutable.IImmutableDictionary(Of TKey, TValue)
  type: Interface
  summary: An immutable key-value dictionary.
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableDictionary`2
    name: IImmutableDictionary
    fullName: System.Collections.Immutable.IImmutableDictionary
    href: System.Collections.Immutable.IImmutableDictionary`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableDictionary`2
    name: IImmutableDictionary
    fullName: System.Collections.Immutable.IImmutableDictionary
    href: System.Collections.Immutable.IImmutableDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.ArgumentException
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TKey>
  name.vb: IEnumerable(Of TKey)
  fullName: System.Collections.Generic.IEnumerable<TKey>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
