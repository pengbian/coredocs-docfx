items:
- uid: System.Reflection.PortableExecutable.PEReader
  id: PEReader
  parent: System.Reflection.PortableExecutable
  children:
  - System.Reflection.PortableExecutable.PEReader.#ctor(ImmutableArray{System.Byte})
  - System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)
  - System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)
  - System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)
  - System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)
  - System.Reflection.PortableExecutable.PEReader.Dispose
  - System.Reflection.PortableExecutable.PEReader.GetEntireImage
  - System.Reflection.PortableExecutable.PEReader.GetMetadata
  - System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)
  - System.Reflection.PortableExecutable.PEReader.HasMetadata
  - System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable
  - System.Reflection.PortableExecutable.PEReader.PEHeaders
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEReader
  fullName: System.Reflection.PortableExecutable.PEReader
  type: Class
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 19
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Portable Executable format reader.
  remarks: >-
    The implementation is thread-safe, that is multiple threads can read data from the reader in parallel.

    Disposal of the reader is not thread-safe (see [System.Reflection.PortableExecutable.PEReader.Dispose](System.Reflection.PortableExecutable.PEReader.yml)).
  syntax:
    content: 'public sealed class PEReader : IDisposable'
    content.vb: Public NotInheritable Class PEReader Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)
  id: '#ctor(System.Byte*,System.Int32)'
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEReader(Byte*, Int32)
  fullName: System.Reflection.PortableExecutable.PEReader.PEReader(System.Byte*, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 45
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Creates a Portable Executable reader over a PE image stored in memory.
  remarks: >-
    The memory is owned by the caller and not released on disposal of the <see cref="T:System.Reflection.PortableExecutable.PEReader" />.

    The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <see cref="T:System.Reflection.PortableExecutable.PEReader" />.

    The content of the image is not read during the construction of the <see cref="T:System.Reflection.PortableExecutable.PEReader" />
  syntax:
    content: public PEReader(byte *peImage, int size)
    content.vb: Public Sub New(peImage As Byte *, size As Integer)
    parameters:
    - id: peImage
      type: System.Byte*
      description: Pointer to the start of the PE image.
    - id: size
      type: System.Int32
      description: The size of the PE image.
  exceptions:
  - type: System.ArgumentNullException
    description: is .
  - type: System.ArgumentOutOfRangeException
    description: is negative.
- uid: System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEReader(Stream)
  fullName: System.Reflection.PortableExecutable.PEReader.PEReader(System.IO.Stream)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 72
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Creates a Portable Executable reader over a PE image stored in a stream.
  remarks: >-
    Ownership of the stream is transferred to the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> upon successful validation of constructor arguments. It will be

    disposed by the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> and the caller must not manipulate it.
  syntax:
    content: public PEReader(Stream peStream)
    content.vb: Public Sub New(peStream As Stream)
    parameters:
    - id: peStream
      type: System.IO.Stream
      description: PE image stream.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
  - type: System.BadImageFormatException
    description: is specified and the PE headers of the image are invalid.
- uid: System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)
  id: '#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)'
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEReader(Stream, PEStreamOptions)
  fullName: System.Reflection.PortableExecutable.PEReader.PEReader(System.IO.Stream, System.Reflection.PortableExecutable.PEStreamOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 101
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Creates a Portable Executable reader over a PE image stored in a stream beginning at its current position and ending at the end of the stream.
  syntax:
    content: public PEReader(Stream peStream, PEStreamOptions options)
    content.vb: Public Sub New(peStream As Stream, options As PEStreamOptions)
    parameters:
    - id: peStream
      type: System.IO.Stream
      description: PE image stream.
    - id: options
      type: System.Reflection.PortableExecutable.PEStreamOptions
      description: >-
        Options specifying how sections of the PE image are read from the stream.



        Unless <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" /> is specified, ownership of the stream is transferred to the <see cref="T:System.Reflection.PortableExecutable.PEReader" />

        upon successful argument validation. It will be disposed by the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> and the caller must not manipulate it.



        Unless <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> or <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage" /> is specified no data

        is read from the stream during the construction of the <see cref="T:System.Reflection.PortableExecutable.PEReader" />. Furthermore, the stream must not be manipulated

        by caller while the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> is alive and undisposed.



        If <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> or <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage" />, the <see cref="T:System.Reflection.PortableExecutable.PEReader" />

        will have read all of the data requested during construction. As such, if <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" /> is also

        specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <see cref="T:System.Reflection.PortableExecutable.PEReader" />

        after construction.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
  - type: System.ArgumentOutOfRangeException
    description: has an invalid value.
  - type: System.BadImageFormatException
    description: is specified and the PE headers of the image are invalid.
- uid: System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)
  id: '#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)'
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEReader(Stream, PEStreamOptions, Int32)
  fullName: System.Reflection.PortableExecutable.PEReader.PEReader(System.IO.Stream, System.Reflection.PortableExecutable.PEStreamOptions, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 127
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Creates a Portable Executable reader over a PE image of the given size beginning at the stream's current position.
  syntax:
    content: public PEReader(Stream peStream, PEStreamOptions options, int size)
    content.vb: Public Sub New(peStream As Stream, options As PEStreamOptions, size As Integer)
    parameters:
    - id: peStream
      type: System.IO.Stream
      description: PE image stream.
    - id: options
      type: System.Reflection.PortableExecutable.PEStreamOptions
      description: >-
        Options specifying how sections of the PE image are read from the stream.



        Unless <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" /> is specified, ownership of the stream is transferred to the <see cref="T:System.Reflection.PortableExecutable.PEReader" />

        upon successful argument validation. It will be disposed by the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> and the caller must not manipulate it.



        Unless <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> or <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage" /> is specified no data

        is read from the stream during the construction of the <see cref="T:System.Reflection.PortableExecutable.PEReader" />. Furthermore, the stream must not be manipulated

        by caller while the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> is alive and undisposed.



        If <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> or <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage" />, the <see cref="T:System.Reflection.PortableExecutable.PEReader" />

        will have read all of the data requested during construction. As such, if <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" /> is also

        specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <see cref="T:System.Reflection.PortableExecutable.PEReader" />

        after construction.
    - id: size
      type: System.Int32
      description: PE image size.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: Size is negative or extends past the end of the stream.
- uid: System.Reflection.PortableExecutable.PEReader.#ctor(ImmutableArray{System.Byte})
  id: '#ctor(ImmutableArray{System.Byte})'
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEReader(ImmutableArray<Byte>)
  name.vb: PEReader(ImmutableArray(Of Byte))
  fullName: System.Reflection.PortableExecutable.PEReader.PEReader(ImmutableArray<System.Byte>)
  fullName.vb: System.Reflection.PortableExecutable.PEReader.PEReader(ImmutableArray(Of System.Byte))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 204
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Creates a Portable Executable reader over a PE image stored in a byte array.
  remarks: The content of the image is not read during the construction of the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yml)
  syntax:
    content: public PEReader(ImmutableArray<byte> peImage)
    content.vb: Public Sub New(peImage As ImmutableArray(Of Byte))
    parameters:
    - id: peImage
      type: ImmutableArray{System.Byte}
      description: PE image.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
- uid: System.Reflection.PortableExecutable.PEReader.Dispose
  id: Dispose
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: Dispose()
  fullName: System.Reflection.PortableExecutable.PEReader.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 222
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Disposes all memory allocated by the reader.
  remarks: >-
    <see cref="M:System.Reflection.PortableExecutable.PEReader.Dispose" />  can be called multiple times (but not in parallel).

    It is not safe to call <see cref="M:System.Reflection.PortableExecutable.PEReader.Dispose" /> in parallel with any other operation on the <see cref="T:System.Reflection.PortableExecutable.PEReader" />

    or reading from <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" />s retrieved from the reader.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Reflection.PortableExecutable.PEReader.PEHeaders
  id: PEHeaders
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEHeaders
  fullName: System.Reflection.PortableExecutable.PEReader.PEHeaders
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 264
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets the PE headers.
  syntax:
    content: public PEHeaders PEHeaders { get; }
    content.vb: Public ReadOnly Property PEHeaders As PEHeaders
    parameters: []
    return:
      type: System.Reflection.PortableExecutable.PEHeaders
  exceptions:
  - type: System.BadImageFormatException
    description: The headers contain invalid data.
- uid: System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable
  id: IsEntireImageAvailable
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: IsEntireImageAvailable
  fullName: System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 382
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Return true if the reader can access the entire PE image.
  remarks: Returns false if the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yml) is constructed from a stream and only part of it is prefetched into memory.
  syntax:
    content: public bool IsEntireImageAvailable { get; }
    content.vb: Public ReadOnly Property IsEntireImageAvailable As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.PortableExecutable.PEReader.GetEntireImage
  id: GetEntireImage
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: GetEntireImage()
  fullName: System.Reflection.PortableExecutable.PEReader.GetEntireImage()
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 391
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Gets a pointer to and size of the PE image if available ([System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable](System.Reflection.PortableExecutable.PEReader.yml)).
  syntax:
    content: public PEMemoryBlock GetEntireImage()
    content.vb: Public Function GetEntireImage As PEMemoryBlock
    return:
      type: System.Reflection.PortableExecutable.PEMemoryBlock
  exceptions:
  - type: System.InvalidOperationException
    description: The entire PE image is not available.
- uid: System.Reflection.PortableExecutable.PEReader.HasMetadata
  id: HasMetadata
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: HasMetadata
  fullName: System.Reflection.PortableExecutable.PEReader.HasMetadata
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 400
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Returns true if the PE image contains CLI metadata.
  syntax:
    content: public bool HasMetadata { get; }
    content.vb: Public ReadOnly Property HasMetadata As Boolean
    parameters: []
    return:
      type: System.Boolean
  exceptions:
  - type: System.BadImageFormatException
    description: The PE headers contain invalid data.
- uid: System.Reflection.PortableExecutable.PEReader.GetMetadata
  id: GetMetadata
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: GetMetadata()
  fullName: System.Reflection.PortableExecutable.PEReader.GetMetadata()
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 410
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: Loads PE section that contains CLI metadata.
  syntax:
    content: public PEMemoryBlock GetMetadata()
    content.vb: Public Function GetMetadata As PEMemoryBlock
    return:
      type: System.Reflection.PortableExecutable.PEMemoryBlock
  exceptions:
  - type: System.InvalidOperationException
    description: The PE image doesn't contain metadata ( returns false).
  - type: System.BadImageFormatException
    description: The PE headers contain invalid data.
- uid: System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)
  id: GetSectionData(System.Int32)
  parent: System.Reflection.PortableExecutable.PEReader
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: GetSectionData(Int32)
  fullName: System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 424
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    Loads PE section that contains the specified <paramref name="relativeVirtualAddress" /> into memory

    and returns a memory block that starts at <paramref name="relativeVirtualAddress" /> and ends at the end of the containing section.
  syntax:
    content: public PEMemoryBlock GetSectionData(int relativeVirtualAddress)
    content.vb: Public Function GetSectionData(relativeVirtualAddress As Integer) As PEMemoryBlock
    parameters:
    - id: relativeVirtualAddress
      type: System.Int32
      description: Relative Virtual Address of the data to read.
    return:
      type: System.Reflection.PortableExecutable.PEMemoryBlock
      description: An empty block if <paramref name="relativeVirtualAddress" /> doesn't represent a location in any of the PE sections of this PE image.
  exceptions:
  - type: System.BadImageFormatException
    description: The PE headers contain invalid data.
references:
- uid: System.Reflection.PortableExecutable.PEReader.Dispose
- uid: System.Reflection.PortableExecutable
  isExternal: false
  name: System.Reflection.PortableExecutable
  fullName: System.Reflection.PortableExecutable
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Reflection.PortableExecutable.PEReader
  parent: System.Reflection.PortableExecutable
  isExternal: false
  href: System.Reflection.PortableExecutable.PEReader.yml
  name: PEReader
  fullName: System.Reflection.PortableExecutable.PEReader
  type: Class
  summary: Portable Executable format reader.
- uid: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
- uid: System.Byte*
  isExternal: true
  name: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.BadImageFormatException
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  type: Namespace
- uid: System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen
- uid: System.Reflection.PortableExecutable.PEStreamOptions
  parent: System.Reflection.PortableExecutable
  isExternal: false
  href: System.Reflection.PortableExecutable.PEStreamOptions.yml
  name: PEStreamOptions
  fullName: System.Reflection.PortableExecutable.PEStreamOptions
  type: Enum
- uid: ImmutableArray{System.Byte}
  definition: ImmutableArray`1
  name: ImmutableArray<Byte>
  name.vb: ImmutableArray(Of Byte)
  fullName: ImmutableArray<System.Byte>
  fullName.vb: ImmutableArray(Of System.Byte)
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
- uid: ImmutableArray`1
  isExternal: true
  name: ImmutableArray<>
  name.vb: ImmutableArray(Of )
  fullName: ImmutableArray<>
  fullName.vb: ImmutableArray(Of )
  spec.csharp:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: ImmutableArray`1
    name: ImmutableArray
    fullName: ImmutableArray
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Reflection.PortableExecutable.PEHeaders
  isExternal: false
  href: System.Reflection.PortableExecutable.PEHeaders.yml
  name: PEHeaders
  fullName: System.Reflection.PortableExecutable.PEHeaders
  type: Class
  summary: An object used to read PE (Portable Executable) and COFF (Common Object File Format) headers from a stream.
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Reflection.PortableExecutable.PEMemoryBlock
  isExternal: false
  href: System.Reflection.PortableExecutable.PEMemoryBlock.yml
  name: PEMemoryBlock
  fullName: System.Reflection.PortableExecutable.PEMemoryBlock
  type: Struct
