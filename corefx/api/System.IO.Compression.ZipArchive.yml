items:
- uid: System.IO.Compression.ZipArchive
  id: ZipArchive
  parent: System.IO.Compression
  children:
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  - System.IO.Compression.ZipArchive.CreateEntry(System.String)
  - System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  - System.IO.Compression.ZipArchive.Dispose
  - System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  - System.IO.Compression.ZipArchive.Entries
  - System.IO.Compression.ZipArchive.GetEntry(System.String)
  - System.IO.Compression.ZipArchive.Mode
  href: System.IO.Compression.ZipArchive.yml
  name: ZipArchive
  fullName: System.IO.Compression.ZipArchive
  type: Class
  source:
    remote: &o0
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 14
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  syntax:
    content: 'public class ZipArchive : IDisposable'
    content.vb: Public Class ZipArchive Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: ZipArchive(Stream)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 50
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Initializes a new instance of ZipArchive on the given stream for reading.
  syntax:
    content: public ZipArchive(Stream stream)
    content.vb: Public Sub New(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream containing the archive to be read.
  exceptions:
  - type: System.ArgumentException
    description: The stream is already closed or does not support reading.
  - type: System.ArgumentNullException
    description: The stream is null.
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)'
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: ZipArchive(Stream, ZipArchiveMode)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 62
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Initializes a new instance of ZipArchive on the given stream in the specified mode.
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The input or output stream.
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: See the description of the ZipArchiveMode enum. Read requires the stream to support reading, Create requires the stream to support writing, and Update requires the stream to support reading, writing, and seeking.
  exceptions:
  - type: System.ArgumentException
    description: The stream is already closed. -or- mode is incompatible with the capabilities of the stream.
  - type: System.ArgumentNullException
    description: The stream is null.
  - type: System.ArgumentOutOfRangeException
    description: mode specified an invalid value.
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)'
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: ZipArchive(Stream, ZipArchiveMode, Boolean)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 75
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Initializes a new instance of ZipArchive on the given stream in the specified mode, specifying whether to leave the stream open.
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The input or output stream.
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: See the description of the ZipArchiveMode enum. Read requires the stream to support reading, Create requires the stream to support writing, and Update requires the stream to support reading, writing, and seeking.
    - id: leaveOpen
      type: System.Boolean
      description: true to leave the stream open upon disposing the ZipArchive, otherwise false.
  exceptions:
  - type: System.ArgumentException
    description: The stream is already closed. -or- mode is incompatible with the capabilities of the stream.
  - type: System.ArgumentNullException
    description: The stream is null.
  - type: System.ArgumentOutOfRangeException
    description: mode specified an invalid value.
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)'
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean, System.Text.Encoding)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 128
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Initializes a new instance of ZipArchive on the given stream in the specified mode, specifying whether to leave the stream open.
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Encoding entryNameEncoding)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean, entryNameEncoding As Encoding)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The input or output stream.
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: See the description of the ZipArchiveMode enum. Read requires the stream to support reading, Create requires the stream to support writing, and Update requires the stream to support reading, writing, and seeking.
    - id: leaveOpen
      type: System.Boolean
      description: true to leave the stream open upon disposing the ZipArchive, otherwise false.
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: >-
        The encoding to use when reading or writing entry names in this ZipArchive.

        ///     <para>NOTE: Specifying this parameter to values other than <c>null</c> is discouraged.

        However, this may be necessary for interoperability with ZIP archive tools and libraries that do not correctly support

        UTF-8 encoding for entry names.<br />

        This value is used as follows:</para><para><strong>Reading (opening) ZIP archive files:</strong></para><para>If <c>entryNameEncoding</c> is not specified (<c>== null</c>):</para><list><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set,

        use the current system default code page (<c>Encoding.Default</c>) in order to decode the entry name.</item><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set,

        use UTF-8 (<c>Encoding.UTF8</c>) in order to decode the entry name.</item></list><para>If <c>entryNameEncoding</c> is specified (<c>!= null</c>):</para><list><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set,

        use the specified <c>entryNameEncoding</c> in order to decode the entry name.</item><item>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set,

        use UTF-8 (<c>Encoding.UTF8</c>) in order to decode the entry name.</item></list><para><strong>Writing (saving) ZIP archive files:</strong></para><para>If <c>entryNameEncoding</c> is not specified (<c>== null</c>):</para><list><item>For entry names that contain characters outside the ASCII range,

        the language encoding flag (EFS) will be set in the general purpose bit flag of the local file header,

        and UTF-8 (<c>Encoding.UTF8</c>) will be used in order to encode the entry name into bytes.</item><item>For entry names that do not contain characters outside the ASCII range,

        the language encoding flag (EFS) will not be set in the general purpose bit flag of the local file header,

        and the current system default code page (<c>Encoding.Default</c>) will be used to encode the entry names into bytes.</item></list><para>If <c>entryNameEncoding</c> is specified (<c>!= null</c>):</para><list><item>The specified <c>entryNameEncoding</c> will always be used to encode the entry names into bytes.

        The language encoding flag (EFS) in the general purpose bit flag of the local file header will be set if and only

        if the specified <c>entryNameEncoding</c> is a UTF-8 encoding.</item></list><para>Note that Unicode encodings other than UTF-8 may not be currently used for the <c>entryNameEncoding</c>,

        otherwise an <see cref="T:System.ArgumentException" /> is thrown.</para>
  exceptions:
  - type: System.ArgumentException
    description: The stream is already closed. -or- mode is incompatible with the capabilities of the stream.
  - type: System.ArgumentNullException
    description: The stream is null.
  - type: System.ArgumentOutOfRangeException
    description: mode specified an invalid value.
  - type: System.ArgumentException
    description: If a Unicode encoding other than UTF-8 is specified for the entryNameEncoding.
- uid: System.IO.Compression.ZipArchive.Entries
  id: Entries
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: Entries
  fullName: System.IO.Compression.ZipArchive.Entries
  type: Property
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 149
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: The collection of entries that are currently in the ZipArchive. This may not accurately represent the actual entries that are present in the underlying file or stream.
  syntax:
    content: public ReadOnlyCollection<ZipArchiveEntry> Entries { get; }
    content.vb: Public ReadOnly Property Entries As ReadOnlyCollection(Of ZipArchiveEntry)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}
  exceptions:
  - type: System.NotSupportedException
    description: The ZipArchive does not support reading.
  - type: System.ObjectDisposedException
    description: The ZipArchive has already been closed.
- uid: System.IO.Compression.ZipArchive.Mode
  id: Mode
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: Mode
  fullName: System.IO.Compression.ZipArchive.Mode
  type: Property
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 169
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: The ZipArchiveMode that the ZipArchive was initialized with.
  syntax:
    content: public ZipArchiveMode Mode { get; }
    content.vb: Public ReadOnly Property Mode As ZipArchiveMode
    parameters: []
    return:
      type: System.IO.Compression.ZipArchiveMode
- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String)
  id: CreateEntry(System.String)
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: CreateEntry(String)
  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 198
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: >-
    Creates an empty entry in the Zip archive with the specified entry name.

    There are no restrictions on the names of entries.

    The last write time of the entry is set to the current time.

    If an entry with the specified name already exists in the archive, a second entry will be created that has an identical name.

    Since no <code>CompressionLevel</code> is specified, the default provided by the implementation of the underlying compression

    algorithm will be used; the <code>ZipArchive</code> will not impose its own default.

    (Currently, the underlying compression algorithm is provided by the <code>System.IO.Compression.DeflateStream</code> class.)
  syntax:
    content: public ZipArchiveEntry CreateEntry(string entryName)
    content.vb: Public Function CreateEntry(entryName As String) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: A path relative to the root of the archive, indicating the name of the entry to be created.
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: A wrapper for the newly created file entry in the archive.
  exceptions:
  - type: System.ArgumentException
    description: entryName is a zero-length string.
  - type: System.ArgumentNullException
    description: entryName is null.
  - type: System.NotSupportedException
    description: The ZipArchive does not support writing.
  - type: System.ObjectDisposedException
    description: The ZipArchive has already been closed.
- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  id: CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: CreateEntry(String, CompressionLevel)
  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String, System.IO.Compression.CompressionLevel)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 217
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Creates an empty entry in the Zip archive with the specified entry name. There are no restrictions on the names of entries. The last write time of the entry is set to the current time. If an entry with the specified name already exists in the archive, a second entry will be created that has an identical name.
  syntax:
    content: public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel)
    content.vb: Public Function CreateEntry(entryName As String, compressionLevel As CompressionLevel) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: A path relative to the root of the archive, indicating the name of the entry to be created.
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: The level of the compression (speed/memory vs. compressed size trade-off).
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: A wrapper for the newly created file entry in the archive.
  exceptions:
  - type: System.ArgumentException
    description: entryName is a zero-length string.
  - type: System.ArgumentNullException
    description: entryName is null.
  - type: System.NotSupportedException
    description: The ZipArchive does not support writing.
  - type: System.ObjectDisposedException
    description: The ZipArchive has already been closed.
- uid: System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: Dispose(Boolean)
  fullName: System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 230
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Releases the unmanaged resources used by ZipArchive and optionally finishes writing the archive and releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to finish writing the archive and release unmanaged and managed resources, false to release only unmanaged resources.
- uid: System.IO.Compression.ZipArchive.Dispose
  id: Dispose
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: Dispose()
  fullName: System.IO.Compression.ZipArchive.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 264
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Finishes writing the archive and releases all resources used by the ZipArchive object, unless the object was constructed with leaveOpen as true. Any streams from opened entries in the ZipArchive still open will throw exceptions on subsequent writes, as the underlying streams will have been closed.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.IO.Compression.ZipArchive.GetEntry(System.String)
  id: GetEntry(System.String)
  parent: System.IO.Compression.ZipArchive
  href: System.IO.Compression.ZipArchive.yml
  name: GetEntry(String)
  fullName: System.IO.Compression.ZipArchive.GetEntry(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 281
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: Retrieves a wrapper for the file entry in the archive with the specified name. Names are compared using ordinal comparison. If there are multiple entries in the archive with the specified name, the first one found will be returned.
  syntax:
    content: public ZipArchiveEntry GetEntry(string entryName)
    content.vb: Public Function GetEntry(entryName As String) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: A path relative to the root of the archive, identifying the desired entry.
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: A wrapper for the file entry in the archive. If no entry in the archive exists with the specified name, null will be returned.
  exceptions:
  - type: System.ArgumentException
    description: entryName is a zero-length string.
  - type: System.ArgumentNullException
    description: entryName is null.
  - type: System.NotSupportedException
    description: The ZipArchive does not support reading.
  - type: System.ObjectDisposedException
    description: The ZipArchive has already been closed.
references:
- uid: System.IO.Compression
  isExternal: false
  name: System.IO.Compression
  fullName: System.IO.Compression
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.ArgumentException
- uid: System.ArgumentNullException
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  type: Namespace
- uid: System.ArgumentOutOfRangeException
- uid: System.IO.Compression.ZipArchiveMode
  parent: System.IO.Compression
  isExternal: false
  href: System.IO.Compression.ZipArchiveMode.yml
  name: ZipArchiveMode
  fullName: System.IO.Compression.ZipArchiveMode
  type: Enum
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.NotSupportedException
- uid: System.ObjectDisposedException
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  href: System.IO.Compression.ZipArchiveEntry.yml
  name: ReadOnlyCollection<ZipArchiveEntry>
  name.vb: ReadOnlyCollection(Of ZipArchiveEntry)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Compression.ZipArchiveEntry>
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.IO.Compression.ZipArchiveEntry)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.Compression.ZipArchiveEntry
    name: ZipArchiveEntry
    fullName: System.IO.Compression.ZipArchiveEntry
    href: System.IO.Compression.ZipArchiveEntry.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.Compression.ZipArchiveEntry
    name: ZipArchiveEntry
    fullName: System.IO.Compression.ZipArchiveEntry
    href: System.IO.Compression.ZipArchiveEntry.yml
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<T>
  name.vb: ReadOnlyCollection(Of T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  type: Namespace
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.IO.Compression.ZipArchiveEntry
  parent: System.IO.Compression
  isExternal: false
  href: System.IO.Compression.ZipArchiveEntry.yml
  name: ZipArchiveEntry
  fullName: System.IO.Compression.ZipArchiveEntry
  type: Class
- uid: System.IO.Compression.CompressionLevel
  parent: System.IO.Compression
  isExternal: false
  href: System.IO.Compression.CompressionLevel.yml
  name: CompressionLevel
  fullName: System.IO.Compression.CompressionLevel
  type: Enum
  summary: Defines a tradeoff between fast vs. strong compression. The specific meaning depends of the Deflater implementation.
