items:
- uid: System.Reflection.PortableExecutable.SectionHeader
  id: SectionHeader
  parent: System.Reflection.PortableExecutable
  children:
  - System.Reflection.PortableExecutable.SectionHeader.Name
  - System.Reflection.PortableExecutable.SectionHeader.NumberOfLineNumbers
  - System.Reflection.PortableExecutable.SectionHeader.NumberOfRelocations
  - System.Reflection.PortableExecutable.SectionHeader.PointerToLineNumbers
  - System.Reflection.PortableExecutable.SectionHeader.PointerToRawData
  - System.Reflection.PortableExecutable.SectionHeader.PointerToRelocations
  - System.Reflection.PortableExecutable.SectionHeader.SectionCharacteristics
  - System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData
  - System.Reflection.PortableExecutable.SectionHeader.VirtualAddress
  - System.Reflection.PortableExecutable.SectionHeader.VirtualSize
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: SectionHeader
  fullName: System.Reflection.PortableExecutable.SectionHeader
  type: Struct
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 5
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  syntax:
    content: public struct SectionHeader
    content.vb: Public Structure SectionHeader
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: System.Reflection.PortableExecutable.SectionHeader.Name
  id: Name
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: Name
  fullName: System.Reflection.PortableExecutable.SectionHeader.Name
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 21
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: The name of the section.
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
- uid: System.Reflection.PortableExecutable.SectionHeader.VirtualSize
  id: VirtualSize
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: VirtualSize
  fullName: System.Reflection.PortableExecutable.SectionHeader.VirtualSize
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 28
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The total size of the section when loaded into memory.

    If this value is greater than [System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData](System.Reflection.PortableExecutable.SectionHeader.yml), the section is zero-padded.

    This field is valid only for PE images and should be set to zero for object files.
  syntax:
    content: public int VirtualSize { get; }
    content.vb: Public ReadOnly Property VirtualSize As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.SectionHeader.VirtualAddress
  id: VirtualAddress
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: VirtualAddress
  fullName: System.Reflection.PortableExecutable.SectionHeader.VirtualAddress
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 36
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    For PE images, the address of the first byte of the section relative to the image base when the

    section is loaded into memory. For object files, this field is the address of the first byte before

    relocation is applied; for simplicity, compilers should set this to zero. Otherwise,

    it is an arbitrary value that is subtracted from offsets during relocation.
  syntax:
    content: public int VirtualAddress { get; }
    content.vb: Public ReadOnly Property VirtualAddress As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData
  id: SizeOfRawData
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: SizeOfRawData
  fullName: System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 46
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The size of the section (for object files) or the size of the initialized data on disk (for image files).

    For PE images, this must be a multiple of <see cref="P:System.Reflection.PortableExecutable.PEHeader.FileAlignment" />.

    If this is less than <see cref="P:System.Reflection.PortableExecutable.SectionHeader.VirtualSize" />, the remainder of the section is zero-filled.

    Because the <see cref="P:System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData" /> field is rounded but the <see cref="P:System.Reflection.PortableExecutable.SectionHeader.VirtualSize" /> field is not,

    it is possible for <see cref="P:System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData" /> to be greater than <see cref="P:System.Reflection.PortableExecutable.SectionHeader.VirtualSize" /> as well.

    When a section contains only uninitialized data, this field should be zero.
  syntax:
    content: public int SizeOfRawData { get; }
    content.vb: Public ReadOnly Property SizeOfRawData As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.SectionHeader.PointerToRawData
  id: PointerToRawData
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: PointerToRawData
  fullName: System.Reflection.PortableExecutable.SectionHeader.PointerToRawData
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 54
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The file pointer to the first page of the section within the COFF file.

    For PE images, this must be a multiple of [System.Reflection.PortableExecutable.PEHeader.FileAlignment](System.Reflection.PortableExecutable.PEHeader.yml).

    For object files, the value should be aligned on a 4 byte boundary for best performance.

    When a section contains only uninitialized data, this field should be zero.
  syntax:
    content: public int PointerToRawData { get; }
    content.vb: Public ReadOnly Property PointerToRawData As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.SectionHeader.PointerToRelocations
  id: PointerToRelocations
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: PointerToRelocations
  fullName: System.Reflection.PortableExecutable.SectionHeader.PointerToRelocations
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 60
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The file pointer to the beginning of relocation entries for the section.

    This is set to zero for PE images or if there are no relocations.
  syntax:
    content: public int PointerToRelocations { get; }
    content.vb: Public ReadOnly Property PointerToRelocations As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.SectionHeader.PointerToLineNumbers
  id: PointerToLineNumbers
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: PointerToLineNumbers
  fullName: System.Reflection.PortableExecutable.SectionHeader.PointerToLineNumbers
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 67
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The file pointer to the beginning of line-number entries for the section.

    This is set to zero if there are no COFF line numbers.

    This value should be zero for an image because COFF debugging information is deprecated.
  syntax:
    content: public int PointerToLineNumbers { get; }
    content.vb: Public ReadOnly Property PointerToLineNumbers As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.PortableExecutable.SectionHeader.NumberOfRelocations
  id: NumberOfRelocations
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: NumberOfRelocations
  fullName: System.Reflection.PortableExecutable.SectionHeader.NumberOfRelocations
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 72
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: The number of relocation entries for the section. This is set to zero for PE images.
  syntax:
    content: public ushort NumberOfRelocations { get; }
    content.vb: Public ReadOnly Property NumberOfRelocations As UShort
    parameters: []
    return:
      type: System.UInt16
- uid: System.Reflection.PortableExecutable.SectionHeader.NumberOfLineNumbers
  id: NumberOfLineNumbers
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: NumberOfLineNumbers
  fullName: System.Reflection.PortableExecutable.SectionHeader.NumberOfLineNumbers
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 78
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: >-
    The number of line-number entries for the section.

    This value should be zero for an image because COFF debugging information is deprecated.
  syntax:
    content: public ushort NumberOfLineNumbers { get; }
    content.vb: Public ReadOnly Property NumberOfLineNumbers As UShort
    parameters: []
    return:
      type: System.UInt16
- uid: System.Reflection.PortableExecutable.SectionHeader.SectionCharacteristics
  id: SectionCharacteristics
  parent: System.Reflection.PortableExecutable.SectionHeader
  href: System.Reflection.PortableExecutable.SectionHeader.yml
  name: SectionCharacteristics
  fullName: System.Reflection.PortableExecutable.SectionHeader.SectionCharacteristics
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/SectionHeader.cs
    startLine: 83
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.PortableExecutable
  summary: The flags that describe the characteristics of the section.
  syntax:
    content: public SectionCharacteristics SectionCharacteristics { get; }
    content.vb: Public ReadOnly Property SectionCharacteristics As SectionCharacteristics
    parameters: []
    return:
      type: System.Reflection.PortableExecutable.SectionCharacteristics
references:
- uid: System.Reflection.PortableExecutable
  isExternal: false
  name: System.Reflection.PortableExecutable
  fullName: System.Reflection.PortableExecutable
  type: Namespace
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.PortableExecutable.PEHeader.FileAlignment
- uid: System.Reflection.PortableExecutable.SectionHeader.VirtualSize
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  fullName: System.UInt16
- uid: System.Reflection.PortableExecutable.SectionCharacteristics
  parent: System.Reflection.PortableExecutable
  isExternal: false
  href: System.Reflection.PortableExecutable.SectionCharacteristics.yml
  name: SectionCharacteristics
  fullName: System.Reflection.PortableExecutable.SectionCharacteristics
  type: Enum
