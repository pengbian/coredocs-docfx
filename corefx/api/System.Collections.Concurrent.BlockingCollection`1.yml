items:
- uid: System.Collections.Concurrent.BlockingCollection`1
  id: BlockingCollection`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.BlockingCollection`1.#ctor
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  - System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  - System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Count
  - System.Collections.Concurrent.BlockingCollection`1.Dispose
  - System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  - System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.Take
  - System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.ToArray
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection<T>
  name.vb: BlockingCollection(Of T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 40
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Provides blocking and bounding capabilities for thread-safe collections that

    implement [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  remarks: >-
    <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}" /> represents a collection

    that allows for thread-safe adding and removing of data.

    <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> is used as a wrapper

    for an <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}" /> instance, allowing

    removal attempts from the collection to block until data is available to be removed.  Similarly,

    a <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> can be created to enforce

    an upper-bound on the number of data elements allowed in the

    <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}" />; addition attempts to the

    collection may then block until space is available to store the added items.  In this manner,

    <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> is similar to a traditional

    blocking queue data structure, except that the underlying data storage mechanism is abstracted

    away as an <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}" />.
  syntax:
    content: 'public class BlockingCollection<T> : ICollection, IDisposable, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    content.vb: Public Class BlockingCollection(Of T) Implements ICollection, IDisposable, IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: Specifies the type of elements in the collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.IDisposable
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  id: BoundedCapacity
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BoundedCapacity
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 61
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets the bounded capacity of this [System.Collections.Concurrent.BlockingCollection{T}]() instance.
  syntax:
    content: public int BoundedCapacity { get; }
    content.vb: Public ReadOnly Property BoundedCapacity As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  id: IsAddingCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).IsAddingCompleted
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 74
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets whether this [System.Collections.Concurrent.BlockingCollection{T}]() has been marked as complete for adding.
  syntax:
    content: public bool IsAddingCompleted { get; }
    content.vb: Public ReadOnly Property IsAddingCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  id: IsCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).IsCompleted
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 87
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets whether this [System.Collections.Concurrent.BlockingCollection{T}]() has been marked as complete for adding and is empty.
  syntax:
    content: public bool IsCompleted { get; }
    content.vb: Public ReadOnly Property IsCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  id: Count
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 100
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets the number of items contained in the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 112
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether access to the [System.Collections.ICollection]() is synchronized.
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 126
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection](). This property is not supported.
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    description: The SyncRoot property is not supported.
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 143
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the

    [System.Collections.Concurrent.BlockingCollection{T}]()

    class without an upper-bound.
  remarks: The default underlying collection is a [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content: public BlockingCollection()
    content.vb: Public Sub New
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection(Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 158
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.BlockingCollection{T}]()

    class with the specified upper-bound.
  remarks: The default underlying collection is a [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content: public BlockingCollection(int boundedCapacity)
    content.vb: Public Sub New(boundedCapacity As Integer)
    parameters:
    - id: boundedCapacity
      type: System.Int32
      description: The bounded size of the collection.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      The  is

      not a positive value.
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection(IProducerConsumerCollection<T>, Int32)
  name.vb: BlockingCollection(IProducerConsumerCollection(Of T), Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection(Of T), System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 173
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.BlockingCollection{T}]()

    class with the specified upper-bound and using the provided

    [System.Collections.Concurrent.IProducerConsumerCollection{T}]() as its underlying data store.
  syntax:
    content: public BlockingCollection(IProducerConsumerCollection<T> collection, int boundedCapacity)
    content.vb: Public Sub New(collection As IProducerConsumerCollection(Of T), boundedCapacity As Integer)
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
      description: The collection to use as the underlying data store.
    - id: boundedCapacity
      type: System.Int32
      description: The bounded size of the collection.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentOutOfRangeException
    description: The  is not a positive value.
  - type: System.ArgumentException
    description: >-
      The supplied  contains more values

      than is permitted by .
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})'
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection(IProducerConsumerCollection<T>)
  name.vb: BlockingCollection(IProducerConsumerCollection(Of T))
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection(Of T))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 199
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.BlockingCollection{T}]()

    class without an upper-bound and using the provided

    [System.Collections.Concurrent.IProducerConsumerCollection{T}]() as its underlying data store.
  syntax:
    content: public BlockingCollection(IProducerConsumerCollection<T> collection)
    content.vb: Public Sub New(collection As IProducerConsumerCollection(Of T))
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
      description: The collection to use as the underlying data store.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 252
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds the item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  remarks: >-
    If a bounded capacity was specified when this instance of

    <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> was initialized,

    a call to Add may block until space is available to store the provided item.
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection. The value can be a null reference.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The  has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.InvalidOperationException
    description: The underlying collection didn't accept the item.
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  id: Add(`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Add(T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T, System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Add(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 282
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Adds the item to the [System.Collections.Concurrent.BlockingCollection{T}]().

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  remarks: >-
    If a bounded capacity was specified when this instance of

    <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> was initialized,

    a call to <see cref="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)" /> may block until space is available to store the provided item.
  syntax:
    content: public void Add(T item, CancellationToken cancellationToken)
    content.vb: Public Sub Add(item As T, cancellationToken As CancellationToken)
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection. The value can be a null reference.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
  exceptions:
  - type: System.OperationCanceledException
    description: If the  is canceled.
  - type: System.InvalidOperationException
    description: >-
      The  has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.InvalidOperationException
    description: The underlying collection didn't accept the item.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 304
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content: public bool TryAdd(T item)
    content.vb: Public Function TryAdd(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection.
    return:
      type: System.Boolean
      description: true if the <paramref name="item" /> could be added; otherwise, false.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The  has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.InvalidOperationException
    description: The underlying collection didn't accept the item.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  id: TryAdd(`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.TimeSpan)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 327
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content: public bool TryAdd(T item, TimeSpan timeout)
    content.vb: Public Function TryAdd(item As T, timeout As TimeSpan) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection.
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if the <paramref name="item" /> could be added to the collection within

        the alloted time; otherwise, false.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The  has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number

      other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than

      .
  - type: System.InvalidOperationException
    description: The underlying collection didn't accept the item.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  id: TryAdd(`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 349
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content: public bool TryAdd(T item, int millisecondsTimeout)
    content.vb: Public Function TryAdd(item As T, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if the <paramref name="item" /> could be added to the collection within

        the alloted time; otherwise, false.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The  has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: The underlying collection didn't accept the item.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  id: TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 375
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content: public bool TryAdd(T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function TryAdd(item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Boolean
      description: >-
        true if the <paramref name="item" /> could be added to the collection within

        the alloted time; otherwise, false.
  exceptions:
  - type: System.OperationCanceledException
    description: If the  is canceled.
  - type: System.InvalidOperationException
    description: >-
      The  has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: The underlying collection didn't accept the item.
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  id: Take
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Take()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 537
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Takes an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  remarks: A call to [System.Collections.Concurrent.BlockingCollection`1.Take](System.Collections.Concurrent.BlockingCollection`1.yml) may block until an item is available to be removed.
  syntax:
    content: public T Take()
    content.vb: Public Function Take As T
    return:
      type: '{T}'
      description: The item removed from the collection.
  exceptions:
  - type: System.OperationCanceledException
    description: >-
      The  is empty and has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.InvalidOperationException
    description: >-
      The underlying collection was modified

      outside of this  instance.
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  id: Take(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Take(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Take(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 561
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Takes an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  remarks: A call to [System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)](System.Collections.Concurrent.BlockingCollection`1.yml) may block until an item is available to be removed.
  syntax:
    content: public T Take(CancellationToken cancellationToken)
    content.vb: Public Function Take(cancellationToken As CancellationToken) As T
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: '{T}'
      description: The item removed from the collection.
  exceptions:
  - type: System.OperationCanceledException
    description: >-
      If the  is

      canceled or the  is empty and has been marked

      as complete with regards to additions.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.InvalidOperationException
    description: >-
      The underlying collection was modified

      outside of this  instance.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T)
  name.vb: TryTake(ByRef T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 583
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content: public bool TryTake(out T item)
    content.vb: Public Function TryTake(ByRef item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item removed from the collection.
    return:
      type: System.Boolean
      description: true if an item could be removed; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.InvalidOperationException
    description: >-
      The underlying collection was modified

      outside of this  instance.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  id: TryTake(`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T, TimeSpan)
  name.vb: TryTake(ByRef T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.TimeSpan)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 605
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content: public bool TryTake(out T item, TimeSpan timeout)
    content.vb: Public Function TryTake(ByRef item As T, timeout As TimeSpan) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item removed from the collection.
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if an item could be removed from the collection within

        the alloted time; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number

      other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than

      .
  - type: System.InvalidOperationException
    description: >-
      The underlying collection was modified

      outside of this  instance.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  id: TryTake(`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T, Int32)
  name.vb: TryTake(ByRef T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 626
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content: public bool TryTake(out T item, int millisecondsTimeout)
    content.vb: Public Function TryTake(ByRef item As T, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item removed from the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if an item could be removed from the collection within

        the alloted time; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: >-
      The underlying collection was modified

      outside of this  instance.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T, Int32, CancellationToken)
  name.vb: TryTake(ByRef T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 651
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content: public bool TryTake(out T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function TryTake(ByRef item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item removed from the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Boolean
      description: >-
        true if an item could be removed from the collection within

        the alloted time; otherwise, false.
  exceptions:
  - type: System.OperationCanceledException
    description: If the  is canceled.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: >-
      The underlying collection was modified

      outside of this  instance.
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: AddToAny(BlockingCollection<T>[], T)
  name.vb: AddToAny(BlockingCollection(Of T)(), T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).AddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 792
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Adds the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  remarks: >-
    If a bounded capacity was specified when all of the

    <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> instances were initialized,

    a call to AddToAny may block until space is available in one of the collections

    to store the provided item.
  syntax:
    content: public static int AddToAny(BlockingCollection<T>[] collections, T item)
    content.vb: Public Shared Function AddToAny(collections As BlockingCollection(Of T)(), item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    return:
      type: System.Int32
      description: The index of the collection in the <paramref name="collections" /> array to which the item was added.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element, or at least one of collections has been

      marked as complete for adding.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: AddToAny(BlockingCollection<T>[], T, CancellationToken)
  name.vb: AddToAny(BlockingCollection(Of T)(), T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).AddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 834
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Adds the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  remarks: >-
    If a bounded capacity was specified when all of the

    <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> instances were initialized,

    a call to AddToAny may block until space is available in one of the collections

    to store the provided item.
  syntax:
    content: public static int AddToAny(BlockingCollection<T>[] collections, T item, CancellationToken cancellationToken)
    content.vb: Public Shared Function AddToAny(collections As BlockingCollection(Of T)(), item As T, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: The index of the collection in the <paramref name="collections" /> array to which the item was added.
  exceptions:
  - type: System.OperationCanceledException
    description: If the  is canceled.
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element, or at least one of collections has been

      marked as complete for adding.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 867
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" />

        array to which the item was added, or -1 if the item could not be added.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element, or at least one of collections has been

      marked as complete for adding.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T, TimeSpan)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.TimeSpan)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 896
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, TimeSpan timeout)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, timeout As TimeSpan) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" />

        array to which the item was added, or -1 if the item could not be added.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element, or at least one of collections has been

      marked as complete for adding.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number

      other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than

      .
  - type: System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T, Int32)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 923
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, millisecondsTimeout As Integer) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" />

        array to which the item was added, or -1 if the item could not be added.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element, or at least one of collections has been

      marked as complete for adding.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 955
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" />

        array to which the item was added, or -1 if the item could not be added.
  exceptions:
  - type: System.OperationCanceledException
    description: If the  is canceled.
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element, or at least one of collections has been

      marked as complete for adding.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TakeFromAny(BlockingCollection<T>[], out T)
  name.vb: TakeFromAny(BlockingCollection(Of T)(), ByRef T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1171
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Takes an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  remarks: A call to TakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item)
    content.vb: Public Shared Function TakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" /> array from which

        the item was removed, or -1 if an item could not be removed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.InvalidOperationException
    description: >-
      At least one of the underlying collections was modified

      outside of its  instance.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TakeFromAny(BlockingCollection<T>[], out T, CancellationToken)
  name.vb: TakeFromAny(BlockingCollection(Of T)(), ByRef T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1200
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Takes an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  remarks: A call to TakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item, CancellationToken cancellationToken)
    content.vb: Public Shared Function TakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" /> array from which

        the item was removed, or -1 if an item could not be removed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.OperationCanceledException
    description: If the  is canceled.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.InvalidOperationException
    description: >-
      At least one of the underlying collections was modified

      outside of its  instance.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1228
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" /> array from which

        the item was removed, or -1 if an item could not be removed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.InvalidOperationException
    description: >-
      At least one of the underlying collections was modified

      outside of its  instance.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T, TimeSpan)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.TimeSpan)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1259
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, TimeSpan timeout)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, timeout As TimeSpan) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" /> array from which

        the item was removed, or -1 if an item could not be removed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number

      other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than

      .
  - type: System.InvalidOperationException
    description: >-
      At least one of the underlying collections was modified

      outside of its  instance.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T, Int32)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1289
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, millisecondsTimeout As Integer) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" /> array from which

        the item was removed, or -1 if an item could not be removed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: >-
      At least one of the underlying collections was modified

      outside of its  instance.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T, Int32, CancellationToken)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1323
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: >-
        The index of the collection in the <paramref name="collections" /> array from which

        the item was removed, or -1 if an item could not be removed.
  exceptions:
  - type: System.OperationCanceledException
    description: If the  is canceled.
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentException
    description: >-
      The  argument is

      a 0-length array or contains a null element.
  - type: System.ObjectDisposedException
    description: At least one of the  instances has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    description: >-
      At least one of the underlying collections was modified

      outside of its  instance.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The count of  is greater than the maximum size of

      62 for STA and 63 for MTA.
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  id: CompleteAdding
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).CompleteAdding()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1472
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Marks the [System.Collections.Concurrent.BlockingCollection{T}]() instances

    as not accepting any more additions.
  remarks: >-
    After a collection has been marked as complete for adding, adding to the collection is not permitted

    and attempts to remove from the collection will not wait when the collection is empty.
  syntax:
    content: public void CompleteAdding()
    content.vb: Public Sub CompleteAdding
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  id: Dispose
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1526
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Releases resources used by the [System.Collections.Concurrent.BlockingCollection{T}]() instance.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Dispose(Boolean)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(System.Boolean)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1536
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Releases resources used by the [System.Collections.Concurrent.BlockingCollection{T}]() instance.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: Whether being disposed explicitly (true) or due to a finalizer (false).
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1558
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the items from the [System.Collections.Concurrent.BlockingCollection{T}]() instance into a new array.
  remarks: The copied elements are not removed from the collection.
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: An array containing copies of the elements of the collection.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1577
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Copies all of the items in the [System.Collections.Concurrent.BlockingCollection{T}]() instance

    to a compatible one-dimensional array, starting at the specified index of the target array.
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: >-
        The one-dimensional array that is the destination of the elements copied from

        the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> instance. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <paramref name="array" /> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument is less than zero.
  - type: System.ArgumentException
    description: >-
      The  argument is equal to or greater

      than the length of the .
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1596
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Copies all of the items in the [System.Collections.Concurrent.BlockingCollection{T}]() instance

    to a compatible one-dimensional array, starting at the specified index of the target array.
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: >-
        The one-dimensional array that is the destination of the elements copied from

        the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}" /> instance. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <paramref name="array" /> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument is less than zero.
  - type: System.ArgumentException
    description: >-
      The  argument is equal to or greater

      than the length of the , the array is multidimensional, or the type parameter for the collection

      cannot be cast automatically to the type of the destination array.
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  id: GetConsumingEnumerable
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).GetConsumingEnumerable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1638
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Provides a consuming [System.Collections.Generics.IEnumerable{T}]() for items in the collection.
  syntax:
    content: public IEnumerable<T> GetConsumingEnumerable()
    content.vb: Public Function GetConsumingEnumerable As IEnumerable(Of T)
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <see cref="T:System.Collections.Generics.IEnumerable{T}" /> that removes and returns items from the collection.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  id: GetConsumingEnumerable(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: GetConsumingEnumerable(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(System.Threading.CancellationToken)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).GetConsumingEnumerable(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1652
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: >-
    Provides a consuming [System.Collections.Generics.IEnumerable{T}]() for items in the collection.

    Calling MoveNext on the returned enumerable will block if there is no data available, or will

    throw an [System.OperationCanceledException]() if the [System.Threading.CancellationToken]() is canceled.
  syntax:
    content: public IEnumerable<T> GetConsumingEnumerable(CancellationToken cancellationToken)
    content.vb: Public Function GetConsumingEnumerable(cancellationToken As CancellationToken) As IEnumerable(Of T)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <see cref="T:System.Collections.Generics.IEnumerable{T}" /> that removes and returns items from the collection.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
  - type: System.OperationCanceledException
    description: If the  is canceled.
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1680
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Provides an [System.Collections.Generics.IEnumerator{T}]() for items in the collection.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An <see cref="T:System.Collections.Generics.IEnumerator{T}" /> for the items in the collection.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1690
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Provides an [System.Collections.IEnumerator]() for items in the collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An <see cref="T:System.Collections.IEnumerator" /> for the items in the collection.
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
references:
- uid: System.Collections.Concurrent.IProducerConsumerCollection{T}
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Collections.Concurrent.BlockingCollection{T}
- uid: System.ObjectDisposedException
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.NotSupportedException
- uid: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue<T>
  name.vb: ConcurrentQueue(Of T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T)
  type: Class
  summary: Represents a thread-safe first-in, first-out collection of objects.
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
- uid: System.ArgumentException
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1
  href: System.Collections.Concurrent.IProducerConsumerCollection`1.yml
  name: IProducerConsumerCollection<T>
  name.vb: IProducerConsumerCollection(Of T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
    href: System.Collections.Concurrent.IProducerConsumerCollection`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
    href: System.Collections.Concurrent.IProducerConsumerCollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  parent: System.Collections.Concurrent
  isExternal: false
  href: System.Collections.Concurrent.IProducerConsumerCollection`1.yml
  name: IProducerConsumerCollection<T>
  name.vb: IProducerConsumerCollection(Of T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  type: Interface
  summary: Defines methods to manipulate thread-safe collections intended for producer/consumer usage.
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
    href: System.Collections.Concurrent.IProducerConsumerCollection`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
    href: System.Collections.Concurrent.IProducerConsumerCollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.OperationCanceledException
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Timeout.Infinite
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1[]
  isExternal: false
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection<T>[]
  name.vb: BlockingCollection(Of T)()
  fullName: System.Collections.Concurrent.BlockingCollection<T>[]
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T)()
  spec.csharp:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    fullName: System.Collections.Concurrent.BlockingCollection
    href: System.Collections.Concurrent.BlockingCollection`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    fullName: System.Collections.Concurrent.BlockingCollection
    href: System.Collections.Concurrent.BlockingCollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  fullName: System.Array
- uid: System.Collections.Generics.IEnumerable{T}
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generics.IEnumerator{T}
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
