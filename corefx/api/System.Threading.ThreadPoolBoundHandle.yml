items:
- uid: System.Threading.ThreadPoolBoundHandle
  id: ThreadPoolBoundHandle
  parent: System.Threading
  children:
  - System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
  - System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  - System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)
  - System.Threading.ThreadPoolBoundHandle.Dispose
  - System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  - System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  - System.Threading.ThreadPoolBoundHandle.Handle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: ThreadPoolBoundHandle
  fullName: System.Threading.ThreadPoolBoundHandle
  type: Class
  source:
    remote: &o0
      path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 16
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  summary: >-
    Represents an I/O handle that is bound to the system thread pool and enables low-level

    components to receive notifications for asynchronous I/O operations.
  syntax:
    content: 'public sealed class ThreadPoolBoundHandle : IDisposable'
    content.vb: Public NotInheritable Class ThreadPoolBoundHandle Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.ThreadPoolBoundHandle.Handle
  id: Handle
  parent: System.Threading.ThreadPoolBoundHandle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: Handle
  fullName: System.Threading.ThreadPoolBoundHandle.Handle
  type: Property
  source:
    remote: *o0
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 32
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  summary: Gets the bound operating system handle.
  syntax:
    content: public SafeHandle Handle { get; }
    content.vb: Public ReadOnly Property Handle As SafeHandle
    parameters: []
    return:
      type: System.Runtime.InteropServices.SafeHandle
- uid: System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)
  id: BindHandle(System.Runtime.InteropServices.SafeHandle)
  parent: System.Threading.ThreadPoolBoundHandle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: BindHandle(SafeHandle)
  fullName: System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 76
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  summary: >-
    Returns a [System.Threading.ThreadPoolBoundHandle](System.Threading.ThreadPoolBoundHandle.yml) for the specific handle,

    which is bound to the system thread pool.
  remarks: >-
    This method should be called once per handle.

    <para>

    -or-

    </para><see cref="T:System.Threading.ThreadPoolBoundHandle" /> does not take ownership of <paramref name="handle" />,

    it remains the responsibility of the caller to call <see cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />.
  syntax:
    content: public static ThreadPoolBoundHandle BindHandle(SafeHandle handle)
    content.vb: Public Shared Function BindHandle(handle As SafeHandle) As ThreadPoolBoundHandle
    parameters:
    - id: handle
      type: System.Runtime.InteropServices.SafeHandle
      description: >-
        A [System.Runtime.InteropServices.SafeHandle]() object that holds the operating system handle. The

        handle must have been opened for overlapped I/O on the unmanaged side.
    return:
      type: System.Threading.ThreadPoolBoundHandle
      description: >-
        <see cref="T:System.Threading.ThreadPoolBoundHandle" /> for <paramref name="handle" />, which

        is bound to the system thread pool.
  exceptions:
  - type: System.ArgumentNullException
    description: is .
  - type: System.ArgumentException
    description: >-
      has been disposed.



      -or-

      does not refer to a valid I/O handle.



      -or-

      refers to a handle that has not been opened

      for overlapped I/O.



      -or-

      refers to a handle that has already been bound.
- uid: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
  id: AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
  parent: System.Threading.ThreadPoolBoundHandle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: AllocateNativeOverlapped(IOCompletionCallback, Object, Object)
  fullName: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback, System.Object, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 149
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  summary: >-
    Returns an unmanaged pointer to a [System.Threading.NativeOverlapped]() structure, specifying

    a delegate that is invoked when the asynchronous I/O operation is complete, a user-provided

    object providing context, and managed objects that serve as buffers.
  remarks: >-
    <para>

    The unmanaged pointer returned by this method can be passed to the operating system in

    overlapped I/O operations. The <see cref="T:System.Threading.NativeOverlapped" /> structure is fixed in

    physical memory until <see cref="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)" /> is called.

    </para>

    <para>

    The buffer or buffers specified in <paramref name="pinData" /> must be the same as those passed

    to the unmanaged operating system function that performs the asynchronous I/O.

    </para>

    <note>

    The buffers specified in <paramref name="pinData" /> are pinned for the duration of

    the I/O operation.

    </note>
  syntax:
    content: public NativeOverlapped*AllocateNativeOverlapped(IOCompletionCallback callback, object state, object pinData)
    content.vb: Public Function AllocateNativeOverlapped(callback As IOCompletionCallback, state As Object, pinData As Object) As NativeOverlapped
    parameters:
    - id: callback
      type: System.Threading.IOCompletionCallback
      description: >-
        An [System.Threading.IOCompletionCallback]() delegate that represents the callback method

        invoked when the asynchronous I/O operation completes.
    - id: state
      type: System.Object
      description: >-
        A user-provided object that distinguishes this <see cref="T:System.Threading.NativeOverlapped" /> from other

        <see cref="T:System.Threading.NativeOverlapped" /> instances. Can be <see langword="null" />.
    - id: pinData
      type: System.Object
      description: >-
        An object or array of objects representing the input or output buffer for the operation. Each

        object represents a buffer, for example an array of bytes.  Can be <see langword="null" />.
    return:
      type: System.Threading.NativeOverlapped*
      description: An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.
  exceptions:
  - type: System.ArgumentNullException
    description: is .
  - type: System.ObjectDisposedException
    description: This method was called after the  was disposed.
- uid: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  id: AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  parent: System.Threading.ThreadPoolBoundHandle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: AllocateNativeOverlapped(PreAllocatedOverlapped)
  fullName: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 190
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  summary: >-
    Returns an unmanaged pointer to a [System.Threading.NativeOverlapped]() structure, using the callback,

    state, and buffers associated with the specified [System.Threading.PreAllocatedOverlapped](System.Threading.PreAllocatedOverlapped.yml) object.
  remarks: >-
    <para>

    The unmanaged pointer returned by this method can be passed to the operating system in

    overlapped I/O operations. The <see cref="T:System.Threading.NativeOverlapped" /> structure is fixed in

    physical memory until <see cref="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)" /> is called.

    </para>
  syntax:
    content: public NativeOverlapped*AllocateNativeOverlapped(PreAllocatedOverlapped preAllocated)
    content.vb: Public Function AllocateNativeOverlapped(preAllocated As PreAllocatedOverlapped) As NativeOverlapped
    parameters:
    - id: preAllocated
      type: System.Threading.PreAllocatedOverlapped
      description: A <see cref="T:System.Threading.PreAllocatedOverlapped" /> object from which to create the NativeOverlapped pointer.
    return:
      type: System.Threading.NativeOverlapped*
      description: An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.
  exceptions:
  - type: System.ArgumentNullException
    description: is .
  - type: System.ArgumentException
    description: is currently in use for another I/O operation.
  - type: System.ObjectDisposedException
    description: >-
      This method was called after the  was disposed, or

      this method was called after  was disposed.
  seealso:
  - type: System.Threading.PreAllocatedOverlapped
- uid: System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  id: FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  parent: System.Threading.ThreadPoolBoundHandle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: FreeNativeOverlapped(NativeOverlapped*)
  fullName: System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 240
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  summary: >-
    Frees the unmanaged memory associated with a [System.Threading.NativeOverlapped]() structure

    allocated by the [System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)](System.Threading.ThreadPoolBoundHandle.yml) method.
  remarks: >-
    <note type="caution">

    You must call the <see cref="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)" /> method exactly once

    on every <see cref="T:System.Threading.NativeOverlapped" /> unmanaged pointer allocated using the

    <see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /> method.

    If you do not call the <see cref="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)" /> method, you will

    leak memory. If you call the <see cref="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)" /> method more

    than once on the same <see cref="T:System.Threading.NativeOverlapped" /> unmanaged pointer, memory will be corrupted.

    </note>
  syntax:
    content: public void FreeNativeOverlapped(NativeOverlapped*overlapped)
    content.vb: Public Sub FreeNativeOverlapped(overlapped As NativeOverlapped *)
    parameters:
    - id: overlapped
      type: System.Threading.NativeOverlapped*
      description: An unmanaged pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure to be freed.
  exceptions:
  - type: System.ArgumentNullException
    description: is .
  - type: System.ObjectDisposedException
    description: This method was called after the  was disposed.
- uid: System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  id: GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  parent: System.Threading.ThreadPoolBoundHandle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: GetNativeOverlappedState(NativeOverlapped*)
  fullName: System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 275
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  summary: >-
    Returns the user-provided object specified when the [System.Threading.NativeOverlapped]() instance was

    allocated using the <see cref="!:AllocateNativeOverlapped(IOCompletionCallback, object, byte[])" />.
  syntax:
    content: public static object GetNativeOverlappedState(NativeOverlapped*overlapped)
    content.vb: Public Shared Function GetNativeOverlappedState(overlapped As NativeOverlapped *) As Object
    parameters:
    - id: overlapped
      type: System.Threading.NativeOverlapped*
      description: >-
        An unmanaged pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure from which to return the

        asscociated user-provided object.
    return:
      type: System.Object
      description: >-
        A user-provided object that distinguishes this <see cref="T:System.Threading.NativeOverlapped" />

        from other <see cref="T:System.Threading.NativeOverlapped" /> instances, otherwise, <see langword="null" /> if one was

        not specified when the instance was allocated using <see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" />.
  exceptions:
  - type: System.ArgumentNullException
    description: is .
- uid: System.Threading.ThreadPoolBoundHandle.Dispose
  id: Dispose
  parent: System.Threading.ThreadPoolBoundHandle
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: Dispose()
  fullName: System.Threading.ThreadPoolBoundHandle.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Overlapped/src/System/Threading/ClrThreadPoolBoundHandle.cs
    startLine: 301
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Threading.ThreadPoolBoundHandle
  parent: System.Threading
  isExternal: false
  href: System.Threading.ThreadPoolBoundHandle.yml
  name: ThreadPoolBoundHandle
  fullName: System.Threading.ThreadPoolBoundHandle
  type: Class
  summary: >-
    Represents an I/O handle that is bound to the system thread pool and enables low-level

    components to receive notifications for asynchronous I/O operations.
- uid: System.ArgumentNullException
- uid: System.ArgumentException
- uid: System.Threading.NativeOverlapped
- uid: System.Threading.IOCompletionCallback
  parent: System.Threading
  isExternal: true
  name: IOCompletionCallback
  fullName: System.Threading.IOCompletionCallback
- uid: System.ObjectDisposedException
- uid: System.Threading.NativeOverlapped*
  isExternal: true
  name: NativeOverlapped*
  fullName: System.Threading.NativeOverlapped*
  spec.csharp:
  - uid: System.Threading.NativeOverlapped
    name: NativeOverlapped
    fullName: System.Threading.NativeOverlapped
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Threading.NativeOverlapped
    name: NativeOverlapped
    fullName: System.Threading.NativeOverlapped
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Threading.PreAllocatedOverlapped
  parent: System.Threading
  isExternal: false
  href: System.Threading.PreAllocatedOverlapped.yml
  name: PreAllocatedOverlapped
  fullName: System.Threading.PreAllocatedOverlapped
  type: Class
  summary: Represents pre-allocated state for native overlapped I/O operations.
- uid: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
