items:
- uid: System.Reflection.Metadata.ExceptionRegion
  id: ExceptionRegion
  parent: System.Reflection.Metadata
  children:
  - System.Reflection.Metadata.ExceptionRegion.CatchType
  - System.Reflection.Metadata.ExceptionRegion.FilterOffset
  - System.Reflection.Metadata.ExceptionRegion.HandlerLength
  - System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  - System.Reflection.Metadata.ExceptionRegion.Kind
  - System.Reflection.Metadata.ExceptionRegion.TryLength
  - System.Reflection.Metadata.ExceptionRegion.TryOffset
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: ExceptionRegion
  fullName: System.Reflection.Metadata.ExceptionRegion
  type: Struct
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
      key: 66d90a88
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 5
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  syntax:
    content: public struct ExceptionRegion
    content.vb: Public Structure ExceptionRegion
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: System.Reflection.Metadata.ExceptionRegion.Kind
  id: Kind
  parent: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: Kind
  fullName: System.Reflection.Metadata.ExceptionRegion.Kind
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 30
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  syntax:
    content: public ExceptionRegionKind Kind { get; }
    content.vb: Public ReadOnly Property Kind As ExceptionRegionKind
    parameters: []
    return:
      type: System.Reflection.Metadata.ExceptionRegionKind
- uid: System.Reflection.Metadata.ExceptionRegion.TryOffset
  id: TryOffset
  parent: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: TryOffset
  fullName: System.Reflection.Metadata.ExceptionRegion.TryOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 38
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Start IL offset of the try block.
  syntax:
    content: public int TryOffset { get; }
    content.vb: Public ReadOnly Property TryOffset As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.Metadata.ExceptionRegion.TryLength
  id: TryLength
  parent: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: TryLength
  fullName: System.Reflection.Metadata.ExceptionRegion.TryLength
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 46
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Length in bytes of try block.
  syntax:
    content: public int TryLength { get; }
    content.vb: Public ReadOnly Property TryLength As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  id: HandlerOffset
  parent: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: HandlerOffset
  fullName: System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 54
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Start IL offset of the exception handler.
  syntax:
    content: public int HandlerOffset { get; }
    content.vb: Public ReadOnly Property HandlerOffset As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.Metadata.ExceptionRegion.HandlerLength
  id: HandlerLength
  parent: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: HandlerLength
  fullName: System.Reflection.Metadata.ExceptionRegion.HandlerLength
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 62
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Length in bytes of the exception handler.
  syntax:
    content: public int HandlerLength { get; }
    content.vb: Public ReadOnly Property HandlerLength As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.Metadata.ExceptionRegion.FilterOffset
  id: FilterOffset
  parent: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: FilterOffset
  fullName: System.Reflection.Metadata.ExceptionRegion.FilterOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 70
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: IL offset of the start of the filter block, or -1 if the region is not a filter.
  syntax:
    content: public int FilterOffset { get; }
    content.vb: Public ReadOnly Property FilterOffset As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.Metadata.ExceptionRegion.CatchType
  id: CatchType
  parent: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: CatchType
  fullName: System.Reflection.Metadata.ExceptionRegion.CatchType
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 78
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Returns a TypeRef, TypeDef, or TypeSpec handle if the region represents a catch, nil token otherwise.
  syntax:
    content: public EntityHandle CatchType { get; }
    content.vb: Public ReadOnly Property CatchType As EntityHandle
    parameters: []
    return:
      type: System.Reflection.Metadata.EntityHandle
references:
- uid: System.Reflection.Metadata
  isExternal: false
  name: System.Reflection.Metadata
  fullName: System.Reflection.Metadata
  type: Namespace
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Reflection.Metadata.ExceptionRegionKind
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.ExceptionRegionKind.yml
  name: ExceptionRegionKind
  fullName: System.Reflection.Metadata.ExceptionRegionKind
  type: Enum
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.Metadata.EntityHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.EntityHandle.yml
  name: EntityHandle
  fullName: System.Reflection.Metadata.EntityHandle
  type: Struct
  summary: Represents a metadata entity (type reference/definition/specification, method definition, custom attribute, etc.).
