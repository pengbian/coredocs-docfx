items:
- uid: System.Diagnostics.Tracing.EventSource
  id: EventSource
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventSource.#ctor
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  - System.Diagnostics.Tracing.EventSource.ConstructionException
  - System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  - System.Diagnostics.Tracing.EventSource.Dispose
  - System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  - System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  - System.Diagnostics.Tracing.EventSource.Finalize
  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  - System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  - System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  - System.Diagnostics.Tracing.EventSource.GetSources
  - System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  - System.Diagnostics.Tracing.EventSource.Guid
  - System.Diagnostics.Tracing.EventSource.IsEnabled
  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  - System.Diagnostics.Tracing.EventSource.Name
  - System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  - System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  - System.Diagnostics.Tracing.EventSource.Settings
  - System.Diagnostics.Tracing.EventSource.ToString
  - System.Diagnostics.Tracing.EventSource.Write(System.String)
  - System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
  type: Class
  source:
    remote: &o1
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 42
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This class is meant to be inherited by a user-defined event source in order to define a managed

    ETW provider.   Please See DESIGN NOTES above for the internal architecture.

    The minimal definition of an EventSource simply specifies a number of ETW event methods that

    call one of the EventSource.WriteEvent overloads, [System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)](System.Diagnostics.Tracing.EventSource.yml),

    or [System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)](System.Diagnostics.Tracing.EventSource.yml) to log them. This functionality

    is sufficient for many users.

    <para>

    To achieve more control over the ETW provider manifest exposed by the event source type, the

    [<see cref="T:System.Diagnostics.Tracing.EventAttribute" />] attributes can be specified for the ETW event methods.

    </para><para>

    For very advanced EventSources, it is possible to intercept the commands being given to the

    eventSource and change what filtering is done (see EventListener.EnableEvents and

    <see cref="M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)" />) or cause actions to be performed by the eventSource,

    e.g. dumping a data structure (see EventSource.SendCommand and

    <see cref="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" />).

    </para><para>

    The eventSources can be turned on with Windows ETW controllers (e.g. logman), immediately.

    It is also possible to control and intercept the data dispatcher programmatically.  See

    <see cref="T:System.Diagnostics.Tracing.EventListener" /> for more.

    </para>
  remarks: >-
    This is a minimal definition for a custom event source:

    <code>

    [EventSource(Name="Samples-Demos-Minimal")]

    sealed class MinimalEventSource : EventSource

    {

    public static MinimalEventSource Log = new MinimalEventSource();

    public void Load(long ImageBase, string Name) { WriteEvent(1, ImageBase, Name); }

    public void Unload(long ImageBase) { WriteEvent(2, ImageBase); }

    private MinimalEventSource() {}

    }

    </code>
  syntax:
    content: 'public class EventSource : IDisposable'
    content.vb: Public Class EventSource Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Diagnostics.Tracing.EventSource.Name
  id: Name
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Name
  fullName: System.Diagnostics.Tracing.EventSource.Name
  type: Property
  source:
    remote: &o0
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 260
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: The human-friendly name of the eventSource.  It defaults to the simple name of the class
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
- uid: System.Diagnostics.Tracing.EventSource.Guid
  id: Guid
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Guid
  fullName: System.Diagnostics.Tracing.EventSource.Guid
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 264
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Every eventSource is assigned a GUID to uniquely identify it to the system.
  syntax:
    content: public Guid Guid { get; }
    content.vb: Public ReadOnly Property Guid As Guid
    parameters: []
    return:
      type: System.Guid
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled
  id: IsEnabled
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: IsEnabled()
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 270
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Returns true if the eventSource has been enabled at all. This is the prefered test

    to be performed before a relatively expensive EventSource operation.
  syntax:
    content: public bool IsEnabled()
    content.vb: Public Function IsEnabled As Boolean
    return:
      type: System.Boolean
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: IsEnabled(EventLevel, EventKeywords)
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 285
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Returns true if events with greater than or equal 'level' and have one of 'keywords' set are enabled.



    Note that the result of this function is only an approximation on whether a particular

    event is active or not. It is only meant to be used as way of avoiding expensive

    computation for logging when logging is not on, therefore it sometimes returns false

    positives (but is always accurate when returning false).  EventSources are free to

    have additional filtering.
  syntax:
    content: public bool IsEnabled(EventLevel level, EventKeywords keywords)
    content.vb: Public Function IsEnabled(level As EventLevel, keywords As EventKeywords) As Boolean
    parameters:
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
    - id: keywords
      type: System.Diagnostics.Tracing.EventKeywords
    return:
      type: System.Boolean
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: IsEnabled(EventLevel, EventKeywords, EventChannel)
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Diagnostics.Tracing.EventChannel)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 301
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Returns true if events with greater than or equal 'level' and have one of 'keywords' set are enabled, or

    if 'keywords' specifies a channel bit for a channel that is enabled.



    Note that the result of this function only an approximation on whether a particular

    event is active or not. It is only meant to be used as way of avoiding expensive

    computation for logging when logging is not on, therefore it sometimes returns false

    positives (but is always accurate when returning false).  EventSources are free to

    have additional filtering.
  syntax:
    content: public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel)
    content.vb: Public Function IsEnabled(level As EventLevel, keywords As EventKeywords, channel As EventChannel) As Boolean
    parameters:
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
    - id: keywords
      type: System.Diagnostics.Tracing.EventKeywords
    - id: channel
      type: System.Diagnostics.Tracing.EventChannel
    return:
      type: System.Boolean
- uid: System.Diagnostics.Tracing.EventSource.Settings
  id: Settings
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Settings
  fullName: System.Diagnostics.Tracing.EventSource.Settings
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 392
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Returns the settings for the event source instance
  syntax:
    content: public EventSourceSettings Settings { get; }
    content.vb: Public ReadOnly Property Settings As EventSourceSettings
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventSourceSettings
- uid: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  id: GetGuid(System.Type)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: GetGuid(Type)
  fullName: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 403
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Returns the GUID that uniquely identifies the eventSource defined by 'eventSourceType'.

    This API allows you to compute this without actually creating an instance of the EventSource.

    It only needs to reflect over the type.
  syntax:
    content: public static Guid GetGuid(Type eventSourceType)
    content.vb: Public Shared Function GetGuid(eventSourceType As Type) As Guid
    parameters:
    - id: eventSourceType
      type: System.Type
    return:
      type: System.Guid
- uid: System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  id: GetName(System.Type)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: GetName(Type)
  fullName: System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 439
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Returns the official ETW Provider name for the eventSource defined by 'eventSourceType'.

    This API allows you to compute this without actually creating an instance of the EventSource.

    It only needs to reflect over the type.
  syntax:
    content: public static string GetName(Type eventSourceType)
    content.vb: Public Shared Function GetName(eventSourceType As Type) As String
    parameters:
    - id: eventSourceType
      type: System.Type
    return:
      type: System.String
- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  id: GenerateManifest(System.Type,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: GenerateManifest(Type, String)
  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 454
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Returns a string of the XML manifest associated with the eventSourceType. The scheme for this XML is

    documented at in EventManifest Schema http://msdn.microsoft.com/en-us/library/aa384043(VS.85).aspx.

    This is the preferred way of generating a manifest to be embedded in the ETW stream as it is fast and

    the fact that it only includes localized entries for the current UI culture is an acceptable tradeoff.
  syntax:
    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest)
    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: The type of the event source class for which the manifest is generated
    - id: assemblyPathToIncludeInManifest
      type: System.String
      description: >-
        The manifest XML fragment contains the string name of the DLL name in

        which it is embedded.  This parameter specifies what name will be used
    return:
      type: System.String
      description: The XML data string
- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  id: GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: GenerateManifest(Type, String, EventManifestOptions)
  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String, System.Diagnostics.Tracing.EventManifestOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 470
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Returns a string of the XML manifest associated with the eventSourceType. The scheme for this XML is

    documented at in EventManifest Schema http://msdn.microsoft.com/en-us/library/aa384043(VS.85).aspx.

    Pass EventManifestOptions.AllCultures when generating a manifest to be registered on the machine. This

    ensures that the entries in the event log will be "optimally" localized.
  syntax:
    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest, EventManifestOptions flags)
    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String, flags As EventManifestOptions) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: The type of the event source class for which the manifest is generated
    - id: assemblyPathToIncludeInManifest
      type: System.String
      description: >-
        The manifest XML fragment contains the string name of the DLL name in

        which it is embedded.  This parameter specifies what name will be used
    - id: flags
      type: System.Diagnostics.Tracing.EventManifestOptions
      description: >-
        The flags to customize manifest generation. If flags has bit OnlyIfNeededForRegistration specified

        this returns null when the eventSourceType does not require explicit registration
    return:
      type: System.String
      description: The XML data string or null
- uid: System.Diagnostics.Tracing.EventSource.GetSources
  id: GetSources
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: GetSources()
  fullName: System.Diagnostics.Tracing.EventSource.GetSources()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 485
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: returns a list (IEnumerable) of all sources in the appdomain).  EventListeners typically need this.
  syntax:
    content: public static IEnumerable<EventSource> GetSources()
    content.vb: Public Shared Function GetSources As IEnumerable(Of EventSource)
    return:
      type: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}
      description: 
- uid: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: SendCommand(EventSource, EventCommand, IDictionary<String, String>)
  name.vb: SendCommand(EventSource, EventCommand, IDictionary(Of String, String))
  fullName: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary<System.String, System.String>)
  fullName.vb: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary(Of System.String, System.String))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 509
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Send a command to a particular EventSource identified by 'eventSource'.

    Calling this routine simply forwards the command to the EventSource.OnEventCommand

    callback.  What the EventSource does with the command and its arguments are from

    that point EventSource-specific.
  syntax:
    content: public static void SendCommand(EventSource eventSource, EventCommand command, IDictionary<string, string> commandArguments)
    content.vb: Public Shared Sub SendCommand(eventSource As EventSource, command As EventCommand, commandArguments As IDictionary(Of String, String))
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: The instance of EventSource to send the command to
    - id: command
      type: System.Diagnostics.Tracing.EventCommand
      description: A positive user-defined EventCommand, or EventCommand.SendManifest
    - id: commandArguments
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: A set of (name-argument, value-argument) pairs associated with the command
- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  id: SetCurrentThreadActivityId(System.Guid)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: SetCurrentThreadActivityId(Guid)
  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 539
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    When a thread starts work that is on behalf of 'something else' (typically another

    thread or network request) it should mark the thread as working on that other work.

    This API marks the current thread as working on activity 'activityID'. This API

    should be used when the caller knows the thread's current activity (the one being

    overwritten) has completed. Otherwise, callers should prefer the overload that

    return the oldActivityThatWillContinue (below).



    All events created with the EventSource on this thread are also tagged with the

    activity ID of the thread.



    It is common, and good practice after setting the thread to an activity to log an event

    with a 'start' opcode to indicate that precise time/thread where the new activity

    started.
  syntax:
    content: public static void SetCurrentThreadActivityId(Guid activityId)
    content.vb: Public Shared Sub SetCurrentThreadActivityId(activityId As Guid)
    parameters:
    - id: activityId
      type: System.Guid
      description: >-
        A Guid that represents the new activity with which to mark

        the current thread
- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  id: SetCurrentThreadActivityId(System.Guid,System.Guid@)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: SetCurrentThreadActivityId(Guid, out Guid)
  name.vb: SetCurrentThreadActivityId(Guid, ByRef Guid)
  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, out System.Guid)
  fullName.vb: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, ByRef System.Guid)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 589
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    When a thread starts work that is on behalf of 'something else' (typically another

    thread or network request) it should mark the thread as working on that other work.

    This API marks the current thread as working on activity 'activityID'. It returns

    whatever activity the thread was previously marked with. There is a convention that

    callers can assume that callees restore this activity mark before the callee returns.

    To encourage this this API returns the old activity, so that it can be restored later.



    All events created with the EventSource on this thread are also tagged with the

    activity ID of the thread.



    It is common, and good practice after setting the thread to an activity to log an event

    with a 'start' opcode to indicate that precise time/thread where the new activity

    started.
  syntax:
    content: public static void SetCurrentThreadActivityId(Guid activityId, out Guid oldActivityThatWillContinue)
    content.vb: Public Shared Sub SetCurrentThreadActivityId(activityId As Guid, ByRef oldActivityThatWillContinue As Guid)
    parameters:
    - id: activityId
      type: System.Guid
      description: >-
        A Guid that represents the new activity with which to mark

        the current thread
    - id: oldActivityThatWillContinue
      type: System.Guid
      description: >-
        The Guid that represents the current activity

        which will continue at some point in the future, on the current thread
- uid: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  id: CurrentThreadActivityId
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: CurrentThreadActivityId
  fullName: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 610
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Retrieves the ETW activity ID associated with the current thread.
  syntax:
    content: public static Guid CurrentThreadActivityId { get; }
    content.vb: Public Shared ReadOnly Property CurrentThreadActivityId As Guid
    parameters: []
    return:
      type: System.Guid
- uid: System.Diagnostics.Tracing.EventSource.ConstructionException
  id: ConstructionException
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: ConstructionException
  fullName: System.Diagnostics.Tracing.EventSource.ConstructionException
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 672
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Because



    1) Logging is often optional and thus should not generate fatal errors (exceptions)

    2) EventSources are often initialized in class constructors (which propagate exceptions poorly)



    The event source constructor does not throw exceptions.  Instead we remember any exception that

    was generated (it is also logged to Trace.WriteLine).
  syntax:
    content: public Exception ConstructionException { get; }
    content.vb: Public ReadOnly Property ConstructionException As Exception
    parameters: []
    return:
      type: System.Exception
- uid: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  id: GetTrait(System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: GetTrait(String)
  fullName: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 682
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    EventSources can have arbitrary string key-value pairs associated with them called Traits.

    These traits are not interpreted by the EventSource but may be interpreted by EventListeners

    (e.g. like the built in ETW listener).   These traits are specififed at EventSource

    construction time and can be retrieved by using this GetTrait API.
  syntax:
    content: public string GetTrait(string key)
    content.vb: Public Function GetTrait(key As String) As String
    parameters:
    - id: key
      type: System.String
      description: The key to look up in the set of key-value pairs passed to the EventSource constructor
    return:
      type: System.String
      description: The value string associated iwth key.  Will return null if there is no such key.
- uid: System.Diagnostics.Tracing.EventSource.ToString
  id: ToString
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: ToString()
  fullName: System.Diagnostics.Tracing.EventSource.ToString()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 698
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Displays the name and GUID for the eventSource for debugging purposes.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
- uid: System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  id: EventCommandExecuted
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventCommandExecuted
  fullName: System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 703
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Fires when a Command (e.g. Enable) comes from a an EventListener.
  syntax:
    content: public event EventHandler<EventCommandEventArgs> EventCommandExecuted
    content.vb: Public Event EventCommandExecuted As EventHandler(Of EventCommandEventArgs)
- uid: System.Diagnostics.Tracing.EventSource.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource()
  fullName: System.Diagnostics.Tracing.EventSource.EventSource()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 739
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This is the constructor that most users will use to create their eventSource.   It takes

    no parameters.  The ETW provider name and GUID of the EventSource are determined by the EventSource

    custom attribute (so you can determine these things declaratively).   If the GUID for the eventSource

    is not specified in the EventSourceAttribute (recommended), it is Generated by hashing the name.

    If the ETW provider name of the EventSource is not given, the name of the EventSource class is used as

    the ETW provider name.
  syntax:
    content: protected EventSource()
    content.vb: Protected Sub New
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource(Boolean)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 755
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    By default calling the 'WriteEvent' methods do NOT throw on errors (they silently discard the event).

    This is because in most cases users assume logging is not 'precious' and do NOT wish to have logging failures

    crash the program. However for those applications where logging is 'precious' and if it fails the caller

    wishes to react, setting 'throwOnEventWriteErrors' will cause an exception to be thrown if WriteEvent

    fails. Note the fact that EventWrite succeeds does not necessarily mean that the event reached its destination

    only that operation of writing it did not fail. These EventSources will not generate self-describing ETW events.



    For compatibility only use the EventSourceSettings.ThrowOnEventWriteErrors flag instead.
  syntax:
    content: protected EventSource(bool throwOnEventWriteErrors)
    content.vb: Protected Sub New(throwOnEventWriteErrors As Boolean)
    parameters:
    - id: throwOnEventWriteErrors
      type: System.Boolean
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings)'
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource(EventSourceSettings)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 762
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Construct an EventSource with additional non-default settings (see EventSourceSettings for more)
  syntax:
    content: protected EventSource(EventSourceSettings settings)
    content.vb: Protected Sub New(settings As EventSourceSettings)
    parameters:
    - id: settings
      type: System.Diagnostics.Tracing.EventSourceSettings
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])'
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource(EventSourceSettings, String[])
  name.vb: EventSource(EventSourceSettings, String())
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String[])
  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String())
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 773
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Construct an EventSource with additional non-default settings.



    Also specify a list of key-value pairs called traits (you must pass an even number of strings).

    The first string is the key and the second is the value.   These are not interpreted by EventSource

    itself but may be interprated the listeners.  Can be fetched with GetTrait(string).
  syntax:
    content: protected EventSource(EventSourceSettings settings, params string[] traits)
    content.vb: Protected Sub New(settings As EventSourceSettings, ParamArray traits As String())
    parameters:
    - id: settings
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: See EventSourceSettings for more.
    - id: traits
      type: System.String[]
      description: A collection of key-value strings (must be an even number).
- uid: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  id: OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: OnEventCommand(EventCommandEventArgs)
  fullName: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 783
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: This method is called when the eventSource is updated by the controller.
  syntax:
    content: protected virtual void OnEventCommand(EventCommandEventArgs command)
    content.vb: Protected Overridable Sub OnEventCommand(command As EventCommandEventArgs)
    parameters:
    - id: command
      type: System.Diagnostics.Tracing.EventCommandEventArgs
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  id: WriteEvent(System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 787
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId)
    content.vb: Protected Sub WriteEvent(eventId As Integer)
    parameters:
    - id: eventId
      type: System.Int32
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 795
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, int arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int32
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 808
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, int arg1, int arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int32
    - id: arg2
      type: System.Int32
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int32, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 823
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, int arg1, int arg2, int arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer, arg3 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int32
    - id: arg2
      type: System.Int32
    - id: arg3
      type: System.Int32
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  id: WriteEvent(System.Int32,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 841
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, long arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int64
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  id: WriteEvent(System.Int32,System.Int64,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int64, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 854
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, long arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int64
    - id: arg2
      type: System.Int64
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  id: WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int64, Int64, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 869
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, long arg2, long arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long, arg3 As Long)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int64
    - id: arg2
      type: System.Int64
    - id: arg3
      type: System.Int64
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  id: WriteEvent(System.Int32,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 887
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, string arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.String
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  id: WriteEvent(System.Int32,System.String,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, String, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 904
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, string arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.String
    - id: arg2
      type: System.String
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  id: WriteEvent(System.Int32,System.String,System.String,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, String, String, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 925
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, string arg2, string arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String, arg3 As String)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.String
    - id: arg2
      type: System.String
    - id: arg3
      type: System.String
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  id: WriteEvent(System.Int32,System.String,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, String, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 951
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, int arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.String
    - id: arg2
      type: System.Int32
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, String, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 970
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, int arg2, int arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer, arg3 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.String
    - id: arg2
      type: System.Int32
    - id: arg3
      type: System.Int32
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  id: WriteEvent(System.Int32,System.String,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, String, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int64)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 992
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, long arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Long)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.String
    - id: arg2
      type: System.Int64
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  id: WriteEvent(System.Int32,System.Int64,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int64, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1012
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, string arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int64
    - id: arg2
      type: System.String
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  id: WriteEvent(System.Int32,System.Int32,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int32, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1032
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, int arg1, string arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int32
    - id: arg2
      type: System.String
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  id: WriteEvent(System.Int32,System.Byte[])
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Byte[])
  name.vb: WriteEvent(Int32, Byte())
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte[])
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1051
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, byte[] arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Byte())
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Byte[]
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  id: WriteEvent(System.Int32,System.Int64,System.Byte[])
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Int64, Byte[])
  name.vb: WriteEvent(Int32, Int64, Byte())
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte[])
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1071
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, byte[] arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Byte())
    parameters:
    - id: eventId
      type: System.Int32
    - id: arg1
      type: System.Int64
    - id: arg2
      type: System.Byte[]
- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  id: WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEventCore(Int32, Int32, EventSource.EventData*)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1160
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This routine allows you to create efficient WriteEvent helpers, however the code that you use to

    do this, while straightforward, is unsafe.
  remarks: >-
    <code>

    protected unsafe void WriteEvent(int eventId, string arg1, long arg2)

    {

    if (IsEnabled())

    {

    if (arg2 == null) arg2 = "";

    fixed (char* string2Bytes = arg2)

    {

    EventSource.EventData* descrs = stackalloc EventSource.EventData[2];

    descrs[0].DataPointer = (IntPtr)(&amp;arg1);

    descrs[0].Size = 8;

    descrs[1].DataPointer = (IntPtr)string2Bytes;

    descrs[1].Size = ((arg2.Length + 1) * 2);

    WriteEventCore(eventId, 2, descrs);

    }

    }

    }

    </code>
  syntax:
    content: protected void WriteEventCore(int eventId, int eventDataCount, EventSource.EventData*data)
    content.vb: Protected Sub WriteEventCore(eventId As Integer, eventDataCount As Integer, data As EventSource.EventData *)
    parameters:
    - id: eventId
      type: System.Int32
    - id: eventDataCount
      type: System.Int32
    - id: data
      type: System.Diagnostics.Tracing.EventSource.EventData*
- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  id: WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32, System.Guid*, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1192
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This routine allows you to create efficient WriteEventWithRelatedActivityId helpers, however the code

    that you use to do this, while straightforward, is unsafe. The only difference from

    [System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)](System.Diagnostics.Tracing.EventSource.yml) is that you pass the relatedActivityId from caller through to this API
  remarks: >-
    <code>

    protected unsafe void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, string arg1, long arg2)

    {

    if (IsEnabled())

    {

    if (arg2 == null) arg2 = "";

    fixed (char* string2Bytes = arg2)

    {

    EventSource.EventData* descrs = stackalloc EventSource.EventData[2];

    descrs[0].DataPointer = (IntPtr)(&amp;arg1);

    descrs[0].Size = 8;

    descrs[1].DataPointer = (IntPtr)string2Bytes;

    descrs[1].Size = ((arg2.Length + 1) * 2);

    WriteEventWithRelatedActivityIdCore(eventId, relatedActivityId, 2, descrs);

    }

    }

    }

    </code>
  syntax:
    content: protected void WriteEventWithRelatedActivityIdCore(int eventId, Guid*relatedActivityId, int eventDataCount, EventSource.EventData*data)
    content.vb: Protected Sub WriteEventWithRelatedActivityIdCore(eventId As Integer, relatedActivityId As Guid *, eventDataCount As Integer, data As EventSource.EventData *)
    parameters:
    - id: eventId
      type: System.Int32
    - id: relatedActivityId
      type: System.Guid*
    - id: eventDataCount
      type: System.Int32
    - id: data
      type: System.Diagnostics.Tracing.EventSource.EventData*
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  id: WriteEvent(System.Int32,System.Object[])
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEvent(Int32, Object[])
  name.vb: WriteEvent(Int32, Object())
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object[])
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1348
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This is the varargs helper for writing an event. It does create an array and box all the arguments so it is

    relatively inefficient and should only be used for relatively rare events (e.g. less than 100 / sec). If your

    rates are faster than that you should use [System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)](System.Diagnostics.Tracing.EventSource.yml) to create fast helpers for your particular

    method signature. Even if you use this for rare events, this call should be guarded by an [System.Diagnostics.Tracing.EventSource.IsEnabled](System.Diagnostics.Tracing.EventSource.yml)

    check so that the varargs call is not made when the EventSource is not active.
  syntax:
    content: protected void WriteEvent(int eventId, params object[] args)
    content.vb: Protected Sub WriteEvent(eventId As Integer, ParamArray args As Object())
    parameters:
    - id: eventId
      type: System.Int32
    - id: args
      type: System.Object[]
- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  id: WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: WriteEventWithRelatedActivityId(Int32, Guid, Object[])
  name.vb: WriteEventWithRelatedActivityId(Int32, Guid, Object())
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object[])
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1363
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This is the varargs helper for writing an event which also specifies a related activity. It is completely analogous

    to corresponding WriteEvent (they share implementation). It does create an array and box all the arguments so it is

    relatively inefficient and should only be used for relatively rare events (e.g. less than 100 / sec).  If your

    rates are faster than that you should use [System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)](System.Diagnostics.Tracing.EventSource.yml) to create fast helpers for your

    particular method signature. Even if you use this for rare events, this call should be guarded by an [System.Diagnostics.Tracing.EventSource.IsEnabled](System.Diagnostics.Tracing.EventSource.yml)

    check so that the varargs call is not made when the EventSource is not active.
  syntax:
    content: protected void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, params object[] args)
    content.vb: Protected Sub WriteEventWithRelatedActivityId(eventId As Integer, relatedActivityId As Guid, ParamArray args As Object())
    parameters:
    - id: eventId
      type: System.Int32
    - id: relatedActivityId
      type: System.Guid
    - id: args
      type: System.Object[]
- uid: System.Diagnostics.Tracing.EventSource.Dispose
  id: Dispose
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Dispose()
  fullName: System.Diagnostics.Tracing.EventSource.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1375
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Disposes of an EventSource.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Dispose(Boolean)
  fullName: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1390
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Disposes of an EventSource.
  remarks: >-
    Called from Dispose() with disposing=true, and from the finalizer (~EventSource) with disposing=false.

    Guidelines:

    1. We may be called more than once: do nothing after the first call.

    2. Avoid throwing exceptions if disposing is false, i.e. if we're being finalized.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: True if called from Dispose(), false if called from the finalizer.
- uid: System.Diagnostics.Tracing.EventSource.Finalize
  id: Finalize
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Finalize()
  fullName: System.Diagnostics.Tracing.EventSource.Finalize()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1419
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Finalizer for EventSource
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource(String)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String)
  type: Constructor
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 52
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Construct an EventSource with a given name for non-contract based events (e.g. those using the Write() API).
  syntax:
    content: public EventSource(string eventSourceName)
    content.vb: Public Sub New(eventSourceName As String)
    parameters:
    - id: eventSourceName
      type: System.String
      description: The name of the event source. Must not be null.
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)'
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource(String, EventSourceSettings)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings)
  type: Constructor
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 66
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Construct an EventSource with a given name for non-contract based events (e.g. those using the Write() API).
  syntax:
    content: public EventSource(string eventSourceName, EventSourceSettings config)
    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings)
    parameters:
    - id: eventSourceName
      type: System.String
      description: The name of the event source. Must not be null.
    - id: config
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: Configuration options for the EventSource as a whole.
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])'
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource(String, EventSourceSettings, String[])
  name.vb: EventSource(String, EventSourceSettings, String())
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String[])
  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String())
  type: Constructor
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 85
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Construct an EventSource with a given name for non-contract based events (e.g. those using the Write() API).



    Also specify a list of key-value pairs called traits (you must pass an even number of strings).

    The first string is the key and the second is the value.   These are not interpreted by EventSource

    itself but may be interprated the listeners.  Can be fetched with GetTrait(string).
  syntax:
    content: public EventSource(string eventSourceName, EventSourceSettings config, params string[] traits)
    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings, ParamArray traits As String())
    parameters:
    - id: eventSourceName
      type: System.String
      description: The name of the event source. Must not be null.
    - id: config
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: Configuration options for the EventSource as a whole.
    - id: traits
      type: System.String[]
      description: A collection of key-value strings (must be an even number).
- uid: System.Diagnostics.Tracing.EventSource.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Write(String)
  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String)
  type: Method
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 106
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Writes an event with no fields and default options.

    (Native API: EventWriteTransfer)
  syntax:
    content: public void Write(string eventName)
    content.vb: Public Sub Write(eventName As String)
    parameters:
    - id: eventName
      type: System.String
      description: The name of the event. Must not be null.
- uid: System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  id: Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Write(String, EventSourceOptions)
  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String, System.Diagnostics.Tracing.EventSourceOptions)
  type: Method
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 135
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Writes an event with no fields.

    (Native API: EventWriteTransfer)
  syntax:
    content: public void Write(string eventName, EventSourceOptions options)
    content.vb: Public Sub Write(eventName As String, options As EventSourceOptions)
    parameters:
    - id: eventName
      type: System.String
      description: The name of the event. Must not be null.
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: >-
        Options for the event, such as the level, keywords, and opcode. Unset

        options will be set to default values.
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  id: Write``1(System.String,``0)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Write<T>(String, T)
  name.vb: Write(Of T)(String, T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, T)
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, T)
  type: Method
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 173
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Writes an event.

    (Native API: EventWriteTransfer)
  syntax:
    content: public void Write<T>(string eventName, T data)
    content.vb: Public Sub Write(Of T)(eventName As String, data As T)
    parameters:
    - id: eventName
      type: System.String
      description: >-
        The name for the event. If null, the event name is automatically

        determined based on T, either from the Name property of T's EventData

        attribute or from typeof(T).Name.
    - id: data
      type: '{T}'
      description: >-
        The object containing the event payload data. The type T must be

        an anonymous type or a type with an [EventData] attribute. The

        public instance properties of data will be written recursively to

        create the fields of the event.
    typeParameters:
    - id: T
      description: >-
        The type that defines the event and its payload. This must be an

        anonymous type or a type with an [EventData] attribute.
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Write<T>(String, EventSourceOptions, T)
  name.vb: Write(Of T)(String, EventSourceOptions, T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)
  type: Method
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 210
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Writes an event.

    (Native API: EventWriteTransfer)
  syntax:
    content: public void Write<T>(string eventName, EventSourceOptions options, T data)
    content.vb: Public Sub Write(Of T)(eventName As String, options As EventSourceOptions, data As T)
    parameters:
    - id: eventName
      type: System.String
      description: >-
        The name for the event. If null, the event name is automatically

        determined based on T, either from the Name property of T's EventData

        attribute or from typeof(T).Name.
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: >-
        Options for the event, such as the level, keywords, and opcode. Unset

        options will be set to default values.
    - id: data
      type: '{T}'
      description: >-
        The object containing the event payload data. The type T must be

        an anonymous type or a type with an [EventData] attribute. The

        public instance properties of data will be written recursively to

        create the fields of the event.
    typeParameters:
    - id: T
      description: >-
        The type that defines the event and its payload. This must be an

        anonymous type or a type with an [EventData] attribute.
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Write<T>(String, ref EventSourceOptions, ref T)
  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref T)
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef T)
  type: Method
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 249
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Writes an event.

    This overload is for use with extension methods that wish to efficiently

    forward the options or data parameter without performing an extra copy.

    (Native API: EventWriteTransfer)
  syntax:
    content: public void Write<T>(string eventName, ref EventSourceOptions options, ref T data)
    content.vb: Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef data As T)
    parameters:
    - id: eventName
      type: System.String
      description: >-
        The name for the event. If null, the event name is automatically

        determined based on T, either from the Name property of T's EventData

        attribute or from typeof(T).Name.
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: >-
        Options for the event, such as the level, keywords, and opcode. Unset

        options will be set to default values.
    - id: data
      type: '{T}'
      description: >-
        The object containing the event payload data. The type T must be

        an anonymous type or a type with an [EventData] attribute. The

        public instance properties of data will be written recursively to

        create the fields of the event.
    typeParameters:
    - id: T
      description: >-
        The type that defines the event and its payload. This must be an

        anonymous type or a type with an [EventData] attribute.
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  parent: System.Diagnostics.Tracing.EventSource
  href: System.Diagnostics.Tracing.EventSource.yml
  name: Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)
  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef Guid, ByRef Guid, ByRef T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref System.Guid, ref System.Guid, ref T)
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef System.Guid, ByRef System.Guid, ByRef T)
  type: Method
  source:
    remote: *o1
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 295
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Writes an event.

    This overload is meant for clients that need to manipuate the activityId

    and related ActivityId for the event.
  syntax:
    content: public void Write<T>(string eventName, ref EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data)
    content.vb: Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef activityId As Guid, ByRef relatedActivityId As Guid, ByRef data As T)
    parameters:
    - id: eventName
      type: System.String
      description: >-
        The name for the event. If null, the event name is automatically

        determined based on T, either from the Name property of T's EventData

        attribute or from typeof(T).Name.
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: >-
        Options for the event, such as the level, keywords, and opcode. Unset

        options will be set to default values.
    - id: activityId
      type: System.Guid
      description: The GUID of the activity associated with this event.
    - id: relatedActivityId
      type: System.Guid
      description: >-
        The GUID of another activity that is related to this activity, or Guid.Empty

        if there is no related activity. Most commonly, the Start operation of a

        new activity specifies a parent activity as its related activity.
    - id: data
      type: '{T}'
      description: >-
        The object containing the event payload data. The type T must be

        an anonymous type or a type with an [EventData] attribute. The

        public instance properties of data will be written recursively to

        create the fields of the event.
    typeParameters:
    - id: T
      description: >-
        The type that defines the event and its payload. This must be an

        anonymous type or a type with an [EventData] attribute.
references:
- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
  type: Class
- uid: System.Guid
  parent: System
  isExternal: false
  href: System.Guid.yml
  name: Guid
  fullName: System.Guid
  type: Struct
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventLevel.yml
  name: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
  type: Enum
  summary: WindowsEventLevel. Custom values must be in the range from 16 through 255
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventKeywords.yml
  name: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
  type: Enum
  summary: EventOpcode
- uid: System.Diagnostics.Tracing.EventChannel
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventChannel.yml
  name: EventChannel
  fullName: System.Diagnostics.Tracing.EventChannel
  type: Enum
  summary: EventChannel. Custom values must be in the range from 16 through 255. Currently only predefined values allowed.
- uid: System.Diagnostics.Tracing.EventSourceSettings
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventSourceSettings.yml
  name: EventSourceSettings
  fullName: System.Diagnostics.Tracing.EventSourceSettings
  type: Enum
  summary: Enables specifying event source configuration options to be used in the EventSource constructor.
- uid: System.Type
  parent: System
  isExternal: false
  href: System.Type.yml
  name: Type
  fullName: System.Type
  type: Class
- uid: System.Diagnostics.Tracing.EventManifestOptions
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventManifestOptions.yml
  name: EventManifestOptions
  fullName: System.Diagnostics.Tracing.EventManifestOptions
  type: Enum
  summary: >-
    Flags that can be used with EventSource.GenerateManifest to control how the ETW manifest for the EventSource is

    generated.
- uid: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<EventSource>
  name.vb: IEnumerable(Of EventSource)
  fullName: System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Diagnostics.Tracing.EventSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - uid: System.Diagnostics.Tracing.EventSource
    name: EventSource
    fullName: System.Diagnostics.Tracing.EventSource
    href: System.Diagnostics.Tracing.EventSource.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Tracing.EventSource
    name: EventSource
    fullName: System.Diagnostics.Tracing.EventSource
    href: System.Diagnostics.Tracing.EventSource.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
  type: Class
  summary: >-
    This class is meant to be inherited by a user-defined event source in order to define a managed

    ETW provider.   Please See DESIGN NOTES above for the internal architecture.

    The minimal definition of an EventSource simply specifies a number of ETW event methods that

    call one of the EventSource.WriteEvent overloads, @'System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)',

    or @'System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)' to log them. This functionality

    is sufficient for many users.

    <para>

    To achieve more control over the ETW provider manifest exposed by the event source type, the

    [<see cref="T:System.Diagnostics.Tracing.EventAttribute" />] attributes can be specified for the ETW event methods.

    </para><para>

    For very advanced EventSources, it is possible to intercept the commands being given to the

    eventSource and change what filtering is done (see EventListener.EnableEvents and

    <see cref="M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)" />) or cause actions to be performed by the eventSource,

    e.g. dumping a data structure (see EventSource.SendCommand and

    <see cref="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" />).

    </para><para>

    The eventSources can be turned on with Windows ETW controllers (e.g. logman), immediately.

    It is also possible to control and intercept the data dispatcher programmatically.  See

    <see cref="T:System.Diagnostics.Tracing.EventListener" /> for more.

    </para>
- uid: System.Diagnostics.Tracing.EventCommand
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventCommand.yml
  name: EventCommand
  fullName: System.Diagnostics.Tracing.EventCommand
  type: Enum
  summary: Describes the pre-defined command (EventCommandEventArgs.Command property) that is passed to the OnEventCommand callback.
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: System.Collections.Generic.IDictionary`2.yml
  name: IDictionary<String, String>
  name.vb: IDictionary(Of String, String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IDictionary`2.yml
  name: IDictionary<TKey, TValue>
  name.vb: IDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Exception
  parent: System
  isExternal: false
  href: System.Exception.yml
  name: Exception
  fullName: System.Exception
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String[]
  isExternal: false
  href: System.String.yml
  name: String[]
  name.vb: String()
  fullName: System.String[]
  fullName.vb: System.String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: ()
    fullName: ()
- uid: System.Diagnostics.Tracing.EventCommandEventArgs
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventCommandEventArgs.yml
  name: EventCommandEventArgs
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs
  type: Class
  summary: Passed to the code:EventSource.OnEventCommand callback
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Int64
  parent: System
  isExternal: false
  href: System.Int64.yml
  name: Int64
  fullName: System.Int64
  type: Struct
- uid: System.Byte[]
  isExternal: false
  href: System.Byte.yml
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    href: System.Byte.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    href: System.Byte.yml
  - name: ()
    fullName: ()
- uid: System.Diagnostics.Tracing.EventSource.EventData*
  isExternal: false
  href: System.Diagnostics.Tracing.EventSource.EventData.yml
  name: EventSource.EventData*
  fullName: System.Diagnostics.Tracing.EventSource.EventData*
  spec.csharp:
  - uid: System.Diagnostics.Tracing.EventSource.EventData
    name: EventSource.EventData
    fullName: System.Diagnostics.Tracing.EventSource.EventData
    href: System.Diagnostics.Tracing.EventSource.EventData.yml
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Diagnostics.Tracing.EventSource.EventData
    name: EventSource.EventData
    fullName: System.Diagnostics.Tracing.EventSource.EventData
    href: System.Diagnostics.Tracing.EventSource.EventData.yml
  - name: '*'
    fullName: '*'
- uid: System.Guid*
  isExternal: false
  href: System.Guid.yml
  name: Guid*
  fullName: System.Guid*
  spec.csharp:
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    href: System.Guid.yml
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    href: System.Guid.yml
  - name: '*'
    fullName: '*'
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled
- uid: System.Object[]
  isExternal: false
  href: System.Object.yml
  name: Object[]
  name.vb: Object()
  fullName: System.Object[]
  fullName.vb: System.Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ()
    fullName: ()
- uid: System.Diagnostics.Tracing.EventSourceOptions
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventSourceOptions.yml
  name: EventSourceOptions
  fullName: System.Diagnostics.Tracing.EventSourceOptions
  type: Struct
  summary: >-
    Used when calling EventSource.Write.

    Optional overrides for event settings such as Level, Keywords, or Opcode.

    If overrides are not provided for a setting, default values will be used.
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
