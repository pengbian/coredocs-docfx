items:
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  id: ConcurrentDictionary`2
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary<TKey, TValue>
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 42
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Represents a thread-safe collection of keys and values.
  remarks: >-
    All public and protected members of [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml) are thread-safe and may be used

    concurrently from multiple threads.
  syntax:
    content: 'public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable'
    content.vb: Public Class ConcurrentDictionary(Of TKey, TValue) Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IDictionary, ICollection, IReadOnlyDictionary(Of TKey, TValue), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEnumerable
    typeParameters:
    - id: TKey
      description: The type of the keys in the dictionary.
    - id: TValue
      description: The type of the values in the dictionary.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 165
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    class that is empty, has the default concurrency level, has the default initial capacity, and

    uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary()
    content.vb: Public Sub New
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(Int32, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 182
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    class that is empty, has the specified concurrency level and capacity, and uses the default

    comparer for the key type.
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer)
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: >-
        The estimated number of threads that will update the

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> concurrently.
    - id: capacity
      type: System.Int32
      description: >-
        The initial number of elements that the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />

        can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is

      less than 1.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than

      0.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>>)
  name.vb: ConcurrentDictionary(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 198
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    class that contains elements copied from the specified [System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}](), has the default concurrency

    level, has the default initial capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: >-
        The <see cref="T:System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}" /> whose elements are copied to

        the new

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentException
    description: >-
      contains one or more

      duplicate keys.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 209
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    class that is empty, has the specified concurrency level and capacity, and uses the specified

    [System.Collections.Generic.IEqualityComparer{TKey}]().
  syntax:
    content: public ConcurrentDictionary(IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}" />

        implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 228
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    class that contains elements copied from the specified [System.Collections.IEnumerable](System.Collections.IEnumerable.yml), has the default concurrency level, has the default

    initial capacity, and uses the specified

    [System.Collections.Generic.IEqualityComparer{TKey}]().
  syntax:
    content: public ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)), comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: >-
        The <see cref="T:System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}" /> whose elements are copied to

        the new

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}" />

        implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic). -or-

      is a null reference (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(Int32, IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Int32, IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 257
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    class that contains elements copied from the specified [System.Collections.IEnumerable](System.Collections.IEnumerable.yml),

    has the specified concurrency level, has the specified initial capacity, and uses the specified

    [System.Collections.Generic.IEqualityComparer{TKey}]().
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)), comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: >-
        The estimated number of threads that will update the

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> concurrently.
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: >-
        The <see cref="T:System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}" /> whose elements are copied to the new

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}" /> implementation to use

        when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference (Nothing in Visual Basic).

      -or-

      is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    description: is less than 1.
  - type: System.ArgumentException
    description: contains one or more duplicate keys.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(Int32, Int32, IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Int32, Int32, IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 305
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    class that is empty, has the specified concurrency level, has the specified initial capacity, and

    uses the specified [System.Collections.Generic.IEqualityComparer{TKey}]().
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer, comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: >-
        The estimated number of threads that will update the

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> concurrently.
    - id: capacity
      type: System.Int32
      description: >-
        The initial number of elements that the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />

        can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}" />

        implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than 1. -or-

      is less than 0.
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  id: TryAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 358
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to add the specified key and value to the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml).
  syntax:
    content: public bool TryAdd(TKey key, TValue value)
    content.vb: Public Function TryAdd(key As TKey, value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: >-
        The value of the element to add. The value can be a null reference (Nothing

        in Visual Basic) for reference types.
    return:
      type: System.Boolean
      description: >-
        true if the key/value pair was added to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />

        successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is null reference

      (Nothing in Visual Basic).
  - type: System.OverflowException
    description: >-
      The

      contains too many elements.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ContainsKey(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ContainsKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 375
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Determines whether the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml) contains the specified

    key.
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
    return:
      type: System.Boolean
      description: >-
        true if the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> contains an element with

        the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  id: TryRemove(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryRemove(TKey, out TValue)
  name.vb: TryRemove(TKey, ByRef TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryRemove(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 395
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Attempts to remove and return the the value with the specified key from the

    [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml).
  syntax:
    content: public bool TryRemove(TKey key, out TValue value)
    content.vb: Public Function TryRemove(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove and return.
    - id: value
      type: '{TValue}'
      description: >-
        When this method returns, <paramref name="value" /> contains the object removed from the

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> or the default value of <typeparamref name="TValue" />

        if the operation failed.
    return:
      type: System.Boolean
      description: true if an object was removed successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryGetValue(TKey, out TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 485
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to get the value associated with the specified key from the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml).
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: value
      type: '{TValue}'
      description: >-
        When this method returns, <paramref name="value" /> contains the object from

        the

        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> with the specified key or the default value of

        <typeparamref name="TValue" />, if the operation failed.
    return:
      type: System.Boolean
      description: >-
        true if the key was found in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />;

        otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  id: TryUpdate(`0,`1,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryUpdate(TKey, TValue, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryUpdate(TKey, TValue, TValue)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 530
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Compares the existing value for the specified key with a specified value, and if they're equal,

    updates the key with a third value.
  syntax:
    content: public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue)
    content.vb: Public Function TryUpdate(key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: >-
        The key whose value is compared with <paramref name="comparisonValue" /> and

        possibly replaced.
    - id: newValue
      type: '{TValue}'
      description: The value that replaces the value of the element with <paramref name="key" /> if the comparison results in equality.
    - id: comparisonValue
      type: '{TValue}'
      description: >-
        The value that is compared to the value of the element with

        <paramref name="key" />.
    return:
      type: System.Boolean
      description: >-
        true if the value with <paramref name="key" /> was equal to <paramref name="comparisonValue" /> and replaced with <paramref name="newValue" />; otherwise,

        false.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null

      reference.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  id: Clear
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Clear()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Clear()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 603
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Removes all keys and values from the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml).
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 641
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Copies the elements of the [System.Collections.Generic.ICollection]() to an array of

    type [System.Collections.Generic.KeyValuePair{TKey,TValue}](), starting at the

    specified array index.
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(array As KeyValuePair(Of TKey, TValue)(), index As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: >-
        The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />

        that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" /> elements copied from the <see cref="T:System.Collections.ICollection" />. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: >-
        The zero-based index in <paramref name="array" /> at which copying

        begins.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than

      0.
  - type: System.ArgumentException
    description: >-
      is equal to or greater than

      the length of the . -or- The number of elements in the source

      is greater than the available space from  to the end of the destination

      .
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ToArray()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ToArray()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 678
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Copies the key and value pairs stored in the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml) to a

    new array.
  syntax:
    content: public KeyValuePair<TKey, TValue>[] ToArray()
    content.vb: Public Function ToArray As KeyValuePair(Of TKey, TValue)()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: A new array containing a snapshot of key and value pairs copied from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 768
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml).
  remarks: >-
    The enumerator returned from the dictionary is safe to use concurrently with

    reads and writes to the dictionary, however it does not represent a moment-in-time snapshot

    of the dictionary.  The contents exposed through the enumerator may contain modifications

    made to the dictionary after [System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator](System.Collections.Concurrent.ConcurrentDictionary`2.yml) was called.
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Item[TKey]
  name.vb: Item(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Item[TKey]
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Item(TKey)
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 951
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get or set.
    return:
      type: '{TValue}'
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.Collections.Generic.KeyNotFoundException
    description: >-
      The property is retrieved and



      does not exist in the collection.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Count
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Count
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 981
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets the number of key/value pairs contained in the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml).
  remarks: >-
    Count has snapshot semantics and represents the number of items in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />

    at the moment when Count was accessed.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.OverflowException
    description: >-
      The dictionary contains too many

      elements.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  id: GetOrAdd(`0,System.Func{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: GetOrAdd(TKey, Func<TKey, TValue>)
  name.vb: GetOrAdd(TKey, Func(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, System.Func<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, System.Func(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1026
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Adds a key/value pair to the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    if the key does not already exist.
  syntax:
    content: public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)
    content.vb: Public Function GetOrAdd(key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for the key
    return:
      type: '{TValue}'
      description: >-
        The value for the key.  This will be either the existing value for the key if the

        key is already in the dictionary, or the new value for the key as returned by valueFactory

        if the key was not in the dictionary.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.OverflowException
    description: >-
      The dictionary contains too many

      elements.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  id: GetOrAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: GetOrAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1052
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Adds a key/value pair to the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml)

    if the key does not already exist.
  syntax:
    content: public TValue GetOrAdd(TKey key, TValue value)
    content.vb: Public Function GetOrAdd(key As TKey, value As TValue) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: the value to be added, if the key does not already exist
    return:
      type: '{TValue}'
      description: >-
        The value for the key.  This will be either the existing value for the key if the

        key is already in the dictionary, or the new value if the key was not in the dictionary.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.OverflowException
    description: >-
      The dictionary contains too many

      elements.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  name.vb: AddOrUpdate(TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1080
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key does not already

    exist, or updates a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key

    already exists.
  syntax:
    content: public TValue AddOrUpdate(TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: >-
        The function used to generate a new value for an existing key

        based on the key's existing value
    return:
      type: '{TValue}'
      description: >-
        The new value for the key.  This will be either be the result of addValueFactory (if the key was

        absent) or the result of updateValueFactory (if the key was present).
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.OverflowException
    description: >-
      The dictionary contains too many

      elements.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>)
  name.vb: AddOrUpdate(TKey, TValue, Func(Of TKey, TValue, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, TValue, System.Func(Of TKey, TValue, TValue))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1127
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key does not already

    exist, or updates a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key

    already exists.
  syntax:
    content: public TValue AddOrUpdate(TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValue
      type: '{TValue}'
      description: The value to be added for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: >-
        The function used to generate a new value for an existing key based on

        the key's existing value
    return:
      type: '{TValue}'
      description: >-
        The new value for the key.  This will be either be the result of addValueFactory (if the key was

        absent) or the result of updateValueFactory (if the key was present).
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.OverflowException
    description: >-
      The dictionary contains too many

      elements.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.IsEmpty
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1161
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value that indicates whether the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml) is empty.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary<TKey, TValue>.Add(TKey, TValue)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1205
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Adds the specified key and value to the [System.Collections.Generic.IDictionary{TKey,TValue}]().
  syntax:
    content: void IDictionary<TKey, TValue>.Add(TKey key, TValue value)
    content.vb: Sub System.Collections.Generic.IDictionary<TKey,TValue>.Add(key As TKey, value As TValue) Implements IDictionary(Of TKey, TValue).Add
    parameters:
    - id: key
      type: '{TKey}'
      description: The object to use as the key of the element to add.
    - id: value
      type: '{TValue}'
      description: The object to use as the value of the element to add.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.OverflowException
    description: >-
      The dictionary contains too many

      elements.
  - type: System.ArgumentException
    description: An element with the same key already exists in the .
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary<TKey, TValue>.Remove(TKey)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1225
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Removes the element with the specified key from the [System.Collections.Generic.IDictionary{TKey,TValue}]().
  syntax:
    content: bool IDictionary<TKey, TValue>.Remove(TKey key)
    content.vb: Function System.Collections.Generic.IDictionary<TKey,TValue>.Remove(key As TKey) As Boolean Implements IDictionary(Of TKey, TValue).Remove
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: >-
        true if the element is successfully remove; otherwise false. This method also returns

        false if

        <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  id: Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Keys
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1237
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a collection containing the keys in the [System.Collections.Generic.Dictionary{TKey,TValue}]().
  syntax:
    content: public ICollection<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IReadOnlyDictionary<TKey, TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1248
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Gets an [System.Collections.Generic.IEnumerable{TKey}]() containing the keys of

    the [System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}]().
  syntax:
    content: IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys As IEnumerable(Of TKey) Implements IReadOnlyDictionary(Of TKey, TValue).Keys
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TKey}}
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  id: Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Values
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1260
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a collection containing the values in the [System.Collections.Generic.Dictionary{TKey,TValue}]().
  syntax:
    content: public ICollection<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IReadOnlyDictionary<TKey, TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1271
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Gets an [System.Collections.Generic.IEnumerable{TValue}]() containing the values

    in the [System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}]().
  syntax:
    content: IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values As IEnumerable(Of TValue) Implements IReadOnlyDictionary(Of TKey, TValue).Values
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1293
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Adds the specified value to the [System.Collections.Generic.ICollection{TValue}]()

    with the specified key.
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(keyValuePair As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: >-
        The [System.Collections.Generic.KeyValuePair{TKey,TValue}]()

        structure representing the key and value to add to the [System.Collections.Generic.Dictionary{TKey,TValue}]().
  exceptions:
  - type: System.ArgumentNullException
    description: The  of  is null.
  - type: System.OverflowException
    description: >-
      The

      contains too many elements.
  - type: System.ArgumentException
    description: An element with the same key already exists in the
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1307
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Determines whether the [System.Collections.Generic.ICollection{TKey,TValue}]()

    contains a specific key and value.
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: >-
        The [System.Collections.Generic.KeyValuePair{TKey,TValue}]()

        structure to locate in the [System.Collections.Generic.ICollection{TValue}]().
    return:
      type: System.Boolean
      description: true if the <paramref name="keyValuePair" /> is found in the <see cref="T:System.Collections.Generic.ICollection{TKey,TValue}" />; otherwise, false.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1324
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether the dictionary is read-only.
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1340
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Removes a key and value from the dictionary.
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: >-
        The [System.Collections.Generic.KeyValuePair{TKey,TValue}]()

        structure representing the key and value to remove from the [System.Collections.Generic.Dictionary{TKey,TValue}]().
    return:
      type: System.Boolean
      description: >-
        true if the key and value represented by <paramref name="keyValuePair" /> is successfully

        found and removed; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: The Key property of  is a null reference (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1361
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentDictionary`2](System.Collections.Concurrent.ConcurrentDictionary`2.yml).
  remarks: >-
    The enumerator returned from the dictionary is safe to use concurrently with

    reads and writes to the dictionary, however it does not represent a moment-in-time snapshot

    of the dictionary.  The contents exposed through the enumerator may contain modifications

    made to the dictionary after [System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator](System.Collections.Concurrent.ConcurrentDictionary`2.yml) was called.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Add(Object, Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1387
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Adds the specified key and value to the dictionary.
  syntax:
    content: void IDictionary.Add(object key, object value)
    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add
    parameters:
    - id: key
      type: System.Object
      description: The object to use as the key.
    - id: value
      type: System.Object
      description: The object to use as the value.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.OverflowException
    description: >-
      The dictionary contains too many

      elements.
  - type: System.ArgumentException
    description: >-
      is of a type that is not assignable to the key type  of the . -or-

      is of a type that is not assignable to ,

      the type of values in the .

      -or- A value with the same key already exists in the .
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Contains(Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1415
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Gets whether the [System.Collections.Generic.IDictionary{TKey,TValue}]() contains an

    element with the specified key.
  syntax:
    content: bool IDictionary.Contains(object key)
    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains
    parameters:
    - id: key
      type: System.Object
      description: The key to locate in the <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}" />.
    return:
      type: System.Boolean
      description: >-
        true if the <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}" /> contains

        an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  id: System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1426
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Provides an [System.Collections.Generics.IDictionaryEnumerator]() for the

    [System.Collections.Generic.IDictionary{TKey,TValue}]().
  syntax:
    content: IDictionaryEnumerator IDictionary.GetEnumerator()
    content.vb: Function System.Collections.IDictionary.GetEnumerator As IDictionaryEnumerator Implements IDictionary.GetEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: An <see cref="T:System.Collections.Generics.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}" />.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1439
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether the [System.Collections.Generic.IDictionary{TKey,TValue}]() has a fixed size.
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1452
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether the [System.Collections.Generic.IDictionary{TKey,TValue}]() is read-only.
  syntax:
    content: bool IDictionary.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1463
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets an [System.Collections.ICollection](System.Collections.ICollection.yml) containing the keys of the [System.Collections.Generic.IDictionary{TKey,TValue}]().
  syntax:
    content: ICollection IDictionary.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys
    parameters: []
    return:
      type: System.Collections.ICollection
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Remove(Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1475
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Removes the element with the specified key from the [System.Collections.IDictionary](System.Collections.IDictionary.yml).
  syntax:
    content: void IDictionary.Remove(object key)
    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to remove.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1492
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets an [System.Collections.ICollection](System.Collections.ICollection.yml) containing the values in the [System.Collections.IDictionary](System.Collections.IDictionary.yml).
  syntax:
    content: ICollection IDictionary.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values
    parameters: []
    return:
      type: System.Collections.ICollection
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Item[Object]
  name.vb: System.Collections.IDictionary.Item(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object]
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Item(System.Object)
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1515
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: object IDictionary.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this
    parameters:
    - id: key
      type: System.Object
      description: The key of the value to get or set.
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentException
    description: >-
      A value is being assigned, and  is of a type that is not assignable to the

      key type  of the . -or- A value is being

      assigned, and  is of a type that is not assignable to the value type

      of the
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1562
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Copies the elements of the [System.Collections.ICollection](System.Collections.ICollection.yml) to an array, starting

    at the specified array index.
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: >-
        The one-dimensional array that is the destination of the elements copied from

        the <see cref="T:System.Collections.ICollection" />. The array must have zero-based

        indexing.
    - id: index
      type: System.Int32
      description: >-
        The zero-based index in <paramref name="array" /> at which copying

        begins.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      is a null reference

      (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than

      0.
  - type: System.ArgumentException
    description: >-
      is equal to or greater than

      the length of the . -or- The number of elements in the source

      is greater than the available space from  to the end of the destination

      .
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1629
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: >-
    Gets a value indicating whether access to the [System.Collections.ICollection](System.Collections.ICollection.yml) is

    synchronized with the SyncRoot.
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1639
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection](System.Collections.ICollection.yml). This property is not supported.
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    description: The SyncRoot property is not supported.
references:
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary<TKey, TValue>
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  type: Class
  summary: Represents a thread-safe collection of keys and values.
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
- uid: System.ArgumentException
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  type: Class
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.Collections.Generic.IEqualityComparer{TKey}
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: System.Collections.Generic.IEqualityComparer`1.yml
  name: IEqualityComparer<TKey>
  name.vb: IEqualityComparer(Of TKey)
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    href: System.Collections.Generic.IEqualityComparer`1.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    href: System.Collections.Generic.IEqualityComparer`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEqualityComparer`1.yml
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    href: System.Collections.Generic.IEqualityComparer`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    href: System.Collections.Generic.IEqualityComparer`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  href: System.Collections.IEnumerable.yml
  name: IEnumerable
  fullName: System.Collections.IEnumerable
  type: Interface
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
  type: Namespace
- uid: System.OverflowException
  isExternal: false
  href: System.OverflowException.yml
  name: OverflowException
  fullName: System.OverflowException
  type: Class
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.Collections.Generic.ICollection
- uid: System.Collections.Generic.KeyValuePair{TKey,TValue}
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: false
  href: System.Collections.Generic.KeyValuePair`2.yml
  name: KeyValuePair<TKey, TValue>[]
  name.vb: KeyValuePair(Of TKey, TValue)()
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: System.Collections.Generic.IEnumerator`1.yml
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerator`1.yml
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  href: System.Collections.Generic.KeyNotFoundException.yml
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
  type: Class
- uid: System.Func{{TKey},{TValue}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<TKey, TValue>
  name.vb: Func(Of TKey, TValue)
  fullName: System.Func<TKey, TValue>
  fullName.vb: System.Func(Of TKey, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  href: System.Func`2.yml
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},{TValue},{TValue}}
  parent: System
  definition: System.Func`3
  href: System.Func`3.yml
  name: Func<TKey, TValue, TValue>
  name.vb: Func(Of TKey, TValue, TValue)
  fullName: System.Func<TKey, TValue, TValue>
  fullName.vb: System.Func(Of TKey, TValue, TValue)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  href: System.Func`3.yml
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{TKey,TValue}
- uid: System.Collections.Generic.Dictionary{TKey,TValue}
- uid: System.Collections.Generic.ICollection{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: System.Collections.Generic.ICollection`1.yml
  name: ICollection<TKey>
  name.vb: ICollection(Of TKey)
  fullName: System.Collections.Generic.ICollection<TKey>
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.ICollection`1.yml
  name: ICollection<T>
  name.vb: ICollection(Of T)
  fullName: System.Collections.Generic.ICollection<T>
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TKey}
- uid: System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<TKey>
  name.vb: IEnumerable(Of TKey)
  fullName: System.Collections.Generic.IEnumerable<TKey>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: System.Collections.Generic.ICollection`1.yml
  name: ICollection<TValue>
  name.vb: ICollection(Of TValue)
  fullName: System.Collections.Generic.ICollection<TValue>
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TValue}
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<TValue>
  name.vb: IEnumerable(Of TValue)
  fullName: System.Collections.Generic.IEnumerable<TValue>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{TValue}
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  href: System.Collections.Generic.KeyValuePair`2.yml
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.KeyValuePair`2.yml
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  type: Struct
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{TKey,TValue}
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  href: System.Collections.IEnumerator.yml
  name: IEnumerator
  fullName: System.Collections.IEnumerator
  type: Interface
- uid: System.Collections.Generics.IDictionaryEnumerator
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  href: System.Collections.IDictionaryEnumerator.yml
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
  type: Interface
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  href: System.Collections.ICollection.yml
  name: ICollection
  fullName: System.Collections.ICollection
  type: Interface
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  href: System.Collections.IDictionary.yml
  name: IDictionary
  fullName: System.Collections.IDictionary
  type: Interface
- uid: System.Array
  parent: System
  isExternal: false
  href: System.Array.yml
  name: Array
  fullName: System.Array
  type: Class
- uid: System.NotSupportedException
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  type: Class
