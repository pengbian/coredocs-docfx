items:
- uid: System.Threading.Tasks.TaskFactory`1
  id: TaskFactory`1
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskFactory`1.#ctor
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CancellationToken
  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.CreationOptions
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.Scheduler
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory<TResult>
  name.vb: TaskFactory(Of TResult)
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult)
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 39
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Provides support for creating and scheduling

    [System.Threading.Tasks.Task{TResult}]() objects.
  remarks: >-
    <para>

    There are many common patterns for which tasks are relevant. The <see cref="T:System.Threading.Tasks.TaskFactory`1" />

    class encodes some of these patterns into methods that pick up default settings, which are

    configurable through its constructors.

    </para>

    <para>

    A default instance of <see cref="T:System.Threading.Tasks.TaskFactory`1" /> is available through the

    <see cref="P:System.Threading.Tasks.Task`1.Factory">Task{TResult}.Factory</see> property.

    </para>
  syntax:
    content: public class TaskFactory<TResult>
    content.vb: Public Class TaskFactory(Of TResult)
    typeParameters:
    - id: TResult
      description: >-
        The type of the results that are available though

        the <see cref="T:System.Threading.Tasks.Task{TResult}">Task{TResult}</see> objects that are associated with

        the methods in this class.
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory()
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 87
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a [System.Threading.Tasks.TaskFactory`1](System.Threading.Tasks.TaskFactory`1.yml) instance with the default configuration.
  remarks: >-
    This constructor creates a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with a default configuration. The

    <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> property is initialized to

    <see cref="F:System.Threading.Tasks.TaskCreationOptions.None">TaskCreationOptions.None</see>, the

    <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskContinuationOptions.None">TaskContinuationOptions.None</see>,

    and the <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> property is

    initialized to the current scheduler (see <see cref="P:System.Threading.Tasks.TaskScheduler.Current">TaskScheduler.Current</see>).
  syntax:
    content: public TaskFactory()
    content.vb: Public Sub New
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 108
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a [System.Threading.Tasks.TaskFactory`1](System.Threading.Tasks.TaskFactory`1.yml) instance with the default configuration.
  remarks: >-
    This constructor creates a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with a default configuration. The

    <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> property is initialized to

    <see cref="F:System.Threading.Tasks.TaskCreationOptions.None">TaskCreationOptions.None</see>, the

    <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskContinuationOptions.None">TaskContinuationOptions.None</see>,

    and the <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> property is

    initialized to the current scheduler (see <see cref="P:System.Threading.Tasks.TaskScheduler.Current">TaskScheduler.Current</see>).
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken)
    content.vb: Public Sub New(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The default [System.Threading.Tasks.TaskFactory`1.CancellationToken](System.Threading.Tasks.TaskFactory`1.yml) that will be assigned

        to tasks created by this [System.Threading.Tasks.TaskFactory](System.Threading.Tasks.TaskFactory.yml) unless another CancellationToken is explicitly specified

        while calling the factory methods.
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 132
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a [System.Threading.Tasks.TaskFactory`1](System.Threading.Tasks.TaskFactory`1.yml) instance with the specified configuration.
  remarks: >-
    With this constructor, the

    [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) property is initialized to

    [System.Threading.Tasks.TaskCreationOptions.None](System.Threading.Tasks.TaskCreationOptions.yml), the

    [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml) property is initialized to [System.Threading.Tasks.TaskContinuationOptions.None](System.Threading.Tasks.TaskContinuationOptions.yml),

    and the [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) property is

    initialized to <paramref name="scheduler" />, unless it's null, in which case the property is

    initialized to the current scheduler (see [System.Threading.Tasks.TaskScheduler.Current](System.Threading.Tasks.TaskScheduler.yml)).
  syntax:
    content: public TaskFactory(TaskScheduler scheduler)
    content.vb: Public Sub New(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskScheduler">

        TaskScheduler</see> to use to schedule any tasks created with this TaskFactory{TResult}. A null value

        indicates that the current TaskScheduler should be used.
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 163
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a [System.Threading.Tasks.TaskFactory`1](System.Threading.Tasks.TaskFactory`1.yml) instance with the specified configuration.
  remarks: >-
    With this constructor, the

    [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) property is initialized to <paramref name="creationOptions" />,

    the

    [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml) property is initialized to <paramref name="continuationOptions" />, and the [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) property is initialized to the

    current scheduler (see [System.Threading.Tasks.TaskScheduler.Current](System.Threading.Tasks.TaskScheduler.yml)).
  syntax:
    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The default <see cref="T:System.Threading.Tasks.TaskCreationOptions">

        TaskCreationOptions</see> to use when creating tasks with this TaskFactory{TResult}.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> to use when creating continuation tasks with this TaskFactory{TResult}.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument or the

      argument specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 203
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a [System.Threading.Tasks.TaskFactory`1](System.Threading.Tasks.TaskFactory`1.yml) instance with the specified configuration.
  remarks: >-
    With this constructor, the

    [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) property is initialized to <paramref name="creationOptions" />,

    the

    [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml) property is initialized to <paramref name="continuationOptions" />, and the [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) property is initialized to

    <paramref name="scheduler" />, unless it's null, in which case the property is initialized to the

    current scheduler (see [System.Threading.Tasks.TaskScheduler.Current](System.Threading.Tasks.TaskScheduler.yml)).
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The default [System.Threading.Tasks.TaskFactory`1.CancellationToken](System.Threading.Tasks.TaskFactory`1.yml) that will be assigned

        to tasks created by this [System.Threading.Tasks.TaskFactory](System.Threading.Tasks.TaskFactory.yml) unless another CancellationToken is explicitly specified

        while calling the factory methods.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The default <see cref="T:System.Threading.Tasks.TaskCreationOptions">

        TaskCreationOptions</see> to use when creating tasks with this TaskFactory{TResult}.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> to use when creating continuation tasks with this TaskFactory{TResult}.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The default <see cref="T:System.Threading.Tasks.TaskScheduler">

        TaskScheduler</see> to use to schedule any Tasks created with this TaskFactory{TResult}. A null value

        indicates that TaskScheduler.Current should be used.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument or the

      argumentspecifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: CancellationToken
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CancellationToken
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 225
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets the default [System.Threading.CancellationToken](System.Threading.CancellationToken.yml) of this

    TaskFactory.
  remarks: >-
    This property returns the default [System.Threading.Tasks.TaskFactory`1.CancellationToken](System.Threading.Tasks.TaskFactory`1.yml) that will be assigned to all

    tasks created by this factory unless another CancellationToken value is explicitly specified

    during the call to the factory methods.
  syntax:
    content: public CancellationToken CancellationToken { get; }
    content.vb: Public ReadOnly Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: Scheduler
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).Scheduler
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 237
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets the [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) of this

    TaskFactory{TResult}.
  remarks: >-
    This property returns the default scheduler for this factory.  It will be used to schedule all

    tasks unless another scheduler is explicitly specified during calls to this factory's methods.

    If null, [System.Threading.Tasks.TaskScheduler.Current](System.Threading.Tasks.TaskScheduler.yml)

    will be used.
  syntax:
    content: public TaskScheduler Scheduler { get; }
    content.vb: Public ReadOnly Property Scheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: CreationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CreationOptions
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 247
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) value of this TaskFactory{TResult}.
  remarks: >-
    This property returns the default creation options for this factory.  They will be used to create all

    tasks unless other options are explicitly specified during calls to this factory's methods.
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinuationOptions
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 257
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) value of this TaskFactory{TResult}.
  remarks: >-
    This property returns the default continuation options for this factory.  They will be used to create

    all continuation tasks unless other options are explicitly specified during calls to this factory's methods.
  syntax:
    content: public TaskContinuationOptions ContinuationOptions { get; }
    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  id: StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>)
  name.vb: StartNew(Func(Of TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 278
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function)
    content.vb: Public Function StartNew(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>, CancellationToken)
  name.vb: StartNew(Func(Of TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 307
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.TaskFactory`1.CancellationToken](System.Threading.Tasks.TaskFactory`1.yml) that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>, TaskCreationOptions)
  name.vb: StartNew(Func(Of TResult), TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 338
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        A TaskCreationOptions value that controls the behavior of the

        created

        <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  name.vb: StartNew(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 380
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.TaskFactory`1.CancellationToken](System.Threading.Tasks.TaskFactory`1.yml) that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        A TaskCreationOptions value that controls the behavior of the

        created

        <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>

        that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}">

        Task{TResult}</see>.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  id: StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object)
  name.vb: StartNew(Func(Of Object, TResult), Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 407
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="function" />

        delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object, CancellationToken)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 438
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="function" />

        delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.TaskFactory`1.CancellationToken](System.Threading.Tasks.TaskFactory`1.yml) that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object, TaskCreationOptions)
  name.vb: StartNew(Func(Of Object, TResult), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 471
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="function" />

        delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        A TaskCreationOptions value that controls the behavior of the

        created

        <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 515
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates and starts a [System.Threading.Tasks.Task{TResult}]().
  remarks: >-
    Calling StartNew is functionally equivalent to creating a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) using one

    of its constructors and then calling

    [System.Threading.Tasks.Task.Start](System.Threading.Tasks.Task.yml) to schedule it for execution.

    However, unless creation and scheduling must be separated, StartNew is the recommended approach

    for both simplicity and performance.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: >-
        A function delegate that returns the future result to be available through

        the <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="function" />

        delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.TaskFactory`1.CancellationToken](System.Threading.Tasks.TaskFactory`1.yml) that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        A TaskCreationOptions value that controls the behavior of the

        created

        <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>

        that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}">

        Task{TResult}</see>.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 605
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that executes an end

    method function when a specified [System.IAsyncResult](System.IAsyncResult.yml) completes.
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The IAsyncResult whose completion should trigger the processing of the

        <paramref name="endMethod" />.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed <paramref name="asyncResult" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        A <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that represents the

        asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 631
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that executes an end

    method function when a specified [System.IAsyncResult](System.IAsyncResult.yml) completes.
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The IAsyncResult whose completion should trigger the processing of the

        <paramref name="endMethod" />.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed <paramref name="asyncResult" />.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The TaskCreationOptions value that controls the behavior of the

        created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        A <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that represents the

        asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 666
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that executes an end

    method function when a specified [System.IAsyncResult](System.IAsyncResult.yml) completes.
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The IAsyncResult whose completion should trigger the processing of the

        <paramref name="endMethod" />.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed <paramref name="asyncResult" />.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The TaskCreationOptions value that controls the behavior of the

        created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml)

        that is used to schedule the task that executes the end method.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        A <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that represents the

        asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 769
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 798
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The TaskCreationOptions value that controls the behavior of the

        created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 900
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: >-
        The first argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <paramref name="beginMethod" /> delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 934
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: >-
        The first argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The TaskCreationOptions value that controls the behavior of the

        created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <paramref name="beginMethod" /> delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1041
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: >-
        The first argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: arg2
      type: '{TArg2}'
      description: >-
        The second argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <paramref name="beginMethod" /> delegate.
    - id: TArg2
      description: >-
        The type of the second argument passed to <paramref name="beginMethod" />

        delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1079
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: >-
        The first argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: arg2
      type: '{TArg2}'
      description: >-
        The second argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The TaskCreationOptions value that controls the behavior of the

        created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <paramref name="beginMethod" /> delegate.
    - id: TArg2
      description: >-
        The type of the second argument passed to <paramref name="beginMethod" />

        delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1189
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: >-
        The first argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: arg2
      type: '{TArg2}'
      description: >-
        The second argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: arg3
      type: '{TArg3}'
      description: >-
        The third argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <paramref name="beginMethod" /> delegate.
    - id: TArg2
      description: >-
        The type of the second argument passed to <paramref name="beginMethod" />

        delegate.
    - id: TArg3
      description: >-
        The type of the third argument passed to <paramref name="beginMethod" />

        delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1231
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.Task{TResult}]() that represents a pair of

    begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the <paramref name="beginMethod" />.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: >-
        The first argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: arg2
      type: '{TArg2}'
      description: >-
        The second argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: arg3
      type: '{TArg3}'
      description: >-
        The third argument passed to the <paramref name="beginMethod" />

        delegate.
    - id: state
      type: System.Object
      description: >-
        An object containing data to be used by the <paramref name="beginMethod" />

        delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The TaskCreationOptions value that controls the behavior of the

        created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <paramref name="beginMethod" /> delegate.
    - id: TArg2
      description: >-
        The type of the second argument passed to <paramref name="beginMethod" />

        delegate.
    - id: TArg3
      description: >-
        The type of the third argument passed to <paramref name="beginMethod" />

        delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        The created <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see> that

        represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskCreationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1489
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: >-
        The function delegate to execute when all tasks in

        the <paramref name="tasks" /> array have completed.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1520
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: >-
        The function delegate to execute when all tasks in

        the <paramref name="tasks" /> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1557
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAll.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1604
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAll.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml)

        that is used to schedule the created continuation [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml).
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1632
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: >-
        The function delegate to execute when all tasks in the

        <paramref name="tasks" /> array have completed.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1664
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: >-
        The function delegate to execute when all tasks in the

        <paramref name="tasks" /> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1703
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAll.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: >-
        The function delegate to execute when all tasks in the

        <paramref name="tasks" /> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1752
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of a set of provided Tasks.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAll.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: >-
        The function delegate to execute when all tasks in the

        <paramref name="tasks" /> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>

        that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1889
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute when one task in the <paramref name="tasks" /> array completes.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1920
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute when one task in the <paramref name="tasks" /> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1957
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute when one task in the <paramref name="tasks" /> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2004
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute when one task in the <paramref name="tasks" /> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml)

        that is used to schedule the created continuation [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml).
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2032
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: >-
        The function delegate to execute when one task in the

        <paramref name="tasks" /> array completes.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2064
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: >-
        The function delegate to execute when one task in the

        <paramref name="tasks" /> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2103
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: >-
        The function delegate to execute when one task in the

        <paramref name="tasks" /> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2152
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a continuation [System.Threading.Tasks.Task{TResult}]()

    that will be started upon the completion of any Task in the provided set.
  remarks: >-
    The NotOn* and OnlyOn* [System.Threading.Tasks.TaskContinuationOptions](System.Threading.Tasks.TaskContinuationOptions.yml),

    which constrain for which [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) states a continuation

    will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: >-
        The function delegate to execute when one task in the

        <paramref name="tasks" /> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

        that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskContinuationOptions">

        TaskContinuationOptions</see> value that controls the behavior of

        the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>

        that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <paramref name="tasks" />.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      array is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null value.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array is empty.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception that is thrown when the

      argument specifies an invalid TaskContinuationOptions

      value.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
references:
- uid: System.Threading.Tasks.Task{TResult}
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Threading.Tasks.TaskFactory`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory<TResult>
  name.vb: TaskFactory(Of TResult)
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult)
  type: Class
  summary: >-
    Provides support for creating and scheduling

    @'System.Threading.Tasks.Task{TResult}' objects.
  spec.csharp:
  - uid: System.Threading.Tasks.TaskFactory`1
    name: TaskFactory
    fullName: System.Threading.Tasks.TaskFactory
    href: System.Threading.Tasks.TaskFactory`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.TaskFactory`1
    name: TaskFactory
    fullName: System.Threading.Tasks.TaskFactory
    href: System.Threading.Tasks.TaskFactory`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
- uid: System.Threading.Tasks.TaskFactory
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskFactory.yml
  name: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
  type: Class
  summary: >-
    Provides support for creating and scheduling

    @'System.Threading.Tasks.Task'.
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
  summary: Propagates notification that operations should be canceled.
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskCreationOptions.yml
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
  type: Enum
  summary: Specifies flags that control optional behavior for the creation and execution of tasks.
- uid: System.Threading.Tasks.TaskCreationOptions.None
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskContinuationOptions.yml
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
  type: Enum
  summary: Specifies flags that control optional behavior for the creation and execution of continuation tasks.
- uid: System.Threading.Tasks.TaskContinuationOptions.None
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
  type: Class
  summary: Represents an abstract scheduler for tasks.
- uid: System.Threading.Tasks.TaskScheduler.Current
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  type: Class
  summary: Represents an asynchronous operation that produces a result at some time in the future.
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task.Start
  parent: System.Threading.Tasks.Task
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Start()
  fullName: System.Threading.Tasks.Task.Start()
  spec.csharp:
  - uid: System.Threading.Tasks.Task.Start
    name: Start
    fullName: System.Threading.Tasks.Task.Start
    href: System.Threading.Tasks.Task.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Threading.Tasks.Task.Start
    name: Start
    fullName: System.Threading.Tasks.Task.Start
    href: System.Threading.Tasks.Task.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
- uid: System.Func{{TResult}}
  parent: System
  definition: System.Func`1
  href: System.Func`1.yml
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  summary: Represents an asynchronous operation.
- uid: System.Func`1
  isExternal: false
  href: System.Func`1.yml
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
- uid: System.Func{System.Object,{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<Object, TResult>
  name.vb: Func(Of Object, TResult)
  fullName: System.Func<System.Object, TResult>
  fullName.vb: System.Func(Of System.Object, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  href: System.Func`2.yml
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  href: System.IAsyncResult.yml
  name: IAsyncResult
  fullName: System.IAsyncResult
  type: Interface
- uid: System.Func{System.IAsyncResult,{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<IAsyncResult, TResult>
  name.vb: Func(Of IAsyncResult, TResult)
  fullName: System.Func<System.IAsyncResult, TResult>
  fullName.vb: System.Func(Of System.IAsyncResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`3
  href: System.Func`3.yml
  name: Func<AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  href: System.Func`3.yml
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`4
  href: System.Func`4.yml
  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: )
    fullName: )
- uid: '{TArg1}'
  isExternal: false
  name: TArg1
  fullName: TArg1
- uid: System.Func`4
  isExternal: false
  href: System.Func`4.yml
  name: Func<T1, T2, T3, TResult>
  name.vb: Func(Of T1, T2, T3, TResult)
  fullName: System.Func<T1, T2, T3, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`5
  href: System.Func`5.yml
  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: )
    fullName: )
- uid: '{TArg2}'
  isExternal: false
  name: TArg2
  fullName: TArg2
- uid: System.Func`5
  isExternal: false
  href: System.Func`5.yml
  name: Func<T1, T2, T3, T4, TResult>
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`6
  href: System.Func`6.yml
  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    href: System.Func`6.yml
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    href: System.Func`6.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    href: System.AsyncCallback.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    href: System.IAsyncResult.yml
  - name: )
    fullName: )
- uid: '{TArg3}'
  isExternal: false
  name: TArg3
  fullName: TArg3
- uid: System.Func`6
  isExternal: false
  href: System.Func`6.yml
  name: Func<T1, T2, T3, T4, T5, TResult>
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    href: System.Func`6.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    href: System.Func`6.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentException
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  type: Class
- uid: System.Threading.Tasks.Task[]
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task[]
  name.vb: Task()
  fullName: System.Threading.Tasks.Task[]
  fullName.vb: System.Threading.Tasks.Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ()
    fullName: ()
- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<Task[], TResult>
  name.vb: Func(Of Task(), TResult)
  fullName: System.Func<System.Threading.Tasks.Task[], TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.TaskStatus
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskStatus.yml
  name: TaskStatus
  fullName: System.Threading.Tasks.TaskStatus
  type: Enum
  summary: Represents the current stage in the lifecycle of a @'System.Threading.Tasks.Task'.
- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TAntecedentResult>[]
  name.vb: Task(Of TAntecedentResult)()
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  fullName.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<Task<TAntecedentResult>[], TResult>
  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<Task, TResult>
  name.vb: Func(Of Task, TResult)
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<Task<TAntecedentResult>, TResult>
  name.vb: Func(Of Task(Of TAntecedentResult), TResult)
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
