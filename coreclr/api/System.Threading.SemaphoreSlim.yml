items:
- uid: System.Threading.SemaphoreSlim
  id: SemaphoreSlim
  parent: System.Threading
  children:
  - System.Threading.SemaphoreSlim.#ctor(System.Int32)
  - System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  - System.Threading.SemaphoreSlim.AvailableWaitHandle
  - System.Threading.SemaphoreSlim.CurrentCount
  - System.Threading.SemaphoreSlim.Dispose
  - System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  - System.Threading.SemaphoreSlim.Release
  - System.Threading.SemaphoreSlim.Release(System.Int32)
  - System.Threading.SemaphoreSlim.Wait
  - System.Threading.SemaphoreSlim.Wait(System.Int32)
  - System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  href: System.Threading.SemaphoreSlim.yml
  name: SemaphoreSlim
  fullName: System.Threading.SemaphoreSlim
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 40
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Limits the number of threads that can access a resource or pool of resources concurrently.
  remarks: >-
    <para>

    The <see cref="T:System.Threading.SemaphoreSlim" /> provides a lightweight semaphore class that doesn't

    use Windows kernel semaphores.

    </para>

    <para>

    All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used

    concurrently from multiple threads, with the exception of Dispose, which

    must only be used when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have

    completed.

    </para>
  syntax:
    content: 'public class SemaphoreSlim : IDisposable'
    content.vb: Public Class SemaphoreSlim Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.SemaphoreSlim.CurrentCount
  id: CurrentCount
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: CurrentCount
  fullName: System.Threading.SemaphoreSlim.CurrentCount
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 105
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets the current count of the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml).
  syntax:
    content: public int CurrentCount { get; }
    content.vb: Public ReadOnly Property CurrentCount As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Threading.SemaphoreSlim.AvailableWaitHandle
  id: AvailableWaitHandle
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: AvailableWaitHandle
  fullName: System.Threading.SemaphoreSlim.AvailableWaitHandle
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 123
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Returns a [System.Threading.WaitHandle](System.Threading.WaitHandle.yml) that can be used to wait on the semaphore.
  remarks: >-
    A successful wait on the <see cref="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" /> does not imply a successful wait on

    the <see cref="T:System.Threading.SemaphoreSlim" /> itself, nor does it decrement the semaphore's

    count. <see cref="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" /> exists to allow a thread to block waiting on multiple

    semaphores, but such a wait should be followed by a true wait on the target semaphore.
  syntax:
    content: public WaitHandle AvailableWaitHandle { get; }
    content.vb: Public ReadOnly Property AvailableWaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: SemaphoreSlim(Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 158
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Initializes a new instance of the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml) class, specifying

    the initial number of requests that can be granted concurrently.
  syntax:
    content: public SemaphoreSlim(int initialCount)
    content.vb: Public Sub New(initialCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: >-
        The initial number of requests for the semaphore that can be granted

        concurrently.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: is less than 0.
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: SemaphoreSlim(Int32, Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 175
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Initializes a new instance of the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml) class, specifying

    the initial and maximum number of requests that can be granted concurrently.
  syntax:
    content: public SemaphoreSlim(int initialCount, int maxCount)
    content.vb: Public Sub New(initialCount As Integer, maxCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: >-
        The initial number of requests for the semaphore that can be granted

        concurrently.
    - id: maxCount
      type: System.Int32
      description: >-
        The maximum number of requests for the semaphore that can be granted

        concurrently.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less than 0. -or-

      is greater than . -or-

      is less than 0.
- uid: System.Threading.SemaphoreSlim.Wait
  id: Wait
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait()
  fullName: System.Threading.SemaphoreSlim.Wait()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 202
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml).
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 218
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Blocks the current thread until it can enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), while observing a

    [System.Threading.CancellationToken](System.Threading.CancellationToken.yml).
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <see cref="T:System.Threading.CancellationToken" /> token to

        observe.
  exceptions:
  - type: System.OperationCanceledException
    description: >-
      was

      canceled.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 236
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), using a [System.TimeSpan](System.TimeSpan.yml) to measure the time interval.
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />;

        otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative

      number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater

      than .
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 266
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), using a [System.TimeSpan](System.TimeSpan.yml) to measure the time interval, while observing a [System.Threading.CancellationToken](System.Threading.CancellationToken.yml).
  syntax:
    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <see cref="T:System.Threading.CancellationToken" /> to

        observe.
    return:
      type: System.Boolean
      description: >-
        true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />;

        otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative

      number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater

      than .
  - type: System.OperationCanceledException
    description: was canceled.
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(Int32)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 290
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Blocks the current thread until it can enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), using a 32-bit

    signed integer to measure the time interval.
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml)(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />;

        otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a

      negative number other than -1, which represents an infinite time-out.
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 308
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Blocks the current thread until it can enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml),

    using a 32-bit signed integer to measure the time interval,

    while observing a [System.Threading.CancellationToken](System.Threading.CancellationToken.yml).
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: >-
        The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml)(-1) to

        wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken" /> to observe.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1,

      which represents an infinite time-out.
  - type: System.OperationCanceledException
    description: was canceled.
- uid: System.Threading.SemaphoreSlim.WaitAsync
  id: WaitAsync
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync()
  fullName: System.Threading.SemaphoreSlim.WaitAsync()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 477
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Asynchronously waits to enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml).
  syntax:
    content: public Task WaitAsync()
    content.vb: Public Function WaitAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A task that will complete when the semaphore has been entered.
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  id: WaitAsync(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 493
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Asynchronously waits to enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), while observing a

    [System.Threading.CancellationToken](System.Threading.CancellationToken.yml).
  syntax:
    content: public Task WaitAsync(CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken" /> token to observe.
    return:
      type: System.Threading.Tasks.Task
      description: A task that will complete when the semaphore has been entered.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  id: WaitAsync(System.Int32)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(Int32)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 514
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Asynchronously waits to enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml),

    using a 32-bit signed integer to measure the time interval.
  syntax:
    content: public Task<bool> WaitAsync(int millisecondsTimeout)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer) As Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml)(-1) to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: >-
        A task that will complete with a result of true if the current thread successfully entered

        the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of false.
  exceptions:
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1,

      which represents an infinite time-out.
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  id: WaitAsync(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 542
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Asynchronously waits to enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), using a [System.TimeSpan](System.TimeSpan.yml) to measure the time interval, while observing a

    [System.Threading.CancellationToken](System.Threading.CancellationToken.yml).
  syntax:
    content: public Task<bool> WaitAsync(TimeSpan timeout)
    content.vb: Public Function WaitAsync(timeout As TimeSpan) As Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: >-
        A task that will complete with a result of true if the current thread successfully entered

        the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1 milliseconds, which represents

      an infinite time-out -or- timeout is greater than .
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 563
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Asynchronously waits to enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), using a [System.TimeSpan](System.TimeSpan.yml) to measure the time interval.
  syntax:
    content: public Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >-
        A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds

        to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: >-
        A task that will complete with a result of true if the current thread successfully entered

        the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1 milliseconds, which represents

      an infinite time-out -or- timeout is greater than .
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  id: WaitAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 595
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Asynchronously waits to enter the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml),

    using a 32-bit signed integer to measure the time interval,

    while observing a [System.Threading.CancellationToken](System.Threading.CancellationToken.yml).
  syntax:
    content: public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml)(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken" /> to observe.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: >-
        A task that will complete with a result of true if the current thread successfully entered

        the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of false.
  exceptions:
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1,

      which represents an infinite time-out.
- uid: System.Threading.SemaphoreSlim.Release
  id: Release
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Release()
  fullName: System.Threading.SemaphoreSlim.Release()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 738
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Exits the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml) once.
  syntax:
    content: public int Release()
    content.vb: Public Function Release As Integer
    return:
      type: System.Int32
      description: The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.
  exceptions:
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.SemaphoreSlim.Release(System.Int32)
  id: Release(System.Int32)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Release(Int32)
  fullName: System.Threading.SemaphoreSlim.Release(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 754
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Exits the [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml) a specified number of times.
  syntax:
    content: public int Release(int releaseCount)
    content.vb: Public Function Release(releaseCount As Integer) As Integer
    parameters:
    - id: releaseCount
      type: System.Int32
      description: The number of times to exit the semaphore.
    return:
      type: System.Int32
      description: The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is less

      than 1.
  - type: System.Threading.SemaphoreFullException
    description: >-
      The  has

      already reached its maximum size.
  - type: System.ObjectDisposedException
    description: >-
      The current instance has already been

      disposed.
- uid: System.Threading.SemaphoreSlim.Dispose
  id: Dispose
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Dispose()
  fullName: System.Threading.SemaphoreSlim.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 844
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases all resources used by the current instance of [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml).
  remarks: >-
    Unlike most of the members of <see cref="T:System.Threading.SemaphoreSlim" />, <see cref="M:System.Threading.SemaphoreSlim.Dispose" /> is not

    thread-safe and may not be used concurrently with other members of this instance.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Dispose(Boolean)
  fullName: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 860
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    When overridden in a derived class, releases the unmanaged resources used by the

    [System.Threading.ManualResetEventSlim](System.Threading.ManualResetEventSlim.yml), and optionally releases the managed resources.
  remarks: >-
    Unlike most of the members of [System.Threading.SemaphoreSlim](System.Threading.SemaphoreSlim.yml), [System.Threading.SemaphoreSlim.Dispose(System.Boolean)](System.Threading.SemaphoreSlim.yml) is not

    thread-safe and may not be used concurrently with other members of this instance.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: >-
        true to release both managed and unmanaged resources;

        false to release only unmanaged resources.
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Threading.SemaphoreSlim
  isExternal: false
  href: System.Threading.SemaphoreSlim.yml
  name: SemaphoreSlim
  fullName: System.Threading.SemaphoreSlim
  type: Class
  summary: Limits the number of threads that can access a resource or pool of resources concurrently.
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  href: System.Threading.WaitHandle.yml
  name: WaitHandle
  fullName: System.Threading.WaitHandle
  type: Class
- uid: System.Threading.SemaphoreSlim.AvailableWaitHandle
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
  summary: Propagates notification that operations should be canceled.
- uid: System.OperationCanceledException
  isExternal: false
  href: System.OperationCanceledException.yml
  name: OperationCanceledException
  fullName: System.OperationCanceledException
  type: Class
- uid: System.TimeSpan
  parent: System
  isExternal: false
  href: System.TimeSpan.yml
  name: TimeSpan
  fullName: System.TimeSpan
  type: Struct
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.Threading.Timeout.Infinite
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  summary: Represents an asynchronous operation.
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Threading.Tasks.Task`1.yml
  name: Task<Boolean>
  name.vb: Task(Of Boolean)
  fullName: System.Threading.Tasks.Task<System.Boolean>
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  type: Class
  summary: Represents an asynchronous operation that produces a result at some time in the future.
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.SemaphoreFullException
  isExternal: false
  href: System.Threading.SemaphoreFullException.yml
  name: SemaphoreFullException
  fullName: System.Threading.SemaphoreFullException
  type: Class
- uid: System.Threading.ManualResetEventSlim
  isExternal: false
  href: System.Threading.ManualResetEventSlim.yml
  name: ManualResetEventSlim
  fullName: System.Threading.ManualResetEventSlim
  type: Class
  summary: Provides a slimmed down version of @'System.Threading.ManualResetEvent'.
- uid: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
