items:
- uid: System.Threading.LazyThreadSafetyMode
  id: LazyThreadSafetyMode
  parent: System.Threading
  children:
  - System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  - System.Threading.LazyThreadSafetyMode.None
  - System.Threading.LazyThreadSafetyMode.PublicationOnly
  href: System.Threading.LazyThreadSafetyMode.yml
  name: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
  type: Enum
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 20
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Specifies how a [System.Threading.Lazy{T}]() instance should synchronize access among multiple threads.
  syntax:
    content: public enum LazyThreadSafetyMode
    content.vb: Public Enum LazyThreadSafetyMode
- uid: System.Threading.LazyThreadSafetyMode.None
  id: None
  parent: System.Threading.LazyThreadSafetyMode
  href: System.Threading.LazyThreadSafetyMode.yml
  name: None
  fullName: System.Threading.LazyThreadSafetyMode.None
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 28
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    This mode makes no guarantees around the thread-safety of the <see cref="T:System.Threading.Lazy{T}" /> instance.  If used from multiple threads, the behavior of the <see cref="T:System.Threading.Lazy{T}" /> is undefined.

    This mode should be used when a <see cref="T:System.Threading.Lazy{T}" /> is guaranteed to never be initialized from more than one thread simultaneously and high performance is crucial.

    If valueFactory throws an exception when the <see cref="T:System.Threading.Lazy{T}" /> is initialized, the exception will be cached and returned on subsequent accesses to Value. Also, if valueFactory recursively

    accesses Value on this <see cref="T:System.Threading.Lazy{T}" /> instance, a <see cref="T:System.InvalidOperationException" /> will be thrown.
  syntax:
    content: None = 0
- uid: System.Threading.LazyThreadSafetyMode.PublicationOnly
  id: PublicationOnly
  parent: System.Threading.LazyThreadSafetyMode
  href: System.Threading.LazyThreadSafetyMode.yml
  name: PublicationOnly
  fullName: System.Threading.LazyThreadSafetyMode.PublicationOnly
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 38
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    When multiple threads attempt to simultaneously initialize a <see cref="T:System.Threading.Lazy{T}" /> instance, this mode allows each thread to execute the

    valueFactory but only the first thread to complete initialization will be allowed to set the final value of the  <see cref="T:System.Threading.Lazy{T}" />.

    Once initialized successfully, any future calls to Value will return the cached result.  If valueFactory throws an exception on any thread, that exception will be

    propagated out of Value. If any thread executes valueFactory without throwing an exception and, therefore, successfully sets the value, that value will be returned on

    subsequent accesses to Value from any thread.  If no thread succeeds in setting the value, IsValueCreated will remain false and subsequent accesses to Value will result in

    the valueFactory delegate re-executing.  Also, if valueFactory recursively accesses Value on this  <see cref="T:System.Threading.Lazy{T}" /> instance, an exception will NOT be thrown.
  syntax:
    content: PublicationOnly = 1
- uid: System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  id: ExecutionAndPublication
  parent: System.Threading.LazyThreadSafetyMode
  href: System.Threading.LazyThreadSafetyMode.yml
  name: ExecutionAndPublication
  fullName: System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 46
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    This mode uses locks to ensure that only a single thread can initialize a <see cref="T:System.Threading.Lazy{T}" /> instance in a thread-safe manner.  In general,

    taken if this mode is used in conjunction with a <see cref="T:System.Threading.Lazy{T}" /> valueFactory delegate that uses locks internally, a deadlock can occur if not

    handled carefully.  If valueFactory throws an exception when the<see cref="T:System.Threading.Lazy{T}" /> is initialized, the exception will be cached and returned on

    subsequent accesses to Value. Also, if valueFactory recursively accesses Value on this <see cref="T:System.Threading.Lazy{T}" /> instance, a  <see cref="T:System.InvalidOperationException" /> will be thrown.
  syntax:
    content: ExecutionAndPublication = 2
references:
- uid: System.Threading.Lazy{T}
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
