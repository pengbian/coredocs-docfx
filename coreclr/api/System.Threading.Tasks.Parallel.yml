items:
- uid: System.Threading.Tasks.Parallel
  id: Parallel
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.Invoke(System.Action[])
  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  href: System.Threading.Tasks.Parallel.yml
  name: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 143
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Provides support for parallel loops and regions.
  remarks: >-
    The [System.Threading.Tasks.Parallel](System.Threading.Tasks.Parallel.yml) class provides library-based data parallel replacements

    for common operations such as for loops, for each loops, and execution of a set of statements.
  syntax:
    content: public class Parallel
    content.vb: Public Class Parallel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  id: Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: Invoke(Action[])
  name.vb: Invoke(Action())
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Action())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 172
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel.
  remarks: >-
    This method can be used to execute a set of operations, potentially in parallel.

    No guarantees are made about the order in which the operations execute or whether

    they execute in parallel.  This method does not return until each of the

    provided operations has completed, regardless of whether completion

    occurs due to normal or exceptional termination.
  syntax:
    content: public static void Invoke(params Action[] actions)
    content.vb: Public Shared Sub Invoke(ParamArray actions As Action())
    parameters:
    - id: actions
      type: System.Action[]
      description: An array of [System.Action](System.Action.yml) to execute.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null element.
  - type: System.AggregateException
    description: >-
      The exception that is thrown when any

      action in the  array throws an exception.
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: Invoke(ParallelOptions, Action[])
  name.vb: Invoke(ParallelOptions, Action())
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action[])
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 205
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel.
  remarks: >-
    This method can be used to execute a set of operations, potentially in parallel.

    No guarantees are made about the order in which the operations execute or whether

    the they execute in parallel.  This method does not return until each of the

    provided operations has completed, regardless of whether completion

    occurs due to normal or exceptional termination.
  syntax:
    content: public static void Invoke(ParallelOptions parallelOptions, params Action[] actions)
    content.vb: Public Shared Sub Invoke(parallelOptions As ParallelOptions, ParamArray actions As Action())
    parameters:
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: actions
      type: System.Action[]
      description: An array of [System.Action](System.Action.yml) to execute.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentException
    description: >-
      The exception that is thrown when the

      array contains a null element.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when

      the CancellationToken in the

      is set.
  - type: System.AggregateException
    description: >-
      The exception that is thrown when any

      action in the  array throws an exception.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, Action<Int32>)
  name.vb: For(Int32, Int32, Action(Of Int32))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 420
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the iteration count (an Int32) as a parameter.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, Action<Int64>)
  name.vb: For(Int64, Int64, Action(Of Int64))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 449
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the iteration count (an Int64) as a parameter.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, ParallelOptions, Action<Int32>)
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 488
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the iteration count (an Int32) as a parameter.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, ParallelOptions, Action<Int64>)
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 531
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the iteration count (an Int64) as a parameter.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, Action<Int32, ParallelLoopState>)
  name.vb: For(Int32, Int32, Action(Of Int32, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 587
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int32),

    and a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely.

    </para>

    <para>

    Calling <see cref="M:System.Threading.Tasks.ParallelLoopState.Break">ParallelLoopState.Break()</see>

    informs the For operation that iterations after the current one need not

    execute.  However, all iterations before the current one will still need to be executed if they have not already.

    Therefore, calling Break is similar to using a break operation within a

    conventional for loop in a language like C#, but it is not a perfect substitute: for example, there is no guarantee that iterations

    after the current one will definitely not execute.

    </para>

    <para>

    If executing all iterations before the current one is not necessary,

    <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop">ParallelLoopState.Stop()</see>

    should be preferred to using Break.  Calling Stop informs the For loop that it may abandon all remaining

    iterations, regardless of whether they're for interations above or below the current,

    since all required work has already been completed.  As with Break, however, there are no guarantees regarding

    which other iterations will not execute.

    </para>

    <para>

    When a loop is ended prematurely, the <see cref="T:ParallelLoopState" /> that's returned will contain

    relevant information about the loop's completion.

    </para>
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, Action<Int64, ParallelLoopState>)
  name.vb: For(Int64, Int64, Action(Of Int64, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 617
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int64),

    and a [System.Threading.Tasks.ParallelLoopState](System.Threading.Tasks.ParallelLoopState.yml) instance that may be

    used to break out of the loop prematurely.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 658
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int32),

    and a [System.Threading.Tasks.ParallelLoopState](System.Threading.Tasks.ParallelLoopState.yml) instance that may be

    used to break out of the loop prematurely.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 703
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int64),

    and a [System.Threading.Tasks.ParallelLoopState](System.Threading.Tasks.ParallelLoopState.yml) instance that may be

    used to break out of the loop prematurely.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int32, Int32, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 758
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int32),

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int64, Int64, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 820
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.  Supports 64-bit indices.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int64),

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int32, Int32, ParallelOptions, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 893
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int32),

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int64, Int64, ParallelOptions, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 970
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for loop in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each value in the iteration range:

    [fromInclusive, toExclusive).  It is provided with the following parameters: the iteration count (an Int64),

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1653
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the current element as a parameter.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1698
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the current element as a parameter.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1738
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    and a [System.Threading.Tasks.ParallelLoopState](System.Threading.Tasks.ParallelLoopState.yml) instance that may be

    used to break out of the loop prematurely.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1785
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    and a [System.Threading.Tasks.ParallelLoopState](System.Threading.Tasks.ParallelLoopState.yml) instance that may be

    used to break out of the loop prematurely.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1825
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    a [System.Threading.Tasks.ParallelLoopState](System.Threading.Tasks.ParallelLoopState.yml) instance that may be

    used to break out of the loop prematurely, and the current element's index (an Int64).
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1872
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    a [System.Threading.Tasks.ParallelLoopState](System.Threading.Tasks.ParallelLoopState.yml) instance that may be

    used to break out of the loop prematurely, and the current element's index (an Int64).
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1932
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2008
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2078
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, the current element's index (an Int64), and some local

    state that may be shared amongst iterations that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2154
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  remarks: >-
    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    enumerable.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, the current element's index (an Int64), and some local

    state that may be shared amongst iterations that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2411
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the current element as a parameter.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  Partitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  Partitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner does not return

      the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner returns an IList

      with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() method in the  Partitioner returns an

      IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2470
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    and a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  Partitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  Partitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner does not return

      the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner returns an IList

      with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() method in the  Partitioner returns an

      IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2532
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and the current element's index (an Int64).

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      KeysNormalized property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  OrderablePartitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner do not return the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner return an IList with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() or GetDynamicOrderablePartitions() methods in the

      OrderablePartitioner return an IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2614
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  Partitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  Partitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner does not return

      the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner returns an IList

      with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() method in the  Partitioner returns an

      IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2704
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, the current element's index (an Int64), and some local

    state that may be shared amongst iterations that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      KeysNormalized property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  OrderablePartitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner do not return the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner return an IList with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() or GetDynamicOrderablePartitions() methods in the

      OrderablePartitioner return an IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2787
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the current element as a parameter.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  Partitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  Partitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner does not return

      the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner returns an IList

      with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() method in the  Partitioner returns an

      IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2862
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    and a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  Partitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  Partitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner does not return

      the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner returns an IList

      with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() method in the  Partitioner returns an

      IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2940
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and the current element's index (an Int64).

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      KeysNormalized property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  OrderablePartitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner do not return the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner return an IList with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() or GetDynamicOrderablePartitions() methods in the

      OrderablePartitioner return an IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 3038
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, and some local state that may be shared amongst iterations

    that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  Partitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  Partitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner does not return

      the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() method in the  Partitioner returns an IList

      with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() method in the  Partitioner returns an

      IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 3144
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  remarks: >-
    <para>

    The <see cref="T:System.Collections.Concurrent.Partitioner{TSource}">Partitioner</see> is used to retrieve

    the elements to be processed, in place of the original data source.  If the current element's

    index is desired, the source must be an <see cref="T:System.Collections.Concurrent.OrderablePartitioner">

    OrderablePartitioner</see>.

    </para>

    <para>

    The <paramref name="body" /> delegate is invoked once for each element in the <paramref name="source" />

    Partitioner.  It is provided with the following parameters: the current element,

    a <see cref="T:System.Threading.Tasks.ParallelLoopState">ParallelLoopState</see> instance that may be

    used to break out of the loop prematurely, the current element's index (an Int64), and some local

    state that may be shared amongst iterations that execute on the same thread.

    </para>

    <para>

    The <paramref name="localInit" /> delegate is invoked once for each thread that participates in the loop's

    execution and returns the initial local state for each of those threads.  These initial states are passed to the first

    <paramref name="body" /> invocations on each thread.  Then, every subsequent body invocation returns a possibly

    modified state value that is passed to the next body invocation.  Finally, the last body invocation on each thread returns a state value

    that is passed to the <paramref name="localFinally" /> delegate.  The localFinally delegate is invoked once per thread to perform a final

    action on each thread's local state.

    </para>
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <paramref name="source" />.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.ArgumentNullException
    description: >-
      The exception that is thrown when the

      argument is null.
  - type: System.OperationCanceledException
    description: >-
      The exception that is thrown when the

      CancellationToken in the

      argument is set
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      SupportsDynamicPartitions property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      KeysNormalized property in the  OrderablePartitioner returns

      false.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when any

      methods in the  OrderablePartitioner return null.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner do not return the correct number of partitions.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetPartitions() or GetOrderablePartitions() methods in the

      OrderablePartitioner return an IList with at least one null value.
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown when the

      GetDynamicPartitions() or GetDynamicOrderablePartitions() methods in the

      OrderablePartitioner return an IEnumerable whose GetEnumerator() method returns null.
  - type: System.AggregateException
    description: >-
      The exception that is thrown to contain an exception

      thrown from one of the specified delegates.
  - type: System.ObjectDisposedException
    description: >-
      The exception that is thrown when the

      the CancellationTokenSource associated with the

      the CancellationToken in the

      has been disposed.
references:
- uid: System.Threading.Tasks.Parallel
  isExternal: false
  href: System.Threading.Tasks.Parallel.yml
  name: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  summary: Provides support for parallel loops and regions.
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Action
  isExternal: false
  href: System.Action.yml
  name: Action
  fullName: System.Action
  type: Delegate
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
- uid: System.ArgumentException
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  type: Class
- uid: System.AggregateException
  parent: System
  isExternal: false
  href: System.AggregateException.yml
  name: AggregateException
  fullName: System.AggregateException
  type: Class
  summary: Represents one or more errors that occur during application execution.
- uid: System.Action[]
  isExternal: false
  href: System.Action.yml
  name: Action[]
  name.vb: Action()
  fullName: System.Action[]
  fullName.vb: System.Action()
  spec.csharp:
  - uid: System.Action
    name: Action
    fullName: System.Action
    href: System.Action.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Action
    name: Action
    fullName: System.Action
    href: System.Action.yml
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.ParallelOptions
  isExternal: false
  href: System.Threading.Tasks.ParallelOptions.yml
  name: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
  type: Class
  summary: >-
    Stores options that configure the operation of methods on the

    @'System.Threading.Tasks.Parallel' class.
- uid: System.OperationCanceledException
  isExternal: false
  href: System.OperationCanceledException.yml
  name: OperationCanceledException
  fullName: System.OperationCanceledException
  type: Class
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.ParallelLoopResult.yml
  name: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
  type: Struct
  summary: Provides completion status on the execution of a @'System.Threading.Tasks.Parallel' loop.
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Action{System.Int32}
  parent: System
  definition: System.Action`1
  href: System.Action`1.yml
  name: Action<Int32>
  name.vb: Action(Of Int32)
  fullName: System.Action<System.Int32>
  fullName.vb: System.Action(Of System.Int32)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  href: System.Action`1.yml
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  type: Delegate
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  href: System.Int64.yml
  name: Int64
  fullName: System.Int64
  type: Struct
- uid: System.Action{System.Int64}
  parent: System
  definition: System.Action`1
  href: System.Action`1.yml
  name: Action<Int64>
  name.vb: Action(Of Int64)
  fullName: System.Action<System.Int64>
  fullName.vb: System.Action(Of System.Int64)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: )
    fullName: )
- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  href: System.Action`2.yml
  name: Action<Int32, ParallelLoopState>
  name.vb: Action(Of Int32, ParallelLoopState)
  fullName: System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>
  fullName.vb: System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: )
    fullName: )
- uid: System.Action`2
  isExternal: false
  href: System.Action`2.yml
  name: Action<T1, T2>
  name.vb: Action(Of T1, T2)
  fullName: System.Action<T1, T2>
  fullName.vb: System.Action(Of T1, T2)
  type: Delegate
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: )
    fullName: )
- uid: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: ParallelLoopState
  fullName: System.Threading.Tasks.ParallelLoopState
  type: Class
  summary: >-
    Enables iterations of @'System.Threading.Tasks.Parallel' loops to interact with

    other iterations.
- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  href: System.Action`2.yml
  name: Action<Int64, ParallelLoopState>
  name.vb: Action(Of Int64, ParallelLoopState)
  fullName: System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>
  fullName.vb: System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: )
    fullName: )
- uid: System.Func{{TLocal}}
  parent: System
  definition: System.Func`1
  href: System.Func`1.yml
  name: Func<TLocal>
  name.vb: Func(Of TLocal)
  fullName: System.Func<TLocal>
  fullName.vb: System.Func(Of TLocal)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  href: System.Func`4.yml
  name: Func<Int32, ParallelLoopState, TLocal, TLocal>
  name.vb: Func(Of Int32, ParallelLoopState, TLocal, TLocal)
  fullName: System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullName.vb: System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Action{{TLocal}}
  parent: System
  definition: System.Action`1
  href: System.Action`1.yml
  name: Action<TLocal>
  name.vb: Action(Of TLocal)
  fullName: System.Action<TLocal>
  fullName.vb: System.Action(Of TLocal)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`1
  isExternal: false
  href: System.Func`1.yml
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`4
  isExternal: false
  href: System.Func`4.yml
  name: Func<T1, T2, T3, TResult>
  name.vb: Func(Of T1, T2, T3, TResult)
  fullName: System.Func<T1, T2, T3, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  href: System.Func`4.yml
  name: Func<Int64, ParallelLoopState, TLocal, TLocal>
  name.vb: Func(Of Int64, ParallelLoopState, TLocal, TLocal)
  fullName: System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullName.vb: System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable{TSource}
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<TSource>
  name.vb: IEnumerable(Of TSource)
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource}}
  parent: System
  definition: System.Action`1
  href: System.Action`1.yml
  name: Action<TSource>
  name.vb: Action(Of TSource)
  fullName: System.Action<TSource>
  fullName.vb: System.Action(Of TSource)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  href: System.Action`2.yml
  name: Action<TSource, ParallelLoopState>
  name.vb: Action(Of TSource, ParallelLoopState)
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState>
  fullName.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: )
    fullName: )
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  definition: System.Action`3
  href: System.Action`3.yml
  name: Action<TSource, ParallelLoopState, Int64>
  name.vb: Action(Of TSource, ParallelLoopState, Int64)
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>
  fullName.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    href: System.Action`3.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    href: System.Action`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: )
    fullName: )
- uid: System.Action`3
  isExternal: false
  href: System.Action`3.yml
  name: Action<T1, T2, T3>
  name.vb: Action(Of T1, T2, T3)
  fullName: System.Action<T1, T2, T3>
  fullName.vb: System.Action(Of T1, T2, T3)
  type: Delegate
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    href: System.Action`3.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    href: System.Action`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  href: System.Func`4.yml
  name: Func<TSource, ParallelLoopState, TLocal, TLocal>
  name.vb: Func(Of TSource, ParallelLoopState, TLocal, TLocal)
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullName.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`5
  href: System.Func`5.yml
  name: Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>
  name.vb: Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal)
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>
  fullName.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    href: System.Int64.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`5
  isExternal: false
  href: System.Func`5.yml
  name: Func<T1, T2, T3, T4, TResult>
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{TSource}
- uid: System.InvalidOperationException
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  type: Class
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: Partitioner<TSource>
  name.vb: Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: Partitioner<TSource>
  name.vb: Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  type: Class
  summary: Represents a particular manner of splitting a data source into multiple partitions.
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
  type: Namespace
- uid: System.Collections.Concurrent.OrderablePartitioner{TSource}
- uid: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.OrderablePartitioner`1
  href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  name: OrderablePartitioner<TSource>
  name.vb: OrderablePartitioner(Of TSource)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  name: OrderablePartitioner<TSource>
  name.vb: OrderablePartitioner(Of TSource)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  type: Class
  summary: Represents a particular manner of splitting an orderable data source into multiple partitions.
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
