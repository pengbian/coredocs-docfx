items:
- uid: System.Threading.Tasks.Task
  id: Task
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.Task.#ctor(System.Action)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.AsyncState
  - System.Threading.Tasks.Task.CompletedTask
  - System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.CreationOptions
  - System.Threading.Tasks.Task.CurrentId
  - System.Threading.Tasks.Task.Delay(System.Int32)
  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Dispose
  - System.Threading.Tasks.Task.Dispose(System.Boolean)
  - System.Threading.Tasks.Task.Exception
  - System.Threading.Tasks.Task.Factory
  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromException(System.Exception)
  - System.Threading.Tasks.Task.FromException``1(System.Exception)
  - System.Threading.Tasks.Task.FromResult``1(``0)
  - System.Threading.Tasks.Task.GetAwaiter
  - System.Threading.Tasks.Task.Id
  - System.Threading.Tasks.Task.IsCanceled
  - System.Threading.Tasks.Task.IsCompleted
  - System.Threading.Tasks.Task.IsFaulted
  - System.Threading.Tasks.Task.Run(System.Action)
  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{``0})
  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.RunSynchronously
  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Start
  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Status
  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  - System.Threading.Tasks.Task.Wait
  - System.Threading.Tasks.Task.Wait(System.Int32)
  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.Yield
  href: System.Threading.Tasks.Task.yml
  name: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 138
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Represents an asynchronous operation.
  remarks: >-
    <para>

    <see cref="T:System.Threading.Tasks.Task" /> instances may be created in a variety of ways. The most common approach is by

    using the Task type's <see cref="P:System.Threading.Tasks.Task.Factory" /> property to retrieve a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance that can be used to create tasks for several

    purposes. For example, to create a <see cref="T:System.Threading.Tasks.Task" /> that runs an action, the factory's StartNew

    method may be used:

    <code>

    // C#

    var t = Task.Factory.StartNew(() =&gt; DoAction());



    ' Visual Basic

    Dim t = Task.Factory.StartNew(Function() DoAction())

    </code></para>

    <para>

    The <see cref="T:System.Threading.Tasks.Task" /> class also provides constructors that initialize the Task but that do not

    schedule it for execution. For performance reasons, TaskFactory's StartNew method should be the

    preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation

    and scheduling must be separated, the constructors may be used, and the task's <see cref="M:System.Threading.Tasks.Task.Start" />

    method may then be used to schedule the task for execution at a later time.

    </para>

    <para>

    All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe

    and may be used from multiple threads concurrently.

    </para>

    <para>

    For operations that return values, the <see cref="T:System.Threading.Tasks.Task`1" /> class

    should be used.

    </para>

    <para>

    For developers implementing custom debuggers, several internal and private members of Task may be

    useful (these may change from release to release). The Int32 m_taskId field serves as the backing

    store for the <see cref="P:System.Threading.Tasks.Task.Id" /> property, however accessing this field directly from a debugger may be

    more efficient than accessing the same value through the property's getter method (the

    s_taskIdCounter Int32 counter is used to retrieve the next available ID for a Task). Similarly, the

    Int32 m_stateFlags field stores information about the current lifecycle stage of the Task,

    information also accessible through the <see cref="P:System.Threading.Tasks.Task.Status" /> property. The m_action System.Object

    field stores a reference to the Task's delegate, and the m_stateObject System.Object field stores the

    async state passed to the Task by the developer. Finally, for debuggers that parse stack frames, the

    InternalWait method serves a potential marker for when a Task is entering a wait operation.

    </para>
  syntax:
    content: 'public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable'
    content.vb: Public Class Task Implements IThreadPoolWorkItem, IAsyncResult, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.Tasks.Task.#ctor(System.Action)
  id: '#ctor(System.Action)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action)
  fullName: System.Threading.Tasks.Task.Task(System.Action)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 370
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action.
  syntax:
    content: public Task(Action action)
    content.vb: Public Sub New(action As Action)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the Task.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  id: '#ctor(System.Action,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action, CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 388
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action and [System.Threading.CancellationToken](System.Threading.CancellationToken.yml).
  syntax:
    content: public Task(Action action, CancellationToken cancellationToken)
    content.vb: Public Sub New(action As Action, cancellationToken As CancellationToken)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the Task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <see cref="T:System.Threading.CancellationToken">CancellationToken</see>

        that will be assigned to the new Task.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 411
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action and creation options.
  syntax:
    content: public Task(Action action, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) used to

        customize the Task's behavior.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for .
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action, CancellationToken, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 438
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action and creation options.
  syntax:
    content: public Task(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) used to

        customize the Task's behavior.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for .
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  id: '#ctor(System.Action{System.Object},System.Object)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action<Object>, Object)
  name.vb: Task(Action(Of Object), Object)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object)
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 455
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action and state.
  syntax:
    content: public Task(Action<object> action, object state)
    content.vb: Public Sub New(action As Action(Of Object), state As Object)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action<Object>, Object, CancellationToken)
  name.vb: Task(Action(Of Object), Object, CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 475
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action, state, snd options.
  syntax:
    content: public Task(Action<object> action, object state, CancellationToken cancellationToken)
    content.vb: Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new task.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action<Object>, Object, TaskCreationOptions)
  name.vb: Task(Action(Of Object), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 499
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action, state, snd options.
  syntax:
    content: public Task(Action<object> action, object state, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) used to

        customize the Task's behavior.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for .
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)
  name.vb: Task(Action(Of Object), Object, CancellationToken, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 527
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) with the specified action, state, snd options.
  syntax:
    content: public Task(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: >-
        The [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) used to

        customize the Task's behavior.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for .
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.Start
  id: Start
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Start()
  fullName: System.Threading.Tasks.Task.Start()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1037
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Starts the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml), scheduling it for execution to the current [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml).
  remarks: >-
    A task may only be started and run only once.  Any attempts to schedule a task a second time

    will result in an exception.
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The  is not in a valid state to be started. It may have already been started,

      executed, or canceled, or it may have been created in a manner that doesn't support direct

      scheduling.
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  id: Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Start(TaskScheduler)
  fullName: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1062
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Starts the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml), scheduling it for execution to the specified [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml).
  remarks: >-
    A task may only be started and run only once. Any attempts to schedule a task a second time will

    result in an exception.
  syntax:
    content: public void Start(TaskScheduler scheduler)
    content.vb: Public Sub Start(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> with which to associate

        and execute this task.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.InvalidOperationException
    description: >-
      The  is not in a valid state to be started. It may have already been started,

      executed, or canceled, or it may have been created in a manner that doesn't support direct

      scheduling.
- uid: System.Threading.Tasks.Task.RunSynchronously
  id: RunSynchronously
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: RunSynchronously()
  fullName: System.Threading.Tasks.Task.RunSynchronously()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1122
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Runs the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) synchronously on the current [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml).
  remarks: >-
    <para>

    A task may only be started and run only once. Any attempts to schedule a task a second time will

    result in an exception.

    </para>

    <para>

    Tasks executed with <see cref="M:System.Threading.Tasks.Task.RunSynchronously" /> will be associated with the current <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>.

    </para>

    <para>

    If the target scheduler does not support running this Task on the current thread, the Task will

    be scheduled for execution on the scheduler, and the current thread will block until the

    Task has completed execution.

    </para>
  syntax:
    content: public void RunSynchronously()
    content.vb: Public Sub RunSynchronously
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The  is not in a valid state to be started. It may have already been started,

      executed, or canceled, or it may have been created in a manner that doesn't support direct

      scheduling.
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  id: RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: RunSynchronously(TaskScheduler)
  fullName: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1150
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Runs the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) synchronously on the [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) provided.
  remarks: >-
    <para>

    A task may only be started and run only once. Any attempts to schedule a task a second time will

    result in an exception.

    </para>

    <para>

    If the target scheduler does not support running this Task on the current thread, the Task will

    be scheduled for execution on the scheduler, and the current thread will block until the

    Task has completed execution.

    </para>
  syntax:
    content: public void RunSynchronously(TaskScheduler scheduler)
    content.vb: Public Sub RunSynchronously(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler on which to attempt to run this task inline.
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The  is not in a valid state to be started. It may have already been started,

      executed, or canceled, or it may have been created in a manner that doesn't support direct

      scheduling.
  - type: System.ArgumentNullException
    description: >-
      The  parameter

      is null.
- uid: System.Threading.Tasks.Task.Id
  id: Id
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Id
  fullName: System.Threading.Tasks.Task.Id
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1316
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets a unique ID for this [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) instance.
  remarks: >-
    Task IDs are assigned on-demand and do not necessarily represent the order in the which Task

    instances were created.
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Threading.Tasks.Task.CurrentId
  id: CurrentId
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: CurrentId
  fullName: System.Threading.Tasks.Task.CurrentId
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1333
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Returns the unique ID of the currently executing [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml).
  syntax:
    content: public static int ? CurrentId { get; }
    content.vb: Public Shared ReadOnly Property CurrentId As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
- uid: System.Threading.Tasks.Task.Exception
  id: Exception
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Exception
  fullName: System.Threading.Tasks.Task.Exception
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1394
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets the <see cref="T:System.AggregateException">Exception</see> that caused the <see cref="T:System.Threading.Tasks.Task">Task</see> to end prematurely. If the <see cref="T:System.Threading.Tasks.Task">Task</see> completed successfully or has not yet thrown any

    exceptions, this will return null.
  remarks: >-
    Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a

    <see cref="T:System.AggregateException" /> in calls to <see cref="M:System.Threading.Tasks.Task.Wait">Wait</see>

    or in accesses to the <see cref="P:System.Threading.Tasks.Task.Exception" /> property.  Any exceptions not observed by the time

    the Task instance is garbage collected will be propagated on the finalizer thread.
  syntax:
    content: public AggregateException Exception { get; }
    content.vb: Public ReadOnly Property Exception As AggregateException
    parameters: []
    return:
      type: System.AggregateException
- uid: System.Threading.Tasks.Task.Status
  id: Status
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Status
  fullName: System.Threading.Tasks.Task.Status
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1415
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the [System.Threading.Tasks.TaskStatus](System.Threading.Tasks.TaskStatus.yml) of this Task.
  syntax:
    content: public TaskStatus Status { get; }
    content.vb: Public ReadOnly Property Status As TaskStatus
    parameters: []
    return:
      type: System.Threading.Tasks.TaskStatus
- uid: System.Threading.Tasks.Task.IsCanceled
  id: IsCanceled
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: IsCanceled
  fullName: System.Threading.Tasks.Task.IsCanceled
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1450
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets whether this [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) instance has completed

    execution due to being canceled.
  remarks: >-
    A <see cref="T:System.Threading.Tasks.Task">Task</see> will complete in Canceled state either if its <see cref="P:System.Threading.Tasks.Task.CancellationToken">CancellationToken</see>

    was marked for cancellation before the task started executing, or if the task acknowledged the cancellation request on

    its already signaled CancellationToken by throwing an

    <see cref="T:System.OperationCanceledException">OperationCanceledException</see> that bears the same

    <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.
  syntax:
    content: public bool IsCanceled { get; }
    content.vb: Public ReadOnly Property IsCanceled As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Threading.Tasks.Task.IsCompleted
  id: IsCompleted
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: IsCompleted
  fullName: System.Threading.Tasks.Task.IsCompleted
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1539
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether this [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) has completed.
  remarks: >-
    [System.Threading.Tasks.Task.IsCompleted](System.Threading.Tasks.Task.yml) will return true when the Task is in one of the three

    final states: [System.Threading.Tasks.TaskStatus.RanToCompletion](System.Threading.Tasks.TaskStatus.yml),

    [System.Threading.Tasks.TaskStatus.Faulted](System.Threading.Tasks.TaskStatus.yml), or

    [System.Threading.Tasks.TaskStatus.Canceled](System.Threading.Tasks.TaskStatus.yml).
  syntax:
    content: public bool IsCompleted { get; }
    content.vb: Public ReadOnly Property IsCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Threading.Tasks.Task.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: CreationOptions
  fullName: System.Threading.Tasks.Task.CreationOptions
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1565
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets the [System.Threading.Tasks.TaskCreationOptions](System.Threading.Tasks.TaskCreationOptions.yml) used

    to create this task.
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: IAsyncResult.AsyncWaitHandle
  name.vb: System.IAsyncResult.AsyncWaitHandle
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1582
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets a [System.Threading.WaitHandle](System.Threading.WaitHandle.yml) that can be used to wait for the task to

    complete.
  remarks: >-
    Using the wait functionality provided by [System.Threading.Tasks.Task.Wait](System.Threading.Tasks.Task.yml)

    should be preferred over using [System.IAsyncResult.AsyncWaitHandle](System.IAsyncResult.yml) for similar

    functionality.
  syntax:
    content: WaitHandle IAsyncResult.AsyncWaitHandle { get; }
    content.vb: ReadOnly WriteOnly Property System.IAsyncResult.AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
  exceptions:
  - type: System.ObjectDisposedException
    description: The  has been disposed.
- uid: System.Threading.Tasks.Task.AsyncState
  id: AsyncState
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: AsyncState
  fullName: System.Threading.Tasks.Task.AsyncState
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1601
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets the state object supplied when the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) was created,

    or null if none was supplied.
  syntax:
    content: public object AsyncState { get; }
    content.vb: Public ReadOnly Property AsyncState As Object
    parameters: []
    return:
      type: System.Object
- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: IAsyncResult.CompletedSynchronously
  name.vb: System.IAsyncResult.CompletedSynchronously
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1610
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets an indication of whether the asynchronous operation completed synchronously.
  syntax:
    content: bool IAsyncResult.CompletedSynchronously { get; }
    content.vb: ReadOnly WriteOnly Property System.IAsyncResult.CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously
    parameters: []
    return:
      type: System.Boolean
- uid: System.Threading.Tasks.Task.Factory
  id: Factory
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Factory
  fullName: System.Threading.Tasks.Task.Factory
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1634
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Provides access to factory methods for creating [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) and [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) instances.
  remarks: >-
    The factory returned from [System.Threading.Tasks.Task.Factory](System.Threading.Tasks.Task.yml) is a default instance

    of [System.Threading.Tasks.TaskFactory](System.Threading.Tasks.TaskFactory.yml), as would result from using

    the default constructor on TaskFactory.
  syntax:
    content: public static TaskFactory Factory { get; }
    content.vb: Public Shared ReadOnly Property Factory As TaskFactory
    parameters: []
    return:
      type: System.Threading.Tasks.TaskFactory
- uid: System.Threading.Tasks.Task.CompletedTask
  id: CompletedTask
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: CompletedTask
  fullName: System.Threading.Tasks.Task.CompletedTask
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1641
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets a task that's already been completed successfully.
  remarks: May not always return the same instance.
  syntax:
    content: public static Task CompletedTask { get; }
    content.vb: Public Shared ReadOnly Property CompletedTask As Task
    parameters: []
    return:
      type: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task.IsFaulted
  id: IsFaulted
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: IsFaulted
  fullName: System.Threading.Tasks.Task.IsFaulted
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1732
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completed due to an unhandled exception.
  remarks: >-
    If [System.Threading.Tasks.Task.IsFaulted](System.Threading.Tasks.Task.yml) is true, the Task's [System.Threading.Tasks.Task.Status](System.Threading.Tasks.Task.yml) will be equal to

    [System.Threading.Tasks.TaskStatus.Faulted](System.Threading.Tasks.TaskStatus.yml), and its

    [System.Threading.Tasks.Task.Exception](System.Threading.Tasks.Task.yml) property will be non-null.
  syntax:
    content: public bool IsFaulted { get; }
    content.vb: Public ReadOnly Property IsFaulted As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Threading.Tasks.Task.Dispose
  id: Dispose
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Dispose()
  fullName: System.Threading.Tasks.Task.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1822
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Disposes the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml), releasing all of its unmanaged resources.
  remarks: >-
    Unlike most of the members of <see cref="T:System.Threading.Tasks.Task" />, this method is not thread-safe.

    Also, <see cref="M:System.Threading.Tasks.Task.Dispose" /> may only be called on a <see cref="T:System.Threading.Tasks.Task" /> that is in one of

    the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion">RanToCompletion</see>,

    <see cref="F:System.Threading.Tasks.TaskStatus.Faulted">Faulted</see>, or

    <see cref="F:System.Threading.Tasks.TaskStatus.Canceled">Canceled</see>.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  exceptions:
  - type: System.InvalidOperationException
    description: >-
      The exception that is thrown if the  is not in

      one of the final states: RanToCompletion,

      Faulted, or

      Canceled.
- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Dispose(Boolean)
  fullName: System.Threading.Tasks.Task.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1838
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Disposes the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml), releasing all of its unmanaged resources.
  remarks: Unlike most of the members of <see cref="T:System.Threading.Tasks.Task" />, this method is not thread-safe.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: A Boolean value that indicates whether this method is being called due to a call to [System.Threading.Tasks.Task.Dispose](System.Threading.Tasks.Task.yml).
- uid: System.Threading.Tasks.Task.GetAwaiter
  id: GetAwaiter
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: GetAwaiter()
  fullName: System.Threading.Tasks.Task.GetAwaiter()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 2922
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets an awaiter used to await this [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml).
  remarks: This method is intended for compiler user rather than use directly in code.
  syntax:
    content: public TaskAwaiter GetAwaiter()
    content.vb: Public Function GetAwaiter As TaskAwaiter
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter
      description: An awaiter instance.
- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  id: ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 2932
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Configures an awaiter used to await this [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml).
  syntax:
    content: public ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext)
    content.vb: Public Function ConfigureAwait(continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable
    parameters:
    - id: continueOnCapturedContext
      type: System.Boolean
      description: true to attempt to marshal the continuation back to the original context captured; otherwise, false.
    return:
      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
      description: An object used to await this task.
- uid: System.Threading.Tasks.Task.Yield
  id: Yield
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Yield()
  fullName: System.Threading.Tasks.Task.Yield()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3018
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates an awaitable that asynchronously yields back to the current context when awaited.
  syntax:
    content: public static YieldAwaitable Yield()
    content.vb: Public Shared Function Yield As YieldAwaitable
    return:
      type: System.Runtime.CompilerServices.YieldAwaitable
      description: >-
        A context that, when awaited, will asynchronously transition back into the current context at the

        time of the await. If the current SynchronizationContext is non-null, that is treated as the current context.

        Otherwise, TaskScheduler.Current is treated as the current context.
- uid: System.Threading.Tasks.Task.Wait
  id: Wait
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Wait()
  fullName: System.Threading.Tasks.Task.Wait()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3031
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) to complete execution.
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.AggregateException
    description: >-
      The  was canceled -or- an exception was thrown during

      the execution of the .
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Wait(TimeSpan)
  fullName: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3062
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) to complete execution.
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.AggregateException
    description: The  was canceled -or- an exception was thrown during the execution of the .
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1 milliseconds, which represents an

      infinite time-out -or- timeout is greater than

      .
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Wait(CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3087
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) to complete execution.
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A [System.Threading.Tasks.Task.CancellationToken]() to observe while waiting for the task to complete.
  exceptions:
  - type: System.OperationCanceledException
    description: The  was canceled.
  - type: System.AggregateException
    description: The  was canceled -or- an exception was thrown during the execution of the .
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Wait(Int32)
  fullName: System.Threading.Tasks.Task.Wait(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3110
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) to complete execution.
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: >-
        The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml) (-1) to

        wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise,

        false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1, which represents an

      infinite time-out.
  - type: System.AggregateException
    description: The  was canceled -or- an exception was thrown during the execution of the .
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Wait(Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3140
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) to complete execution.
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: >-
        The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml) (-1) to

        wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A [System.Threading.Tasks.Task.CancellationToken]() to observe while waiting for the task to complete.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.AggregateException
    description: The  was canceled -or- an exception was thrown during the execution of the .
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1, which represents an

      infinite time-out.
  - type: System.OperationCanceledException
    description: The  was canceled.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  id: ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task>)
  name.vb: ContinueWith(Action(Of Task))
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3723
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task)) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task>, CancellationToken)
  name.vb: ContinueWith(Action(Of Task), CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3750
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task>, TaskScheduler)
  name.vb: ContinueWith(Action(Of Task), TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3779
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.  When run, the delegate will be

        passed the completed task as an argument.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task>, TaskContinuationOptions)
  name.vb: ContinueWith(Action(Of Task), TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3814
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed. If the continuation criteria specified through the <paramref name="continuationOptions" /> parameter are not met, the continuation task will be canceled

    instead of scheduled.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3859
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed. If the criteria specified through the <paramref name="continuationOptions" /> parameter

    are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its

        execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task, Object>, Object)
  name.vb: ContinueWith(Action(Of Task, Object), Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3921
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task, Object>, Object, CancellationToken)
  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3949
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task, Object>, Object, TaskScheduler)
  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3979
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.  When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)
  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4015
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed. If the continuation criteria specified through the <paramref name="continuationOptions" /> parameter are not met, the continuation task will be canceled

    instead of scheduled.
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4061
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned <see cref="T:System.Threading.Tasks.Task" /> will not be scheduled for execution until the current task has

    completed. If the criteria specified through the <paramref name="continuationOptions" /> parameter

    are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: >-
        An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its

        execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, TResult>)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult))
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4126
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4158
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4190
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.  When run, the delegate will be

        passed the completed task as an argument.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4228
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed. If the continuation criteria specified through the <paramref name="continuationOptions" /> parameter are not met, the continuation task will be canceled

    instead of scheduled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4276
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed. If the criteria specified through the <paramref name="continuationOptions" /> parameter

    are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its

        execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4341
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4374
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4407
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed, whether it completes due to running to completion successfully, faulting due to an

    unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.  When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4446
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed. If the continuation criteria specified through the <paramref name="continuationOptions" /> parameter are not met, the continuation task will be canceled

    instead of scheduled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4495
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) completes.
  remarks: >-
    The returned [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) will not be scheduled for execution until the current task has

    completed. If the criteria specified through the <paramref name="continuationOptions" /> parameter

    are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: >-
        A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be

        passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The [System.Threading.Tasks.Task.CancellationToken]() that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: >-
        Options for when the continuation is scheduled and how it behaves. This includes criteria, such

        as [System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled](System.Threading.Tasks.TaskContinuationOptions.yml), as

        well as execution options, such as [System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously](System.Threading.Tasks.TaskContinuationOptions.yml).
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        The [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) to associate with the continuation task and to use for its

        execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The  argument specifies an invalid value for TaskContinuationOptions.
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ObjectDisposedException
    description: >-
      The provided CancellationToken

      has already been disposed.
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  id: WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAll(Task[])
  name.vb: WaitAll(Task())
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4859
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static void WaitAll(params Task[] tasks)
    content.vb: Public Shared Sub WaitAll(ParamArray tasks As Task())
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentNullException
    description: The  argument contains a null element.
  - type: System.AggregateException
    description: >-
      At least one of the  instances was canceled -or- an exception was thrown during

      the execution of at least one of the  instances.
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAll(Task[], TimeSpan)
  name.vb: WaitAll(Task(), TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.TimeSpan)
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4901
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static bool WaitAll(Task[] tasks, TimeSpan timeout)
    content.vb: Public Shared Function WaitAll(tasks As Task(), timeout As TimeSpan) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time;

        otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.AggregateException
    description: >-
      At least one of the  instances was canceled -or- an exception was thrown during

      the execution of at least one of the  instances.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1 milliseconds, which represents an

      infinite time-out -or- timeout is greater than

      .
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAll(Task[], Int32)
  name.vb: WaitAll(Task(), Int32)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32)
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4940
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static bool WaitAll(Task[] tasks, int millisecondsTimeout)
    content.vb: Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: >-
        The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml) (-1) to

        wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time;

        otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.AggregateException
    description: >-
      At least one of the  instances was canceled -or- an exception was thrown during

      the execution of at least one of the  instances.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1, which represents an

      infinite time-out.
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAll(Task[], CancellationToken)
  name.vb: WaitAll(Task(), CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4972
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static void WaitAll(Task[] tasks, CancellationToken cancellationToken)
    content.vb: Public Shared Sub WaitAll(tasks As Task(), cancellationToken As CancellationToken)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A [System.Threading.Tasks.Task.CancellationToken]() to observe while waiting for the tasks to complete.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.AggregateException
    description: >-
      At least one of the  instances was canceled -or- an exception was thrown during

      the execution of at least one of the  instances.
  - type: System.OperationCanceledException
    description: The  was canceled.
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAll(Task[], Int32, CancellationToken)
  name.vb: WaitAll(Task(), Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5012
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static bool WaitAll(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: >-
        The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml) (-1) to

        wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A [System.Threading.Tasks.Task.CancellationToken]() to observe while waiting for the tasks to complete.
    return:
      type: System.Boolean
      description: >-
        true if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time;

        otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.AggregateException
    description: >-
      At least one of the  instances was canceled -or- an exception was thrown during

      the execution of at least one of the  instances.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1, which represents an

      infinite time-out.
  - type: System.OperationCanceledException
    description: The  was canceled.
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  id: WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAny(Task[])
  name.vb: WaitAny(Task())
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5293
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static int WaitAny(params Task[] tasks)
    content.vb: Public Shared Function WaitAny(ParamArray tasks As Task()) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    return:
      type: System.Int32
      description: The index of the completed task in the <paramref name="tasks" /> array argument.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAny(Task[], TimeSpan)
  name.vb: WaitAny(Task(), TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.TimeSpan)
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5326
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static int WaitAny(Task[] tasks, TimeSpan timeout)
    content.vb: Public Shared Function WaitAny(tasks As Task(), timeout As TimeSpan) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: >-
        The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the

        timeout occurred.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1 milliseconds, which represents an

      infinite time-out -or- timeout is greater than

      .
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAny(Task[], CancellationToken)
  name.vb: WaitAny(Task(), CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5359
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static int WaitAny(Task[] tasks, CancellationToken cancellationToken)
    content.vb: Public Shared Function WaitAny(tasks As Task(), cancellationToken As CancellationToken) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A [System.Threading.Tasks.Task.CancellationToken]() to observe while waiting for a task to complete.
    return:
      type: System.Int32
      description: The index of the completed task in the <paramref name="tasks" /> array argument.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.OperationCanceledException
    description: The  was canceled.
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAny(Task[], Int32)
  name.vb: WaitAny(Task(), Int32)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32)
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5389
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static int WaitAny(Task[] tasks, int millisecondsTimeout)
    content.vb: Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: >-
        The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml) (-1) to

        wait indefinitely.
    return:
      type: System.Int32
      description: >-
        The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the

        timeout occurred.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1, which represents an

      infinite time-out.
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WaitAny(Task[], Int32, CancellationToken)
  name.vb: WaitAny(Task(), Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5425
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) objects to complete execution.
  syntax:
    content: public static int WaitAny(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: >-
        The number of milliseconds to wait, or [System.Threading.Timeout.Infinite](System.Threading.Timeout.yml) (-1) to

        wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A [System.Threading.Tasks.Task.CancellationToken]() to observe while waiting for a task to complete.
    return:
      type: System.Int32
      description: >-
        The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the

        timeout occurred.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
  - type: System.ArgumentException
    description: The  argument contains a null element.
  - type: System.ArgumentOutOfRangeException
    description: >-
      is a negative number other than -1, which represents an

      infinite time-out.
  - type: System.OperationCanceledException
    description: The  was canceled.
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  id: FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: FromResult<TResult>(TResult)
  name.vb: FromResult(Of TResult)(TResult)
  fullName: System.Threading.Tasks.Task.FromResult<TResult>(TResult)
  fullName.vb: System.Threading.Tasks.Task.FromResult(Of TResult)(TResult)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5489
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) that's completed successfully with the specified result.
  syntax:
    content: public static Task<TResult> FromResult<TResult>(TResult result)
    content.vb: Public Shared Function FromResult(Of TResult)(result As TResult) As Task(Of TResult)
    parameters:
    - id: result
      type: '{TResult}'
      description: The result to store into the completed task.
    typeParameters:
    - id: TResult
      description: The type of the result returned by the task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The successfully completed task.
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  id: FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(System.Exception)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5498
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) that's completed exceptionally with the specified exception.
  syntax:
    content: public static Task FromException(Exception exception)
    content.vb: Public Shared Function FromException(exception As Exception) As Task
    parameters:
    - id: exception
      type: System.Exception
      description: The exception with which to complete the task.
    return:
      type: System.Threading.Tasks.Task
      description: The faulted task.
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  id: FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: FromException<TResult>(Exception)
  name.vb: FromException(Of TResult)(Exception)
  fullName: System.Threading.Tasks.Task.FromException<TResult>(System.Exception)
  fullName.vb: System.Threading.Tasks.Task.FromException(Of TResult)(System.Exception)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5507
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) that's completed exceptionally with the specified exception.
  syntax:
    content: public static Task<TResult> FromException<TResult>(Exception exception)
    content.vb: Public Shared Function FromException(Of TResult)(exception As Exception) As Task(Of TResult)
    parameters:
    - id: exception
      type: System.Exception
      description: The exception with which to complete the task.
    typeParameters:
    - id: TResult
      description: The type of the result returned by the task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The faulted task.
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  id: FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5532
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) that's completed due to cancellation with the specified token.
  syntax:
    content: public static Task FromCanceled(CancellationToken cancellationToken)
    content.vb: Public Shared Function FromCanceled(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token with which to complete the task.
    return:
      type: System.Threading.Tasks.Task
      description: The canceled task.
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  id: FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: FromCanceled<TResult>(CancellationToken)
  name.vb: FromCanceled(Of TResult)(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled<TResult>(System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.FromCanceled(Of TResult)(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5553
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a [System.Threading.Tasks.Task`1](System.Threading.Tasks.Task`1.yml) that's completed due to cancellation with the specified token.
  syntax:
    content: public static Task<TResult> FromCanceled<TResult>(CancellationToken cancellationToken)
    content.vb: Public Shared Function FromCanceled(Of TResult)(cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token with which to complete the task.
    typeParameters:
    - id: TResult
      description: The type of the result returned by the task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The canceled task.
- uid: System.Threading.Tasks.Task.Run(System.Action)
  id: Run(System.Action)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run(Action)
  fullName: System.Threading.Tasks.Task.Run(System.Action)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5585
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a Task handle for that work.
  syntax:
    content: public static Task Run(Action action)
    content.vb: Public Shared Function Run(action As Action) As Task
    parameters:
    - id: action
      type: System.Action
      description: The work to execute asynchronously
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the work queued to execute in the ThreadPool.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  id: Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run(Action, CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(System.Action, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5605
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a Task handle for that work.
  syntax:
    content: public static Task Run(Action action, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(action As Action, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the work queued to execute in the ThreadPool.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
  - type: System.ObjectDisposedException
    description: The  associated with  was disposed.
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})
  id: Run``1(System.Func{``0})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run<TResult>(Func<TResult>)
  name.vb: Run(Of TResult)(Func(Of TResult))
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>)
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5621
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<TResult> function)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: The work to execute asynchronously
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A Task(TResult) that represents the work queued to execute in the ThreadPool.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  id: Run``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run<TResult>(Func<TResult>, CancellationToken)
  name.vb: Run(Of TResult)(Func(Of TResult), CancellationToken)
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5641
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A Task(TResult) that represents the work queued to execute in the ThreadPool.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
  - type: System.ObjectDisposedException
    description: The  associated with  was disposed.
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  id: Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run(Func<Task>)
  name.vb: Run(Func(Of Task))
  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>)
  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5658
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Queues the specified work to run on the ThreadPool and returns a proxy for the

    Task returned by <paramref name="function" />.
  syntax:
    content: public static Task Run(Func<Task> function)
    content.vb: Public Shared Function Run(function As Func(Of Task)) As Task
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: The work to execute asynchronously
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents a proxy for the Task returned by <paramref name="function" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run(Func<Task>, CancellationToken)
  name.vb: Run(Func(Of Task), CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5677
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Queues the specified work to run on the ThreadPool and returns a proxy for the

    Task returned by <paramref name="function" />.
  syntax:
    content: public static Task Run(Func<Task> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(function As Func(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents a proxy for the Task returned by <paramref name="function" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
  - type: System.ObjectDisposedException
    description: The  associated with  was disposed.
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run<TResult>(Func<Task<TResult>>)
  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)))
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5712
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Queues the specified work to run on the ThreadPool and returns a proxy for the

    Task(TResult) returned by <paramref name="function" />.
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult))) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: The work to execute asynchronously
    typeParameters:
    - id: TResult
      description: The type of the result returned by the proxy Task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name="function" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)
  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5728
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Queues the specified work to run on the ThreadPool and returns a proxy for the

    Task(TResult) returned by <paramref name="function" />.
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work
    typeParameters:
    - id: TResult
      description: The type of the result returned by the proxy Task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name="function" />.
  exceptions:
  - type: System.ArgumentNullException
    description: The  parameter was null.
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  id: Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Delay(TimeSpan)
  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5769
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a Task that will complete after a time delay.
  remarks: After the specified time delay, the Task is completed in RanToCompletion state.
  syntax:
    content: public static Task Delay(TimeSpan delay)
    content.vb: Public Shared Function Delay(delay As TimeSpan) As Task
    parameters:
    - id: delay
      type: System.TimeSpan
      description: The time span to wait before completing the returned Task
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the time delay
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The  is less than -1 or greater than Int32.MaxValue.
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  id: Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Delay(TimeSpan, CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5791
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a Task that will complete after a time delay.
  remarks: >-
    If the cancellation token is signaled before the specified time delay, then the Task is completed in

    Canceled state.  Otherwise, the Task is completed in RanToCompletion state once the specified time

    delay has expired.
  syntax:
    content: public static Task Delay(TimeSpan delay, CancellationToken cancellationToken)
    content.vb: Public Shared Function Delay(delay As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: delay
      type: System.TimeSpan
      description: The time span to wait before completing the returned Task
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be checked prior to completing the returned Task
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the time delay
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The  is less than -1 or greater than Int32.MaxValue.
  - type: System.ObjectDisposedException
    description: The provided  has already been disposed.
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  id: Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Delay(Int32)
  fullName: System.Threading.Tasks.Task.Delay(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5813
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a Task that will complete after a time delay.
  remarks: After the specified time delay, the Task is completed in RanToCompletion state.
  syntax:
    content: public static Task Delay(int millisecondsDelay)
    content.vb: Public Shared Function Delay(millisecondsDelay As Integer) As Task
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: The number of milliseconds to wait before completing the returned Task
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the time delay
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The  is less than -1.
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  id: Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: Delay(Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5835
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a Task that will complete after a time delay.
  remarks: >-
    If the cancellation token is signaled before the specified time delay, then the Task is completed in

    Canceled state.  Otherwise, the Task is completed in RanToCompletion state once the specified time

    delay has expired.
  syntax:
    content: public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken)
    content.vb: Public Shared Function Delay(millisecondsDelay As Integer, cancellationToken As CancellationToken) As Task
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: The number of milliseconds to wait before completing the returned Task
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be checked prior to completing the returned Task
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the time delay
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The  is less than -1.
  - type: System.ObjectDisposedException
    description: The provided  has already been disposed.
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAll(IEnumerable<Task>)
  name.vb: WhenAll(IEnumerable(Of Task))
  fullName: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5955
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when all of the supplied tasks have completed.
  remarks: >-
    <para>

    If any of the supplied tasks completes in a faulted state, the returned task will also complete in a Faulted state,

    where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.

    </para>

    <para>

    If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the Canceled state.

    </para>

    <para>

    If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the RanToCompletion state.

    </para>

    <para>

    If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a RanToCompletion

    state before it's returned to the caller.

    </para>
  syntax:
    content: public static Task WhenAll(IEnumerable<Task> tasks)
    content.vb: Public Shared Function WhenAll(tasks As IEnumerable(Of Task)) As Task
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the completion of all of the supplied tasks.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  collection contained a null task.
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  id: WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAll(Task[])
  name.vb: WhenAll(Task())
  fullName: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6018
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when all of the supplied tasks have completed.
  remarks: >-
    <para>

    If any of the supplied tasks completes in a faulted state, the returned task will also complete in a Faulted state,

    where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.

    </para>

    <para>

    If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the Canceled state.

    </para>

    <para>

    If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the RanToCompletion state.

    </para>

    <para>

    If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a RanToCompletion

    state before it's returned to the caller.

    </para>
  syntax:
    content: public static Task WhenAll(params Task[] tasks)
    content.vb: Public Shared Function WhenAll(ParamArray tasks As Task()) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the completion of all of the supplied tasks.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  array contained a null task.
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)
  name.vb: WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))
  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6204
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when all of the supplied tasks have completed.
  remarks: >-
    <para>

    If any of the supplied tasks completes in a faulted state, the returned task will also complete in a Faulted state,

    where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.

    </para>

    <para>

    If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the Canceled state.

    </para>

    <para>

    If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the RanToCompletion state.

    The Result of the returned task will be set to an array containing all of the results of the

    supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output

    task's Result will return an TResult[] where arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result).

    </para>

    <para>

    If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a RanToCompletion

    state before it's returned to the caller.  The returned TResult[] will be an array of 0 elements.

    </para>
  syntax:
    content: public static Task<TResult[]> WhenAll<TResult>(IEnumerable<Task<TResult>> tasks)
    content.vb: Public Shared Function WhenAll(Of TResult)(tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
      description: The tasks to wait on for completion.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}[]}
      description: A task that represents the completion of all of the supplied tasks.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  collection contained a null task.
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAll<TResult>(Task<TResult>[])
  name.vb: WhenAll(Of TResult)(Task(Of TResult)())
  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Threading.Tasks.Task<TResult>[])
  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Threading.Tasks.Task(Of TResult)())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6270
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when all of the supplied tasks have completed.
  remarks: >-
    <para>

    If any of the supplied tasks completes in a faulted state, the returned task will also complete in a Faulted state,

    where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.

    </para>

    <para>

    If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the Canceled state.

    </para>

    <para>

    If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the RanToCompletion state.

    The Result of the returned task will be set to an array containing all of the results of the

    supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output

    task's Result will return an TResult[] where arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result).

    </para>

    <para>

    If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a RanToCompletion

    state before it's returned to the caller.  The returned TResult[] will be an array of 0 elements.

    </para>
  syntax:
    content: public static Task<TResult[]> WhenAll<TResult>(params Task<TResult>[] tasks)
    content.vb: Public Shared Function WhenAll(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TResult}}[]
      description: The tasks to wait on for completion.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}[]}
      description: A task that represents the completion of all of the supplied tasks.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  array contained a null task.
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  id: WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAny(Task[])
  name.vb: WhenAny(Task())
  fullName: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6441
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  remarks: >-
    The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state

    with its Result set to the first task to complete.  This is true even if the first task to complete ended in the Canceled or Faulted state.
  syntax:
    content: public static Task<Task> WhenAny(params Task[] tasks)
    content.vb: Public Shared Function WhenAny(ParamArray tasks As Task()) As Task(Of Task)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  array contained a null task, or was empty.
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAny(IEnumerable<Task>)
  name.vb: WhenAny(IEnumerable(Of Task))
  fullName: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6480
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  remarks: >-
    The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state

    with its Result set to the first task to complete.  This is true even if the first task to complete ended in the Canceled or Faulted state.
  syntax:
    content: public static Task<Task> WhenAny(IEnumerable<Task> tasks)
    content.vb: Public Shared Function WhenAny(tasks As IEnumerable(Of Task)) As Task(Of Task)
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  collection contained a null task, or was empty.
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAny<TResult>(Task<TResult>[])
  name.vb: WhenAny(Of TResult)(Task(Of TResult)())
  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Threading.Tasks.Task<TResult>[])
  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Threading.Tasks.Task(Of TResult)())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6518
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  remarks: >-
    The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state

    with its Result set to the first task to complete.  This is true even if the first task to complete ended in the Canceled or Faulted state.
  syntax:
    content: public static Task<Task<TResult>> WhenAny<TResult>(params Task<TResult>[] tasks)
    content.vb: Public Shared Function WhenAny(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TResult}}[]
      description: The tasks to wait on for completion.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
      description: A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  array contained a null task, or was empty.
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  href: System.Threading.Tasks.Task.yml
  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)
  name.vb: WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))
  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6547
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  remarks: >-
    The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state

    with its Result set to the first task to complete.  This is true even if the first task to complete ended in the Canceled or Faulted state.
  syntax:
    content: public static Task<Task<TResult>> WhenAny<TResult>(IEnumerable<Task<TResult>> tasks)
    content.vb: Public Shared Function WhenAny(Of TResult)(tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
      description: The tasks to wait on for completion.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
      description: A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument was null.
  - type: System.ArgumentException
    description: The  collection contained a null task, or was empty.
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  summary: Represents an asynchronous operation.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
- uid: System.Action
  isExternal: false
  href: System.Action.yml
  name: Action
  fullName: System.Action
  type: Delegate
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
  summary: Propagates notification that operations should be canceled.
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskCreationOptions.yml
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
  type: Enum
  summary: Specifies flags that control optional behavior for the creation and execution of tasks.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
- uid: System.Threading.Tasks.Task.CancellationToken
- uid: System.Action{System.Object}
  parent: System
  definition: System.Action`1
  href: System.Action`1.yml
  name: Action<Object>
  name.vb: Action(Of Object)
  fullName: System.Action<System.Object>
  fullName.vb: System.Action(Of System.Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  href: System.Action`1.yml
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  type: Delegate
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
  type: Class
  summary: Represents an abstract scheduler for tasks.
- uid: System.InvalidOperationException
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  type: Class
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: System.Nullable`1.yml
  name: Nullable<Int32>
  name.vb: Nullable(Of Int32)
  fullName: System.Nullable<System.Int32>
  fullName.vb: System.Nullable(Of System.Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    href: System.Nullable`1.yml
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    href: System.Nullable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    href: System.Int32.yml
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  href: System.Nullable`1.yml
  name: Nullable<T>
  name.vb: Nullable(Of T)
  fullName: System.Nullable<T>
  fullName.vb: System.Nullable(Of T)
  type: Struct
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    href: System.Nullable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    href: System.Nullable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.AggregateException
  parent: System
  isExternal: false
  href: System.AggregateException.yml
  name: AggregateException
  fullName: System.AggregateException
  type: Class
  summary: Represents one or more errors that occur during application execution.
- uid: System.Threading.Tasks.TaskStatus
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskStatus.yml
  name: TaskStatus
  fullName: System.Threading.Tasks.TaskStatus
  type: Enum
  summary: Represents the current stage in the lifecycle of a @'System.Threading.Tasks.Task'.
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.Threading.Tasks.Task.IsCompleted
  parent: System.Threading.Tasks.Task
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: IsCompleted
  fullName: System.Threading.Tasks.Task.IsCompleted
- uid: System.Threading.Tasks.TaskStatus.RanToCompletion
- uid: System.Threading.Tasks.TaskStatus.Faulted
- uid: System.Threading.Tasks.TaskStatus.Canceled
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  href: System.Threading.WaitHandle.yml
  name: WaitHandle
  fullName: System.Threading.WaitHandle
  type: Class
- uid: System.Threading.Tasks.Task.Wait
  parent: System.Threading.Tasks.Task
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Wait()
  fullName: System.Threading.Tasks.Task.Wait()
  spec.csharp:
  - uid: System.Threading.Tasks.Task.Wait
    name: Wait
    fullName: System.Threading.Tasks.Task.Wait
    href: System.Threading.Tasks.Task.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Threading.Tasks.Task.Wait
    name: Wait
    fullName: System.Threading.Tasks.Task.Wait
    href: System.Threading.Tasks.Task.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  type: Class
  summary: Represents an asynchronous operation that produces a result at some time in the future.
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task.Factory
- uid: System.Threading.Tasks.TaskFactory
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskFactory.yml
  name: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
  type: Class
  summary: >-
    Provides support for creating and scheduling

    @'System.Threading.Tasks.Task'.
- uid: System.Threading.Tasks.Task.IsFaulted
  parent: System.Threading.Tasks.Task
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: IsFaulted
  fullName: System.Threading.Tasks.Task.IsFaulted
- uid: System.Threading.Tasks.Task.Status
  parent: System.Threading.Tasks.Task
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Status
  fullName: System.Threading.Tasks.Task.Status
- uid: System.Threading.Tasks.Task.Exception
  parent: System.Threading.Tasks.Task
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Exception
  fullName: System.Threading.Tasks.Task.Exception
- uid: System.Threading.Tasks.Task.Dispose
  parent: System.Threading.Tasks.Task
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Dispose()
  fullName: System.Threading.Tasks.Task.Dispose()
  spec.csharp:
  - uid: System.Threading.Tasks.Task.Dispose
    name: Dispose
    fullName: System.Threading.Tasks.Task.Dispose
    href: System.Threading.Tasks.Task.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Threading.Tasks.Task.Dispose
    name: Dispose
    fullName: System.Threading.Tasks.Task.Dispose
    href: System.Threading.Tasks.Task.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.CompilerServices.TaskAwaiter
  isExternal: false
  href: System.Runtime.CompilerServices.TaskAwaiter.yml
  name: TaskAwaiter
  fullName: System.Runtime.CompilerServices.TaskAwaiter
  type: Struct
  summary: Provides an awaiter for awaiting a @'System.Threading.Tasks.Task'.
- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
  isExternal: false
  href: System.Runtime.CompilerServices.ConfiguredTaskAwaitable.yml
  name: ConfiguredTaskAwaitable
  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
  type: Struct
  summary: Provides an awaitable object that allows for configured awaits on @'System.Threading.Tasks.Task'.
- uid: System.Runtime.CompilerServices.YieldAwaitable
  isExternal: false
  href: System.Runtime.CompilerServices.YieldAwaitable.yml
  name: YieldAwaitable
  fullName: System.Runtime.CompilerServices.YieldAwaitable
  type: Struct
  summary: Provides an awaitable context for switching into a target environment.
- uid: System.TimeSpan
  parent: System
  isExternal: false
  href: System.TimeSpan.yml
  name: TimeSpan
  fullName: System.TimeSpan
  type: Struct
- uid: System.OperationCanceledException
  isExternal: false
  href: System.OperationCanceledException.yml
  name: OperationCanceledException
  fullName: System.OperationCanceledException
  type: Class
- uid: System.Threading.Timeout.Infinite
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  definition: System.Action`1
  href: System.Action`1.yml
  name: Action<Task>
  name.vb: Action(Of Task)
  fullName: System.Action<System.Threading.Tasks.Task>
  fullName.vb: System.Action(Of System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: )
    fullName: )
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
- uid: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskContinuationOptions.yml
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
  type: Enum
  summary: Specifies flags that control optional behavior for the creation and execution of continuation tasks.
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  definition: System.Action`2
  href: System.Action`2.yml
  name: Action<Task, Object>
  name.vb: Action(Of Task, Object)
  fullName: System.Action<System.Threading.Tasks.Task, System.Object>
  fullName.vb: System.Action(Of System.Threading.Tasks.Task, System.Object)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Action`2
  isExternal: false
  href: System.Action`2.yml
  name: Action<T1, T2>
  name.vb: Action(Of T1, T2)
  fullName: System.Action<T1, T2>
  fullName.vb: System.Action(Of T1, T2)
  type: Delegate
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Func`2.yml
  name: Func<Task, TResult>
  name.vb: Func(Of Task, TResult)
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  href: System.Func`2.yml
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
  parent: System
  definition: System.Func`3
  href: System.Func`3.yml
  name: Func<Task, Object, TResult>
  name.vb: Func(Of Task, Object, TResult)
  fullName: System.Func<System.Threading.Tasks.Task, System.Object, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task, System.Object, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  href: System.Func`3.yml
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task[]
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task[]
  name.vb: Task()
  fullName: System.Threading.Tasks.Task[]
  fullName.vb: System.Threading.Tasks.Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ()
    fullName: ()
- uid: System.ArgumentException
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  type: Class
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Exception
  parent: System
  isExternal: false
  href: System.Exception.yml
  name: Exception
  fullName: System.Exception
  type: Class
- uid: System.Func{{TResult}}
  parent: System
  definition: System.Func`1
  href: System.Func`1.yml
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`1
  isExternal: false
  href: System.Func`1.yml
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  href: System.Func`1.yml
  name: Func<Task>
  name.vb: Func(Of Task)
  fullName: System.Func<System.Threading.Tasks.Task>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}
  parent: System
  definition: System.Func`1
  href: System.Func`1.yml
  name: Func<Task<TResult>>
  name.vb: Func(Of Task(Of TResult))
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<Task>
  name.vb: IEnumerable(Of Task)
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<Task<TResult>>
  name.vb: IEnumerable(Of Task(Of TResult))
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult[]>
  name.vb: Task(Of TResult())
  fullName: System.Threading.Tasks.Task<TResult[]>
  fullName.vb: System.Threading.Tasks.Task(Of TResult())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}[]
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>[]
  name.vb: Task(Of TResult)()
  fullName: System.Threading.Tasks.Task<TResult>[]
  fullName.vb: System.Threading.Tasks.Task(Of TResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Threading.Tasks.Task`1.yml
  name: Task<Task>
  name.vb: Task(Of Task)
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
  fullName.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Threading.Tasks.Task`1.yml
  name: Task<Task<TResult>>
  name.vb: Task(Of Task(Of TResult))
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
  fullName.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task(Of TResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
