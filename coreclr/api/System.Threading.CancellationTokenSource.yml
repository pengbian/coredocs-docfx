items:
- uid: System.Threading.CancellationTokenSource
  id: CancellationTokenSource
  parent: System.Threading
  children:
  - System.Threading.CancellationTokenSource.#ctor
  - System.Threading.CancellationTokenSource.#ctor(System.Int32)
  - System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)
  - System.Threading.CancellationTokenSource.Cancel
  - System.Threading.CancellationTokenSource.Cancel(System.Boolean)
  - System.Threading.CancellationTokenSource.CancelAfter(System.Int32)
  - System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)
  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])
  - System.Threading.CancellationTokenSource.Dispose
  - System.Threading.CancellationTokenSource.Dispose(System.Boolean)
  - System.Threading.CancellationTokenSource.IsCancellationRequested
  - System.Threading.CancellationTokenSource.Token
  href: System.Threading.CancellationTokenSource.yml
  name: CancellationTokenSource
  fullName: System.Threading.CancellationTokenSource
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 35
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Signals to a [System.Threading.CancellationToken](System.Threading.CancellationToken.yml) that it should be canceled.
  remarks: >-
    <para>

    <see cref="T:System.Threading.CancellationTokenSource" /> is used to instantiate a <see cref="T:System.Threading.CancellationToken" />

    (via the source's <see cref="P:System.Threading.CancellationTokenSource.Token">Token</see> property)

    that can be handed to operations that wish to be notified of cancellation or that can be used to

    register asynchronous operations for cancellation. That token may have cancellation requested by

    calling to the source's <see cref="M:System.Threading.CancellationTokenSource.Cancel">Cancel</see>

    method.

    </para>

    <para>

    All members of this class, except <see cref="M:System.Threading.CancellationTokenSource.Dispose">Dispose</see>, are thread-safe and may be used

    concurrently from multiple threads.

    </para>
  syntax:
    content: 'public class CancellationTokenSource : IDisposable'
    content.vb: Public Class CancellationTokenSource Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.CancellationTokenSource.IsCancellationRequested
  id: IsCancellationRequested
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: IsCancellationRequested
  fullName: System.Threading.CancellationTokenSource.IsCancellationRequested
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 112
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets whether cancellation has been requested for this [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml).
  remarks: >-
    <para>

    This property indicates whether cancellation has been requested for this token source, such as

    due to a call to its

    <see cref="M:System.Threading.CancellationTokenSource.Cancel">Cancel</see> method.

    </para>

    <para>

    If this property returns true, it only guarantees that cancellation has been requested. It does not

    guarantee that every handler registered with the corresponding token has finished executing, nor

    that cancellation requests have finished propagating to all registered handlers. Additional

    synchronization may be required, particularly in situations where related objects are being

    canceled concurrently.

    </para>
  syntax:
    content: public bool IsCancellationRequested { get; }
    content.vb: Public ReadOnly Property IsCancellationRequested As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Threading.CancellationTokenSource.Token
  id: Token
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: Token
  fullName: System.Threading.CancellationTokenSource.Token
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 150
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Gets the [System.Threading.CancellationToken](System.Threading.CancellationToken.yml)

    associated with this [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml).
  syntax:
    content: public CancellationToken Token { get; }
    content.vb: Public ReadOnly Property Token As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
  exceptions:
  - type: System.ObjectDisposedException
    description: >-
      The token source has been

      disposed.
- uid: System.Threading.CancellationTokenSource.#ctor
  id: '#ctor'
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: CancellationTokenSource()
  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 250
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Initializes the [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml).
  syntax:
    content: public CancellationTokenSource()
    content.vb: Public Sub New
- uid: System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: CancellationTokenSource(TimeSpan)
  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 282
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Constructs a [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml) that will be canceled after a specified time span.
  remarks: >-
    <para>

    The countdown for the delay starts during the call to the constructor.  When the delay expires,

    the constructed <see cref="T:System.Threading.CancellationTokenSource" /> is canceled, if it has

    not been canceled already.

    </para>

    <para>

    Subsequent calls to CancelAfter will reset the delay for the constructed

    <see cref="T:System.Threading.CancellationTokenSource" />, if it has not been

    canceled already.

    </para>
  syntax:
    content: public CancellationTokenSource(TimeSpan delay)
    content.vb: Public Sub New(delay As TimeSpan)
    parameters:
    - id: delay
      type: System.TimeSpan
      description: The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when  is less than -1 or greater than Int32.MaxValue.
- uid: System.Threading.CancellationTokenSource.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: CancellationTokenSource(Int32)
  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 312
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Constructs a [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml) that will be canceled after a specified time span.
  remarks: >-
    <para>

    The countdown for the millisecondsDelay starts during the call to the constructor.  When the millisecondsDelay expires,

    the constructed <see cref="T:System.Threading.CancellationTokenSource" /> is canceled (if it has

    not been canceled already).

    </para>

    <para>

    Subsequent calls to CancelAfter will reset the millisecondsDelay for the constructed

    <see cref="T:System.Threading.CancellationTokenSource" />, if it has not been

    canceled already.

    </para>
  syntax:
    content: public CancellationTokenSource(int millisecondsDelay)
    content.vb: Public Sub New(millisecondsDelay As Integer)
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when  is less than -1.
- uid: System.Threading.CancellationTokenSource.Cancel
  id: Cancel
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: Cancel()
  fullName: System.Threading.CancellationTokenSource.Cancel()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 356
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Communicates a request for cancellation.
  remarks: >-
    <para>

    The associated <see cref="T:System.Threading.CancellationToken" /> will be

    notified of the cancellation and will transition to a state where

    <see cref="P:System.Threading.CancellationToken.IsCancellationRequested">IsCancellationRequested</see> returns true.

    Any callbacks or cancelable operations

    registered with the <see cref="T:System.Threading.CancellationToken" />  will be executed.

    </para>

    <para>

    Cancelable operations and callbacks registered with the token should not throw exceptions.

    However, this overload of Cancel will aggregate any exceptions thrown into a <see cref="T:System.AggregateException" />,

    such that one callback throwing an exception will not prevent other registered callbacks from being executed.

    </para>

    <para>

    The <see cref="T:System.Threading.ExecutionContext" /> that was captured when each callback was registered

    will be reestablished when the callback is invoked.

    </para>
  syntax:
    content: public void Cancel()
    content.vb: Public Sub Cancel
  exceptions:
  - type: System.AggregateException
    description: >-
      An aggregate exception containing all the exceptions thrown

      by the registered callbacks on the associated .
  - type: System.ObjectDisposedException
    description: This  has been disposed.
- uid: System.Threading.CancellationTokenSource.Cancel(System.Boolean)
  id: Cancel(System.Boolean)
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: Cancel(Boolean)
  fullName: System.Threading.CancellationTokenSource.Cancel(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 390
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Communicates a request for cancellation.
  remarks: >-
    <para>

    The associated <see cref="T:System.Threading.CancellationToken" /> will be

    notified of the cancellation and will transition to a state where

    <see cref="P:System.Threading.CancellationToken.IsCancellationRequested">IsCancellationRequested</see> returns true.

    Any callbacks or cancelable operations

    registered with the <see cref="T:System.Threading.CancellationToken" />  will be executed.

    </para>

    <para>

    Cancelable operations and callbacks registered with the token should not throw exceptions.

    If <paramref name="throwOnFirstException" /> is true, an exception will immediately propagate out of the

    call to Cancel, preventing the remaining callbacks and cancelable operations from being processed.

    If <paramref name="throwOnFirstException" /> is false, this overload will aggregate any

    exceptions thrown into a <see cref="T:System.AggregateException" />,

    such that one callback throwing an exception will not prevent other registered callbacks from being executed.

    </para>

    <para>

    The <see cref="T:System.Threading.ExecutionContext" /> that was captured when each callback was registered

    will be reestablished when the callback is invoked.

    </para>
  syntax:
    content: public void Cancel(bool throwOnFirstException)
    content.vb: Public Sub Cancel(throwOnFirstException As Boolean)
    parameters:
    - id: throwOnFirstException
      type: System.Boolean
      description: Specifies whether exceptions should immediately propagate.
  exceptions:
  - type: System.AggregateException
    description: >-
      An aggregate exception containing all the exceptions thrown

      by the registered callbacks on the associated .
  - type: System.ObjectDisposedException
    description: This  has been disposed.
- uid: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)
  id: CancelAfter(System.TimeSpan)
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: CancelAfter(TimeSpan)
  fullName: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 421
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Schedules a Cancel operation on this [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml).
  remarks: >-
    <para>

    The countdown for the delay starts during this call.  When the delay expires,

    this <see cref="T:System.Threading.CancellationTokenSource" /> is canceled, if it has

    not been canceled already.

    </para>

    <para>

    Subsequent calls to CancelAfter will reset the delay for this

    <see cref="T:System.Threading.CancellationTokenSource" />, if it has not been

    canceled already.

    </para>
  syntax:
    content: public void CancelAfter(TimeSpan delay)
    content.vb: Public Sub CancelAfter(delay As TimeSpan)
    parameters:
    - id: delay
      type: System.TimeSpan
      description: The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception thrown when this  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: >-
      The exception thrown when  is less than -1 or

      greater than Int32.MaxValue.
- uid: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)
  id: CancelAfter(System.Int32)
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: CancelAfter(Int32)
  fullName: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 456
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Schedules a Cancel operation on this [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml).
  remarks: >-
    <para>

    The countdown for the millisecondsDelay starts during this call.  When the millisecondsDelay expires,

    this <see cref="T:System.Threading.CancellationTokenSource" /> is canceled, if it has

    not been canceled already.

    </para>

    <para>

    Subsequent calls to CancelAfter will reset the millisecondsDelay for this

    <see cref="T:System.Threading.CancellationTokenSource" />, if it has not been

    canceled already.

    </para>
  syntax:
    content: public void CancelAfter(int millisecondsDelay)
    content.vb: Public Sub CancelAfter(millisecondsDelay As Integer)
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception thrown when this  has been disposed.
  - type: System.ArgumentOutOfRangeException
    description: The exception thrown when  is less than -1.
- uid: System.Threading.CancellationTokenSource.Dispose
  id: Dispose
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: Dispose()
  fullName: System.Threading.CancellationTokenSource.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 538
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the resources used by this [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml).
  remarks: This method is not thread-safe for any other concurrent calls.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Threading.CancellationTokenSource.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: Dispose(Boolean)
  fullName: System.Threading.CancellationTokenSource.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 548
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the unmanaged resources used by the [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml) class and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: CreateLinkedTokenSource(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 870
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Creates a [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml) that will be in the canceled state

    when any of the source tokens are in the canceled state.
  syntax:
    content: public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2)
    content.vb: Public Shared Function CreateLinkedTokenSource(token1 As CancellationToken, token2 As CancellationToken) As CancellationTokenSource
    parameters:
    - id: token1
      type: System.Threading.CancellationToken
      description: The first [System.Threading.CancellationToken](System.Threading.CancellationToken.yml) to observe.
    - id: token2
      type: System.Threading.CancellationToken
      description: The second <see cref="T:System.Threading.CancellationToken">CancellationToken</see> to observe.
    return:
      type: System.Threading.CancellationTokenSource
      description: >-
        A <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see> that is linked

        to the source tokens.
- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])
  id: CreateLinkedTokenSource(System.Threading.CancellationToken[])
  parent: System.Threading.CancellationTokenSource
  href: System.Threading.CancellationTokenSource.yml
  name: CreateLinkedTokenSource(CancellationToken[])
  name.vb: CreateLinkedTokenSource(CancellationToken())
  fullName: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])
  fullName.vb: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs
    startLine: 904
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: >-
    Creates a [System.Threading.CancellationTokenSource](System.Threading.CancellationTokenSource.yml) that will be in the canceled state

    when any of the source tokens are in the canceled state.
  syntax:
    content: public static CancellationTokenSource CreateLinkedTokenSource(params CancellationToken[] tokens)
    content.vb: Public Shared Function CreateLinkedTokenSource(ParamArray tokens As CancellationToken()) As CancellationTokenSource
    parameters:
    - id: tokens
      type: System.Threading.CancellationToken[]
      description: The [System.Threading.CancellationToken](System.Threading.CancellationToken.yml) instances to observe.
    return:
      type: System.Threading.CancellationTokenSource
      description: >-
        A <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see> that is linked

        to the source tokens.
  exceptions:
  - type: System.ArgumentNullException
    description: is null.
references:
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
  summary: Propagates notification that operations should be canceled.
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Threading.CancellationTokenSource
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationTokenSource.yml
  name: CancellationTokenSource
  fullName: System.Threading.CancellationTokenSource
  type: Class
  summary: Signals to a @'System.Threading.CancellationToken' that it should be canceled.
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
- uid: System.TimeSpan
  parent: System
  isExternal: false
  href: System.TimeSpan.yml
  name: TimeSpan
  fullName: System.TimeSpan
  type: Struct
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.AggregateException
  parent: System
  isExternal: false
  href: System.AggregateException.yml
  name: AggregateException
  fullName: System.AggregateException
  type: Class
  summary: Represents one or more errors that occur during application execution.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
- uid: System.Threading.CancellationToken[]
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken[]
  name.vb: CancellationToken()
  fullName: System.Threading.CancellationToken[]
  fullName.vb: System.Threading.CancellationToken()
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    href: System.Threading.CancellationToken.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    href: System.Threading.CancellationToken.yml
  - name: ()
    fullName: ()
