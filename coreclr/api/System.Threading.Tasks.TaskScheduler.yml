items:
- uid: System.Threading.Tasks.TaskScheduler
  id: TaskScheduler
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskScheduler.#ctor
  - System.Threading.Tasks.TaskScheduler.Current
  - System.Threading.Tasks.TaskScheduler.Default
  - System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
  - System.Threading.Tasks.TaskScheduler.GetScheduledTasks
  - System.Threading.Tasks.TaskScheduler.Id
  - System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  - System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  - System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 40
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Represents an abstract scheduler for tasks.
  remarks: >-
    <para>

    <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> acts as the extension point for all

    pluggable scheduling logic.  This includes mechanisms such as how to schedule a task for execution, and

    how scheduled tasks should be exposed to debuggers.

    </para>

    <para>

    All members of the abstract <see cref="T:System.Threading.Tasks.TaskScheduler" /> type are thread-safe

    and may be used from multiple threads concurrently.

    </para>
  syntax:
    content: public abstract class TaskScheduler
    content.vb: Public MustInherit Class TaskScheduler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  id: QueueTask(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: QueueTask(Task)
  fullName: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 71
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues a [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) to the scheduler.
  remarks: >-
    <para>

    A class derived from <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>

    implements this method to accept tasks being scheduled on the scheduler.

    A typical implementation would store the task in an internal data structure, which would

    be serviced by threads that would execute those tasks at some time in the future.

    </para>

    <para>

    This method is only meant to be called by the .NET Framework and

    should not be called directly by the derived class. This is necessary

    for maintaining the consistency of the system.

    </para>
  syntax:
    content: protected abstract void QueueTask(Task task)
    content.vb: Protected MustOverride Sub QueueTask(task As Task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The <see cref="T:System.Threading.Tasks.Task">Task</see> to be queued.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  id: TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TryExecuteTaskInline(Task, Boolean)
  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 114
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Determines whether the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml)

    can be executed synchronously in this call, and if it can, executes it.
  remarks: >-
    <para>

    A class derived from <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> implements this function to

    support inline execution of a task on a thread that initiates a wait on that task object. Inline

    execution is optional, and the request may be rejected by returning false. However, better

    scalability typically results the more tasks that can be inlined, and in fact a scheduler that

    inlines too little may be prone to deadlocks. A proper implementation should ensure that a

    request executing under the policies guaranteed by the scheduler can successfully inline. For

    example, if a scheduler uses a dedicated thread to execute tasks, any inlining requests from that

    thread should succeed.

    </para>

    <para>

    If a scheduler decides to perform the inline execution, it should do so by calling to the base

    TaskScheduler's

    <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">TryExecuteTask</see> method with the provided task object, propagating

    the return value. It may also be appropriate for the scheduler to remove an inlined task from its

    internal data structures if it decides to honor the inlining request. Note, however, that under

    some circumstances a scheduler may be asked to inline a task that was not previously provided to

    it with the <see cref="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)" /> method.

    </para>

    <para>

    The derived scheduler is responsible for making sure that the calling thread is suitable for

    executing the given task as far as its own scheduling and execution policies are concerned.

    </para>
  syntax:
    content: protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued)
    content.vb: Protected MustOverride Function TryExecuteTaskInline(task As Task, taskWasPreviouslyQueued As Boolean) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: >-
        The <see cref="T:System.Threading.Tasks.Task">Task</see> to be

        executed.
    - id: taskWasPreviouslyQueued
      type: System.Boolean
      description: >-
        A Boolean denoting whether or not task has previously been

        queued. If this parameter is True, then the task may have been previously queued (scheduled); if

        False, then the task is known not to have been queued, and this call is being made in order to

        execute the task inline without queueing it.
    return:
      type: System.Boolean
      description: A Boolean value indicating whether the task was executed inline.
  exceptions:
  - type: System.ArgumentNullException
    description: >-
      The  argument is

      null.
  - type: System.InvalidOperationException
    description: >-
      The  was already

      executed.
- uid: System.Threading.Tasks.TaskScheduler.GetScheduledTasks
  id: GetScheduledTasks
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: GetScheduledTasks()
  fullName: System.Threading.Tasks.TaskScheduler.GetScheduledTasks()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 158
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Generates an enumerable of [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) instances

    currently queued to the scheduler waiting to be executed.
  remarks: >-
    <para>

    A class derived from <see cref="T:System.Threading.Tasks.TaskScheduler" /> implements this method in order to support

    integration with debuggers. This method will only be invoked by the .NET Framework when the

    debugger requests access to the data. The enumerable returned will be traversed by debugging

    utilities to access the tasks currently queued to this scheduler, enabling the debugger to

    provide a representation of this information in the user interface.

    </para>

    <para>

    It is important to note that, when this method is called, all other threads in the process will

    be frozen. Therefore, it's important to avoid synchronization with other threads that may lead to

    blocking. If synchronization is necessary, the method should prefer to throw a <see cref="T:System.NotSupportedException" />

    than to block, which could cause a debugger to experience delays. Additionally, this method and

    the enumerable returned must not modify any globally visible state.

    </para>

    <para>

    The returned enumerable should never be null. If there are currently no queued tasks, an empty

    enumerable should be returned instead.

    </para>

    <para>

    For developers implementing a custom debugger, this method shouldn't be called directly, but

    rather this functionality should be accessed through the internal wrapper method

    GetScheduledTasksForDebugger:

    <c>internal Task[] GetScheduledTasksForDebugger()</c>. This method returns an array of tasks,

    rather than an enumerable. In order to retrieve a list of active schedulers, a debugger may use

    another internal method: <c>internal static TaskScheduler[] GetTaskSchedulersForDebugger()</c>.

    This static method returns an array of all active TaskScheduler instances.

    GetScheduledTasksForDebugger then may be used on each of these scheduler instances to retrieve

    the list of scheduled tasks for each.

    </para>
  syntax:
    content: protected abstract IEnumerable<Task> GetScheduledTasks()
    content.vb: Protected MustOverride Function GetScheduledTasks As IEnumerable(Of Task)
    return:
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: An enumerable that allows traversal of tasks currently queued to this scheduler.
  exceptions:
  - type: System.NotSupportedException
    description: This scheduler is unable to generate a list of queued tasks at this time.
- uid: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  id: MaximumConcurrencyLevel
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: MaximumConcurrencyLevel
  fullName: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 165
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Indicates the maximum concurrency level this

    [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml)  is able to support.
  syntax:
    content: public virtual int MaximumConcurrencyLevel { get; }
    content.vb: Public Overridable ReadOnly Property MaximumConcurrencyLevel As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  id: TryDequeue(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TryDequeue(Task)
  fullName: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 238
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Attempts to dequeue a [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) that was previously queued to

    this scheduler.
  syntax:
    content: protected virtual bool TryDequeue(Task task)
    content.vb: Protected Overridable Function TryDequeue(task As Task) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The <see cref="T:System.Threading.Tasks.Task">Task</see> to be dequeued.
    return:
      type: System.Boolean
      description: A Boolean denoting whether the <paramref name="task" /> argument was successfully dequeued.
  exceptions:
  - type: System.ArgumentNullException
    description: The  argument is null.
- uid: System.Threading.Tasks.TaskScheduler.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TaskScheduler()
  fullName: System.Threading.Tasks.TaskScheduler.TaskScheduler()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 301
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes the [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml).
  syntax:
    content: protected TaskScheduler()
    content.vb: Protected Sub New
- uid: System.Threading.Tasks.TaskScheduler.Default
  id: Default
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: Default
  fullName: System.Threading.Tasks.TaskScheduler.Default
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 312
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the default [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml) instance.
  syntax:
    content: public static TaskScheduler Default { get; }
    content.vb: Public Shared ReadOnly Property Default As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskScheduler.Current
  id: Current
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: Current
  fullName: System.Threading.Tasks.TaskScheduler.Current
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 327
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Gets the [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml)

    associated with the currently executing task.
  remarks: When not called from within a task, [System.Threading.Tasks.TaskScheduler.Current](System.Threading.Tasks.TaskScheduler.yml) will return the [System.Threading.Tasks.TaskScheduler.Default](System.Threading.Tasks.TaskScheduler.yml) scheduler.
  syntax:
    content: public static TaskScheduler Current { get; }
    content.vb: Public Shared ReadOnly Property Current As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
  id: FromCurrentSynchronizationContext
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: FromCurrentSynchronizationContext()
  fullName: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 372
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Creates a [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml)

    associated with the current [System.Threading.SynchronizationContext](System.Threading.SynchronizationContext.yml).
  remarks: >-
    All [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml) instances queued to

    the returned scheduler will be executed through a call to the

    [System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)](System.Threading.SynchronizationContext.yml) method

    on that context.
  syntax:
    content: public static TaskScheduler FromCurrentSynchronizationContext()
    content.vb: Public Shared Function FromCurrentSynchronizationContext As TaskScheduler
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: >-
        A <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with

        the current <see cref="T:System.Threading.SynchronizationContext">SynchronizationContext</see>, as

        determined by <see cref="P:System.Threading.SynchronizationContext.Current">SynchronizationContext.Current</see>.
  exceptions:
  - type: System.InvalidOperationException
    description: The current SynchronizationContext may not be used as a TaskScheduler.
- uid: System.Threading.Tasks.TaskScheduler.Id
  id: Id
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: Id
  fullName: System.Threading.Tasks.TaskScheduler.Id
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 380
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the unique ID for this [System.Threading.Tasks.TaskScheduler](System.Threading.Tasks.TaskScheduler.yml).
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  id: TryExecuteTask(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TryExecuteTask(Task)
  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 429
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Attempts to execute the provided [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml)

    on this scheduler.
  remarks: >-
    <para>

    Scheduler implementations are provided with <see cref="T:System.Threading.Tasks.Task">Task</see>

    instances to be executed through either the <see cref="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)" /> method or the

    <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /> method. When the scheduler deems it appropriate to run the

    provided task, <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)" /> should be used to do so. TryExecuteTask handles all

    aspects of executing a task, including action invocation, exception handling, state management,

    and lifecycle control.

    </para>

    <para>

    <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)" /> must only be used for tasks provided to this scheduler by the .NET

    Framework infrastructure. It should not be used to execute arbitrary tasks obtained through

    custom mechanisms.

    </para>
  syntax:
    content: protected bool TryExecuteTask(Task task)
    content.vb: Protected Function TryExecuteTask(task As Task) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: A <see cref="T:System.Threading.Tasks.Task">Task</see> object to be executed.
    return:
      type: System.Boolean
      description: >-
        A Boolean that is true if <paramref name="task" /> was successfully executed, false if it

        was not. A common reason for execution failure is that the task had previously been executed or

        is in the process of being executed by another thread.
  exceptions:
  - type: System.InvalidOperationException
    description: The  is not associated with this scheduler.
- uid: System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  id: UnobservedTaskException
  parent: System.Threading.Tasks.TaskScheduler
  href: System.Threading.Tasks.TaskScheduler.yml
  name: UnobservedTaskException
  fullName: System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 458
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: >-
    Occurs when a faulted [System.Threading.Tasks.Task](System.Threading.Tasks.Task.yml)'s unobserved exception is about to trigger exception escalation

    policy, which, by default, would terminate the process.
  remarks: >-
    This AppDomain-wide event provides a mechanism to prevent exception

    escalation policy (which, by default, terminates the process) from triggering.

    Each handler is passed a [System.Threading.Tasks.UnobservedTaskExceptionEventArgs](System.Threading.Tasks.UnobservedTaskExceptionEventArgs.yml)

    instance, which may be used to examine the exception and to mark it as observed.
  syntax:
    content: public static event EventHandler<UnobservedTaskExceptionEventArgs> UnobservedTaskException
    content.vb: Public Shared Event UnobservedTaskException As EventHandler(Of UnobservedTaskExceptionEventArgs)
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  summary: Represents an asynchronous operation.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
- uid: System.InvalidOperationException
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  type: Class
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.NotSupportedException
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  type: Class
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<Task>
  name.vb: IEnumerable(Of Task)
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
  type: Class
  summary: Represents an abstract scheduler for tasks.
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Threading.Tasks.TaskScheduler.Current
- uid: System.Threading.Tasks.TaskScheduler.Default
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  href: System.Threading.SynchronizationContext.yml
  name: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
  type: Class
- uid: System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
- uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  isExternal: false
  href: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.yml
  name: UnobservedTaskExceptionEventArgs
  fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  type: Class
  summary: >-
    Provides data for the event that is raised when a faulted @'System.Threading.Tasks.Task''s

    exception goes unobserved.
