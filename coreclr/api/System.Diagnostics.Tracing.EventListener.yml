items:
- uid: System.Diagnostics.Tracing.EventListener
  id: EventListener
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventListener.#ctor
  - System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.Dispose
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  href: System.Diagnostics.Tracing.EventListener.yml
  name: EventListener
  fullName: System.Diagnostics.Tracing.EventListener
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
      key: 6c42ef8d
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4081
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    An EventListener represents a target for the events generated by EventSources (that is subclasses

    of [System.Diagnostics.Tracing.EventSource](System.Diagnostics.Tracing.EventSource.yml)), in the current appdomain. When a new EventListener is created

    it is logically attached to all eventSources in that appdomain. When the EventListener is Disposed, then

    it is disconnected from the event eventSources. Note that there is a internal list of STRONG references

    to EventListeners, which means that relying on the lack of references to EventListeners to clean up

    EventListeners will NOT work. You must call EventListener.Dispose explicitly when a dispatcher is no

    longer needed.

    <para>

    Once created, EventListeners can enable or disable on a per-eventSource basis using verbosity levels

    (<see cref="T:System.Diagnostics.Tracing.EventLevel" />) and bitfields (<see cref="T:System.Diagnostics.Tracing.EventKeywords" />) to further restrict the set of

    events to be sent to the dispatcher. The dispatcher can also send arbitrary commands to a particular

    eventSource using the 'SendCommand' method. The meaning of the commands are eventSource specific.

    </para><para>

    The Null Guid (that is (new Guid()) has special meaning as a wildcard for 'all current eventSources in

    the appdomain'. Thus it is relatively easy to turn on all events in the appdomain if desired.

    </para><para>

    It is possible for there to be many EventListener's defined in a single appdomain. Each dispatcher is

    logically independent of the other listeners. Thus when one dispatcher enables or disables events, it

    affects only that dispatcher (other listeners get the events they asked for). It is possible that

    commands sent with 'SendCommand' would do a semantic operation that would affect the other listeners

    (like doing a GC, or flushing data ...), but this is the exception rather than the rule.

    </para><para>

    Thus the model is that each EventSource keeps a list of EventListeners that it is sending events

    to. Associated with each EventSource-dispatcher pair is a set of filtering criteria that determine for

    that eventSource what events that dispatcher will receive.

    </para><para>

    Listeners receive the events on their 'OnEventWritten' method. Thus subclasses of EventListener must

    override this method to do something useful with the data.

    </para><para>

    In addition, when new eventSources are created, the 'OnEventSourceCreate' method is called. The

    invariant associated with this callback is that every eventSource gets exactly one

    'OnEventSourceCreate' call for ever eventSource that can potentially send it log messages. In

    particular when a EventListener is created, typically a series of OnEventSourceCreate' calls are

    made to notify the new dispatcher of all the eventSources that existed before the EventListener was

    created.

    </para>
  syntax:
    content: 'public abstract class EventListener : IDisposable'
    content.vb: Public MustInherit Class EventListener Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Diagnostics.Tracing.EventListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: EventListener()
  fullName: System.Diagnostics.Tracing.EventListener.EventListener()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4087
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Create a new EventListener in which all events start off turned off (use EnableEvents to turn

    them on).
  syntax:
    content: protected EventListener()
    content.vb: Protected Sub New
- uid: System.Diagnostics.Tracing.EventListener.Dispose
  id: Dispose
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: Dispose()
  fullName: System.Diagnostics.Tracing.EventListener.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4136
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Dispose should be called when the EventListener no longer desires 'OnEvent*' callbacks. Because

    there is an internal list of strong references to all EventListeners, calling 'Dispose' directly

    is the only way to actually make the listen die. Thus it is important that users of EventListener

    call Dispose when they are done with their logging.
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: EnableEvents(EventSource, EventLevel)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4185
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Enable all events from the eventSource identified by 'eventSource' to the current

    dispatcher that have a verbosity level of 'level' or lower.



    This call can have the effect of REDUCING the number of events sent to the

    dispatcher if 'level' indicates a less verbose level than was previously enabled.



    This call never has an effect on other EventListeners.
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: EnableEvents(EventSource, EventLevel, EventKeywords)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4200
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Enable all events from the eventSource identified by 'eventSource' to the current

    dispatcher that have a verbosity level of 'level' or lower and have a event keyword

    matching any of the bits in 'matchAnyKeyword'.



    This call can have the effect of REDUCING the number of events sent to the

    dispatcher if 'level' indicates a less verbose level than was previously enabled or

    if 'matchAnyKeyword' has fewer keywords set than where previously set.



    This call never has an effect on other EventListeners.
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary<String, String>)
  name.vb: EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary(Of String, String))
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary<System.String, System.String>)
  fullName.vb: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary(Of System.String, System.String))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4216
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Enable all events from the eventSource identified by 'eventSource' to the current

    dispatcher that have a verbosity level of 'level' or lower and have a event keyword

    matching any of the bits in 'matchAnyKeyword' as well as any (eventSource specific)

    effect passing additional 'key-value' arguments 'arguments' might have.



    This call can have the effect of REDUCING the number of events sent to the

    dispatcher if 'level' indicates a less verbose level than was previously enabled or

    if 'matchAnyKeyword' has fewer keywords set than where previously set.



    This call never has an effect on other EventListeners.
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, IDictionary<string, string> arguments)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords, arguments As IDictionary(Of String, String))
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
    - id: arguments
      type: System.Collections.Generic.IDictionary{System.String,System.String}
- uid: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  id: DisableEvents(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: DisableEvents(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4231
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    Disables all events coming from eventSource identified by 'eventSource'.



    This call never has an effect on other EventListeners.
  syntax:
    content: public void DisableEvents(EventSource eventSource)
    content.vb: Public Sub DisableEvents(eventSource As EventSource)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  id: EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: EventSourceIndex(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4249
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    EventSourceIndex is small non-negative integer (suitable for indexing in an array)

    identifying EventSource. It is unique per-appdomain. Some EventListeners might find

    it useful to store additional information about each eventSource connected to it,

    and EventSourceIndex allows this extra information to be efficiently stored in a

    (growable) array (eg List(T)).
  syntax:
    content: public static int EventSourceIndex(EventSource eventSource)
    content.vb: Public Shared Function EventSourceIndex(eventSource As EventSource) As Integer
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
    return:
      type: System.Int32
- uid: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  id: OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: OnEventSourceCreated(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4264
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This method is called whenever a new eventSource is 'attached' to the dispatcher.

    This can happen for all existing EventSources when the EventListener is created

    as well as for any EventSources that come into existence after the EventListener

    has been created.



    These 'catch up' events are called during the construction of the EventListener.

    Subclasses need to be prepared for that.



    In a multi-threaded environment, it is possible that 'OnEventWritten' callbacks

    for a particular eventSource to occur BEFORE the OnEventSourceCreated is issued.
  syntax:
    content: protected virtual void OnEventSourceCreated(EventSource eventSource)
    content.vb: Protected Overridable Sub OnEventSourceCreated(eventSource As EventSource)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  id: OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  parent: System.Diagnostics.Tracing.EventListener
  href: System.Diagnostics.Tracing.EventListener.yml
  name: OnEventWritten(EventWrittenEventArgs)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4269
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: >-
    This method is called whenever an event has been written by a EventSource for which

    the EventListener has enabled events.
  syntax:
    content: protected abstract void OnEventWritten(EventWrittenEventArgs eventData)
    content.vb: Protected MustOverride Sub OnEventWritten(eventData As EventWrittenEventArgs)
    parameters:
    - id: eventData
      type: System.Diagnostics.Tracing.EventWrittenEventArgs
references:
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventSource.yml
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
  type: Class
  summary: >-
    This class is meant to be inherited by a user-defined event source in order to define a managed

    ETW provider.   Please See DESIGN NOTES above for the internal architecture.

    The minimal definition of an EventSource simply specifies a number of ETW event methods that

    call one of the EventSource.WriteEvent overloads, @'System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)',

    or @'System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)' to log them. This functionality

    is sufficient for many users.

    <para>

    To achieve more control over the ETW provider manifest exposed by the event source type, the

    [<see cref="T:System.Diagnostics.Tracing.EventAttribute" />] attributes can be specified for the ETW event methods.

    </para><para>

    For very advanced EventSources, it is possible to intercept the commands being given to the

    eventSource and change what filtering is done (see EventListener.EnableEvents and

    <see cref="M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)" />) or cause actions to be performed by the eventSource,

    e.g. dumping a data structure (see EventSource.SendCommand and

    <see cref="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" />).

    </para><para>

    The eventSources can be turned on with Windows ETW controllers (e.g. logman), immediately.

    It is also possible to control and intercept the data dispatcher programmatically.  See

    <see cref="T:System.Diagnostics.Tracing.EventListener" /> for more.

    </para>
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventLevel.yml
  name: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
  type: Enum
  summary: WindowsEventLevel. Custom values must be in the range from 16 through 255
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventKeywords.yml
  name: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
  type: Enum
  summary: EventOpcode
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: System.Collections.Generic.IDictionary`2.yml
  name: IDictionary<String, String>
  name.vb: IDictionary(Of String, String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IDictionary`2.yml
  name: IDictionary<TKey, TValue>
  name.vb: IDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    href: System.Collections.Generic.IDictionary`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs
  parent: System.Diagnostics.Tracing
  isExternal: false
  href: System.Diagnostics.Tracing.EventWrittenEventArgs.yml
  name: EventWrittenEventArgs
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs
  type: Class
  summary: >-
    EventWrittenEventArgs is passed to the user-provided override for

    @'System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)' when an event is fired.
